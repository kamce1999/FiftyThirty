//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.18.0 (NJsonSchema v9.13.27.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace breadcrumb
{
    #pragma warning disable
	/// <summary>contains information about the page</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Meta 
    {
        /// <summary>number of objects in this page</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Limit { get; set; }
    
        /// <summary>index of the first object in this page</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Offset { get; set; }
    
        /// <summary>total number of objects in all pages</summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total_count { get; set; }
    
        /// <summary>URL for the next page of results (or “null” if none)</summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }
    
        /// <summary>URL for the previous page of results (or “null” if none)</summary>
        [Newtonsoft.Json.JsonProperty("previous", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Previous { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Meta FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Meta>(data);
        }
    
    }
    
    /// <summary>Either "active" to see items which are able to be ordered, or "archived" to see items no longer available for ordering</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ItemStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,
    
    }
    
    /// <summary>“normal” (for regular items), “service fee”, “deposit” or “gift card”</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ItemType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"service fee")]
        Service_fee = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"deposit")]
        Deposit = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gift card")]
        Gift_card = 3,
    
    }
    
    /// <summary>Either "active" to see modifiers which are able to be ordered, or "archived" to see modifiers that are no longer available for ordering</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ModifierStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Categories 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Category> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Categories FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Categories>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Category 
    {
        /// <summary>the unique identifier for the category</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the human-readable name of the category</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>the unique identifier for the parent category of this category (or “null” if it doesn’t have one)</summary>
        [Newtonsoft.Json.JsonProperty("parent_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parent_id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Category FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Category>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Items 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Item> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Items FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Items>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Item 
    {
        /// <summary>the unique identifier for the item</summary>
        [Newtonsoft.Json.JsonProperty("item_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item_id { get; set; }
    
        /// <summary>the human-readable name of the category</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>the user given price for the item that will appear on the end customer’s printed receipt</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Price { get; set; }
    
        /// <summary>the user given identifier given to the item to match IDs in external systems; will be empty if not provided</summary>
        [Newtonsoft.Json.JsonProperty("item_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item_identifier { get; set; }
    
        /// <summary>the human-readable category of this item</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        /// <summary>the unique identifier for the category of this item</summary>
        [Newtonsoft.Json.JsonProperty("category_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category_id { get; set; }
    
        /// <summary>the human-readable name for the tax rate of this item</summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tax { get; set; }
    
        /// <summary>the unique identifier for the tax rate of this item</summary>
        [Newtonsoft.Json.JsonProperty("tax_rate_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tax_rate_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("item_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemType? Item_type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Item FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Item>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Modifiers 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Modifier> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Modifiers FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Modifiers>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Modifier 
    {
        /// <summary>the unique identifier for the modifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the human-readable name of the modifier</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>the user given price for the modifier that will appear on the end customer’s printed receipt</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Price { get; set; }
    
        /// <summary>the human-readable name for the tax rate of this modifer</summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tax { get; set; }
    
        /// <summary>the unique identifier for the tax rate of this modifier</summary>
        [Newtonsoft.Json.JsonProperty("tax_rate_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tax_rate_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifierStatus? Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Modifier FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Modifier>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Taxes 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tax> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Taxes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Taxes>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Tax 
    {
        /// <summary>the unique identifier for the tax rate</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the human­-readable name of the tax rate</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>the percent that this tax rate adds to a check; value is decimalized. This is the current rate of the tax ­ all historical tax values are warehoused to given check at the time it is created.</summary>
        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tax_rate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Tax FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tax>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Zones 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Zone> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Zones FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Zones>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Zone 
    {
        /// <summary>the human-readable name of the zone</summary>
        [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zone1 { get; set; }
    
        /// <summary>the unique identifier of the zone</summary>
        [Newtonsoft.Json.JsonProperty("zone_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zone_id { get; set; }
    
        /// <summary>either “active” if the zone is contains at least 1 active table within or “archived” if not</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ZoneStatus? Status { get; set; }
    
        /// <summary>a comma­separated list of all active names within the zone</summary>
        [Newtonsoft.Json.JsonProperty("tables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tables { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Zone FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Zone>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DayParts 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DayPart> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DayParts FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DayParts>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DayPart 
    {
        /// <summary>the unique identifier for the day part</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the human­-readable name of the tax rate</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>the start of day part in time format</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Start { get; set; }
    
        /// <summary>the end of day part in time format</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DayPart FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DayPart>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TradingDays 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TradingDay> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TradingDays FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TradingDays>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TradingDay 
    {
        /// <summary>the unique identifier for the trading day</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the calendar date which is represented by this trading day in date format. This is usually (but not always) the actual date on which the trading day began.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }
    
        /// <summary>the actual time the trading day began in timestamp format</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Start { get; set; }
    
        /// <summary>the actual time the trading day ended in timestamp format. Will be "null" for the currently active trading day.</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End { get; set; }
    
        /// <summary>either "Active" if the trading day is the current trading day (i.e., the trading day is in progress right now) or "Inactive" if the trading day has already finished</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TradingDayStatus? Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TradingDay FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TradingDay>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Checks 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Check> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Checks FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Checks>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Check 
    {
        /// <summary>the unique identifier for the check</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the unique identifier for the trading day when the check was created</summary>
        [Newtonsoft.Json.JsonProperty("trading_day_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trading_day_id { get; set; }
    
        /// <summary>the human-readable name of this check. Often reflects either the table number, patron's name, or delivery phone number</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>the user­facing number assigned to this check. This may be repeated on checks in different trading days and should never be considered a unique identifier</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>will be "Open" if the party is still dining or "Closed" otherwise; if the check is left open across the close of a trading day, the status will be "AutoClosed"</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CheckStatus? Status { get; set; }
    
        /// <summary>the total of all items exclusive of tax as a monetary value</summary>
        [Newtonsoft.Json.JsonProperty("sub_total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub_total { get; set; }
    
        /// <summary>the total amount of all tax as a monetary value</summary>
        [Newtonsoft.Json.JsonProperty("tax_total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tax_total { get; set; }
    
        /// <summary>the sum of the sub_total and tax_total as a monetary value</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Total { get; set; }
    
        /// <summary>the amount of the mandatory tip (i.e., auto­gratuity) if any</summary>
        [Newtonsoft.Json.JsonProperty("mandatory_tip_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mandatory_tip_amount { get; set; }
    
        /// <summary>the timestamp of when the checks was first opened</summary>
        [Newtonsoft.Json.JsonProperty("open_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Open_time { get; set; }
    
        /// <summary>the timestamp of when the check changed to "Closed" status</summary>
        [Newtonsoft.Json.JsonProperty("close_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Close_time { get; set; }
    
        /// <summary>the name of the employee who created the check</summary>
        [Newtonsoft.Json.JsonProperty("employee_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Employee_name { get; set; }
    
        /// <summary>the human­-readable role of the employee</summary>
        [Newtonsoft.Json.JsonProperty("employee_role_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Employee_role_name { get; set; }
    
        /// <summary>the unique identifier of the employee who created the check</summary>
        [Newtonsoft.Json.JsonProperty("employee_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Employee_id { get; set; }
    
        /// <summary>the number of guests at the table</summary>
        [Newtonsoft.Json.JsonProperty("guest_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Guest_count { get; set; }
    
        /// <summary>the kind of order</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CheckType? Type { get; set; }
    
        /// <summary>a numeric representation of the type</summary>
        [Newtonsoft.Json.JsonProperty("type_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CheckType_id? Type_id { get; set; }
    
        /// <summary>whether taxes are already included in the price of items or not.</summary>
        [Newtonsoft.Json.JsonProperty("taxed_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CheckTaxed_type? Taxed_type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CheckItem> Items { get; set; }
    
        /// <summary>a list of payments accepted for the check. May have multiple items if multiple credit cards or other payment methods were used</summary>
        [Newtonsoft.Json.JsonProperty("payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Anonymous> Payments { get; set; }
    
        /// <summary>a description of how part of the check was dismissed or "null" if the customer paid full price</summary>
        [Newtonsoft.Json.JsonProperty("voidcomp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Voidcomp Voidcomp { get; set; }
    
        /// <summary>the restaurant's human­-readable name for the table. Present if the check type is "Table"</summary>
        [Newtonsoft.Json.JsonProperty("table_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Table_name { get; set; }
    
        /// <summary>the restaurant's human­-readable name for the area of the restaurant containing the table. Present if the check type is "Table"</summary>
        [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zone { get; set; }
    
        /// <summary>the unique identifier for the zone containing the table. Present if the check type is "Table"</summary>
        [Newtonsoft.Json.JsonProperty("zone_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zone_id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Check FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Check>(data);
        }
    
    }
    
    /// <summary>Check Items are included with each response from the Check List and Check Detail APIs. A check item represents an individual item having been ordered and purchased on a check (i.e., as contrasted with an "item" which represents the thing itself apart from any purchases). While they can only appear as part of a check, restaurants often want to analyze sales of individual items by category, day part, and many other ways.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CheckItem 
    {
        /// <summary>the unique identifier for the check item</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the unique identifier of the check to which this check item belongs</summary>
        [Newtonsoft.Json.JsonProperty("check_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Check_id { get; set; }
    
        /// <summary>the human­-readable name of the check item. This is typically the name which appears on the restaurant's menu</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>the timestamp of when this item was added to the check</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }
    
        /// <summary>the unique identifier for the category of this item</summary>
        [Newtonsoft.Json.JsonProperty("category_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category_id { get; set; }
    
        /// <summary>the unique identifier for the item</summary>
        [Newtonsoft.Json.JsonProperty("item_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item_id { get; set; }
    
        /// <summary>the number of items purchased. Checks may have multiple check items which represent the same item, and each has a quantity. This means it is necessary to collate all check items possessing the same item_id in order to correctly sum the total quantity of a given item appearing in a check</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity { get; set; }
    
        /// <summary>the price the customer was actually charged for each item inclusive of the price of all sides, modifiers, tax, voids and comp`s</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Price { get; set; }
    
        /// <summary>the price the customer was actually charged for each item inclusive of the price of all sides, modifiers, voids and comps, exclusive of tax</summary>
        [Newtonsoft.Json.JsonProperty("pre_tax_price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pre_tax_price { get; set; }
    
        /// <summary>the normal price of an individual item at the time of purchase inclusive of sides and modifiers, exclusive of tax</summary>
        [Newtonsoft.Json.JsonProperty("regular_price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Regular_price { get; set; }
    
        /// <summary>the cost of the item to the restaurant at the time of purchase</summary>
        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cost { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Side> Sides { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Modifier> Modifiers { get; set; }
    
        /// <summary>an explanation of why this item was not charged to the customer. This is omitted if the check item has not been voided or comped</summary>
        [Newtonsoft.Json.JsonProperty("voidcomp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Voidcomp2 Voidcomp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CheckItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckItem>(data);
        }
    
    }
    
    /// <summary>Sides have the same fields as a check item, except they may not have sides themselves. This is omitted if the check item has no sides</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Side 
    {
        /// <summary>the unique identifier for the side</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the unique identifier of the check to which this side belongs</summary>
        [Newtonsoft.Json.JsonProperty("check_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Check_id { get; set; }
    
        /// <summary>the human­-readable name of the side. This is typically the name which appears on the restaurant's menu</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>the timestamp of when this side was added to the check</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }
    
        /// <summary>the unique identifier for the category of this side</summary>
        [Newtonsoft.Json.JsonProperty("category_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category_id { get; set; }
    
        /// <summary>the unique identifier for the side</summary>
        [Newtonsoft.Json.JsonProperty("item_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item_id { get; set; }
    
        /// <summary>the number of sides purchased</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity { get; set; }
    
        /// <summary>the price the customer was actually charged for each side inclusive of the price of all modifiers, tax, voids and comp`s</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Price { get; set; }
    
        /// <summary>the price the customer was actually charged for each side inclusive of the price of all modifiers, voids and comps, exclusive of tax</summary>
        [Newtonsoft.Json.JsonProperty("pre_tax_price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pre_tax_price { get; set; }
    
        /// <summary>the normal price of an individual side at the time of purchase inclusive of modifiers, exclusive of tax</summary>
        [Newtonsoft.Json.JsonProperty("regular_price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Regular_price { get; set; }
    
        /// <summary>the cost of the side to the restaurant at the time of purchase</summary>
        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cost { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Modifier> Modifiers { get; set; }
    
        /// <summary>an explanation of why this side was not charged to the customer. This is omitted if the side has not been voided or comped</summary>
        [Newtonsoft.Json.JsonProperty("voidcomp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Voidcomp3 Voidcomp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Side FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Side>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentAuths 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentAuth> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PaymentAuths FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentAuths>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentAuth 
    {
        /// <summary>the unique identifier for the payment</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the unique identifier for the check</summary>
        [Newtonsoft.Json.JsonProperty("check_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Check_id { get; set; }
    
        /// <summary>the amount of the payment as a monetary value</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        /// <summary>the amount added as a tip (for credit cards) as a monetary value</summary>
        [Newtonsoft.Json.JsonProperty("tip_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tip_amount { get; set; }
    
        /// <summary>the timestamp on which the payment was authorized</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }
    
        /// <summary>the name of the owner of the card</summary>
        [Newtonsoft.Json.JsonProperty("cc_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cc_name { get; set; }
    
        /// <summary>the issuer of the credit card</summary>
        [Newtonsoft.Json.JsonProperty("cc_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentAuthCc_type? Cc_type { get; set; }
    
        /// <summary>the last four digits on the credit card</summary>
        [Newtonsoft.Json.JsonProperty("last_4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_4 { get; set; }
    
        /// <summary>the auth code returned from the card processor</summary>
        [Newtonsoft.Json.JsonProperty("auth_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Auth_code { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PaymentAuth FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentAuth>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Refunds 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Refund> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Refunds FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Refunds>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Refund 
    {
        /// <summary>the unique identifier for the refunded payment</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the unique identifier for the check</summary>
        [Newtonsoft.Json.JsonProperty("check_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Check_id { get; set; }
    
        /// <summary>the amount of the refund as a monetary value</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        /// <summary>the timestamp on which the refund was created</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }
    
        /// <summary>the name of the owner of the card</summary>
        [Newtonsoft.Json.JsonProperty("cc_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cc_name { get; set; }
    
        /// <summary>the issuer of the credit card</summary>
        [Newtonsoft.Json.JsonProperty("cc_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RefundCc_type? Cc_type { get; set; }
    
        /// <summary>the unique identifier for the trading day when the original payment occurred</summary>
        [Newtonsoft.Json.JsonProperty("trading_day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Trading_day { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Refund FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Refund>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CashierPayments 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CashierPayment> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CashierPayments FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashierPayments>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CashierPayment 
    {
        /// <summary>the unique identifier for the cashier payment</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the timestamp on which the cashier payment was created</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }
    
        /// <summary>the unique identifier for the trading day when the cashier payment occurred</summary>
        [Newtonsoft.Json.JsonProperty("trading_day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Trading_day { get; set; }
    
        /// <summary>the type of cashier payment inflows are "pay in" or outflows are "pay out"</summary>
        [Newtonsoft.Json.JsonProperty("pipo_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CashierPaymentPipo_type? Pipo_type { get; set; }
    
        /// <summary>the description of the cashier payment, can be any text string</summary>
        [Newtonsoft.Json.JsonProperty("memo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Memo { get; set; }
    
        /// <summary>the amount of the cashier payment as a monetary value</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        /// <summary>the unique identifier for the employee that authorized the cashier payment</summary>
        [Newtonsoft.Json.JsonProperty("authorized_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Authorized_id { get; set; }
    
        /// <summary>the name of the employee that authorized the cashier payment</summary>
        [Newtonsoft.Json.JsonProperty("authorizer_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Authorizer_name { get; set; }
    
        /// <summary>the unique identifier for the employee that performed the cashier payment and is responsible for the amount</summary>
        [Newtonsoft.Json.JsonProperty("receipt_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt_id { get; set; }
    
        /// <summary>the name of the employee that performed the cashier payment and is responsible for the amount</summary>
        [Newtonsoft.Json.JsonProperty("recipient_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recipient_name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CashierPayment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CashierPayment>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Employees 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Employee> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Employees FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Employees>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Employee 
    {
        /// <summary>the unique identifier of the employee</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }
    
        /// <summary>the employee’s email address; will be empty if not provided</summary>
        [Newtonsoft.Json.JsonProperty("email_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email_address { get; set; }
    
        /// <summary>the human given identifier given to the employee to match an ID in an external system; will be empty if not provided</summary>
        [Newtonsoft.Json.JsonProperty("employee_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Employee_identifier { get; set; }
    
        /// <summary>the employee's pin</summary>
        [Newtonsoft.Json.JsonProperty("pincode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pincode { get; set; }
    
        /// <summary>the employee status; will be either "active" if the employee is a valid user, "leave" if the employee is on a temporary hiatus, and "terminated" if the employee is permanently gone</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmployeeStatus? Status { get; set; }
    
        /// <summary>a list of roles attached to the employee; each role can be selected for use on a single timesheet</summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmployeeRole> Roles { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Employee FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Employee>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EmployeeRole 
    {
        /// <summary>the specific job that the employee works</summary>
        [Newtonsoft.Json.JsonProperty("role_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role_name { get; set; }
    
        /// <summary>the base pay rate for hours worked in that role</summary>
        [Newtonsoft.Json.JsonProperty("pay_rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pay_rate { get; set; }
    
        /// <summary>the default zone that the role is assigned to work in</summary>
        [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zone { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EmployeeRole FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmployeeRole>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Timesheets 
    {
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Timesheet> Objects { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Timesheets FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Timesheets>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Timesheet 
    {
        /// <summary>the unique identifier of the time sheet</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>the unique identifier of the employee</summary>
        [Newtonsoft.Json.JsonProperty("employee_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Employee_id { get; set; }
    
        /// <summary>the employee's name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>the human­-readable role of the employee</summary>
        [Newtonsoft.Json.JsonProperty("role_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role_name { get; set; }
    
        /// <summary>the unique identifier of the zone assigned to the user</summary>
        [Newtonsoft.Json.JsonProperty("zone_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zone_id { get; set; }
    
        /// <summary>the unique identifier for the trading day for which this timesheet was recorded</summary>
        [Newtonsoft.Json.JsonProperty("trading_day_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trading_day_id { get; set; }
    
        /// <summary>the trading day date on which this timesheet was created</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }
    
        /// <summary>the time the employee clocked in. Will be "null" if this time sheet represents non­clocked in activity</summary>
        [Newtonsoft.Json.JsonProperty("start_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Start_time { get; set; }
    
        /// <summary>the time the employee clocked out. Will be "null" if this time sheet represents non­clocked in activity</summary>
        [Newtonsoft.Json.JsonProperty("end_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End_time { get; set; }
    
        /// <summary>the number of regular hours worked, net of any unpaid break hours. Will be "null" if this time sheet represents non­clocked in activity</summary>
        [Newtonsoft.Json.JsonProperty("regular_hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Regular_hours { get; set; }
    
        /// <summary>the number of hours on unpaid break. Will be "null" if this time sheet represents non­clocked in activity or if breaks are not enabled</summary>
        [Newtonsoft.Json.JsonProperty("break_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Break_time { get; set; }
    
        /// <summary>the number of overtime hours worked with 1.5x pay_rate multiplier. Will be "null" if this time sheet represents non­clocked in activity or if rule is not enabled</summary>
        [Newtonsoft.Json.JsonProperty("1.5x_hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _15x_hours { get; set; }
    
        /// <summary>the number of overtime hours worked with 2.0x pay_rate multiplier. Will be "null" if this time sheet represents non­clocked in activity or if rule is not enabled</summary>
        [Newtonsoft.Json.JsonProperty("2x_hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _2x_hours { get; set; }
    
        /// <summary>the amount in wages to add to the shift based on the Spread of Hours overtime rule. Will be "null" if this time sheet represents non­clocked in activity or if rule is not enabled</summary>
        [Newtonsoft.Json.JsonProperty("bonus_hour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bonus_hour { get; set; }
    
        /// <summary>the employee's pay rate as of when this time sheet was recorded</summary>
        [Newtonsoft.Json.JsonProperty("pay_rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pay_rate { get; set; }
    
        /// <summary>the total wages earned for this time sheet. Will be "null" if this timesheet represents non­clocked in activity.</summary>
        [Newtonsoft.Json.JsonProperty("wages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wages { get; set; }
    
        /// <summary>the amount of tips earned in cash during this time sheet</summary>
        [Newtonsoft.Json.JsonProperty("cash_tips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cash_tips { get; set; }
    
        /// <summary>the amount of tips earned by credit card</summary>
        [Newtonsoft.Json.JsonProperty("cc_tips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cc_tips { get; set; }
    
        /// <summary>the amount of tips earned by other tender tsypes. There can be multiple values that are customizable by the restaurant management</summary>
        [Newtonsoft.Json.JsonProperty("other_tender_tips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Other_tender_tips { get; set; }
    
        /// <summary>the total amount of tips earned less any credit card withholdings</summary>
        [Newtonsoft.Json.JsonProperty("total_tips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Total_tips { get; set; }
    
        /// <summary>the amount of tips the employee declared upon clocking out</summary>
        [Newtonsoft.Json.JsonProperty("declared_tips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Declared_tips { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Timesheet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Timesheet>(data);
        }
    
    }
    
    /// <summary>estrict items to those with a specific status</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status
    {
        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"archive")]
        Archive = 1,
    
    }
    
    /// <summary>restrict modifiers to those with a specific status</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"archive")]
        Archive = 1,
    
    }
    
    /// <summary>restrict checks to those with a specific status. Must be either "open" to see checks which are still in progress (i.e., the party is still eating), "closed" to see checks which are complete, or "autoclosed" to see checks that still open past the close of the trading day</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"autoclosed")]
        Autoclosed = 2,
    
    }
    
    /// <summary>restrict checks to those which have a payment using the given credit card. Must be one of: "mastercard", "visa", "discover" or "amex"</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Cc_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"mastercard")]
        Mastercard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"visa")]
        Visa = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"discover")]
        Discover = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"amex")]
        Amex = 3,
    
    }
    
    /// <summary>restrict payments to those which have a payment using the given credit card. Must be one of: "mastercard", "visa", "discover" or "amex"</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Cc_type2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"mastercard")]
        Mastercard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"visa")]
        Visa = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"discover")]
        Discover = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"amex")]
        Amex = 3,
    
    }
    
    /// <summary>restrict refunds to those which have a payment using the given credit card. Must be one of: "mastercard", "visa", "discover" or "amex"</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Cc_type3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"mastercard")]
        Mastercard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"visa")]
        Visa = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"discover")]
        Discover = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"amex")]
        Amex = 3,
    
    }
    
    /// <summary>restrict cashier payments to those that are inflows with "pay_in" or outflows with "pay_outs"</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Pipo_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"pay_in")]
        Pay_in = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pay_outs")]
        Pay_outs = 1,
    
    }
    
    /// <summary>the specific employee status</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"leave")]
        Leave = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"terminated")]
        Terminated = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ZoneStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TradingDayStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"null")]
        Null = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CheckStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AutoClosed")]
        AutoClosed = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CheckType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Table")]
        Table = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tab")]
        Tab = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delivery")]
        Delivery = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ToGo")]
        ToGo = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CheckType_id
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"2")]
        _2 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"3")]
        _3 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"4")]
        _4 = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CheckTaxed_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"inclusive")]
        Inclusive = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"exclusive")]
        Exclusive = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>the amount pf the payment as a monetary value</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        /// <summary>the amount added as a tip (for credit cards) as a monetary value</summary>
        [Newtonsoft.Json.JsonProperty("tip_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tip_amount { get; set; }
    
        /// <summary>the amount included in the base payment amount as an autogratuity. Note: this is not added, but rather included in the base payment</summary>
        [Newtonsoft.Json.JsonProperty("autograt_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Autograt_amount { get; set; }
    
        /// <summary>the timestamp on which the payment was added to the check</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }
    
        /// <summary>the name of the employee who added the payment</summary>
        [Newtonsoft.Json.JsonProperty("employee_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Employee_name { get; set; }
    
        /// <summary>the human­-readable role of the employee</summary>
        [Newtonsoft.Json.JsonProperty("employee_role_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Employee_role_name { get; set; }
    
        /// <summary>the unique identifier of the employee who added the payment</summary>
        [Newtonsoft.Json.JsonProperty("employee_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Employee_id { get; set; }
    
        /// <summary>the human­-readable name of the tender type</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>a user­defined description of the tender given(optional)</summary>
        [Newtonsoft.Json.JsonProperty("tender_description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tender_description { get; set; }
    
        /// <summary>the name of the owner of the card. Present if tender type is "Credit"</summary>
        [Newtonsoft.Json.JsonProperty("cc_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cc_name { get; set; }
    
        /// <summary>the issuer of the credit card</summary>
        [Newtonsoft.Json.JsonProperty("cc_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Cc_type4? Cc_type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Anonymous FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Voidcomp 
    {
        /// <summary>a human­-readable reason for the void or comp</summary>
        [Newtonsoft.Json.JsonProperty("reason_text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason_text { get; set; }
    
        /// <summary>the kind of void/comp. "void" and "comp" indicate which one it was, and "value" and "percent" indicate either a dollar amount by which the check was reduced, or the percentage of the price dismissed</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VoidcompType? Type { get; set; }
    
        /// <summary>the dollar amount discounted if the type is "amount" or the percent discounted if the type is "percent"</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Voidcomp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Voidcomp>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Voidcomp2 
    {
        /// <summary>a human­-readable reason why the item was not charged</summary>
        [Newtonsoft.Json.JsonProperty("reason_text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason_text { get; set; }
    
        /// <summary>the human­-readable name of this modifier</summary>
        [Newtonsoft.Json.JsonProperty("authorized_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Authorized_id { get; set; }
    
        /// <summary>the human­-readable role of the authorizing employee</summary>
        [Newtonsoft.Json.JsonProperty("authorizer_role_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Authorizer_role_name { get; set; }
    
        /// <summary>denotes the percentage comped for percentage based comps, or the dollar amount comped for value based comps</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        /// <summary>the total amount of "void or comp" (in cents)</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Total { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Voidcomp2Type? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Voidcomp2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Voidcomp2>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Voidcomp3 
    {
        /// <summary>a human­-readable reason why the side was not charged</summary>
        [Newtonsoft.Json.JsonProperty("reason_text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason_text { get; set; }
    
        /// <summary>the unique identifier of the authorized</summary>
        [Newtonsoft.Json.JsonProperty("authorized_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Authorized_id { get; set; }
    
        /// <summary>the human­-readable role of the authorizing employee</summary>
        [Newtonsoft.Json.JsonProperty("authorizer_role_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Authorizer_role_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Voidcomp3Type? Type { get; set; }
    
        /// <summary>the dollar amount discounted if the type is "amount" or the percent discounted if the type is "percent"</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Voidcomp3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Voidcomp3>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentAuthCc_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Mastercard")]
        Mastercard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Visa")]
        Visa = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Discover")]
        Discover = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Amex")]
        Amex = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RefundCc_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Mastercard")]
        Mastercard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Visa")]
        Visa = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Discover")]
        Discover = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Amex")]
        Amex = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CashierPaymentPipo_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"pay in")]
        Pay_in = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pay out")]
        Pay_out = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EmployeeStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"leave")]
        Leave = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"terminated")]
        Terminated = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Cc_type4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Mastercard")]
        Mastercard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Visa")]
        Visa = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Discover")]
        Discover = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"American Express")]
        American_Express = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum VoidcompType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"comp value")]
        Comp_value = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"comp percent")]
        Comp_percent = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"void value")]
        Void_value = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"void percent")]
        Void_percent = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Voidcomp2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"void")]
        Void = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"comp_full")]
        Comp_full = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"comp_percent")]
        Comp_percent = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"comp_value")]
        Comp_value = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Voidcomp3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"void")]
        Void = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"comp full")]
        Comp_full = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"comp percent")]
        Comp_percent = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"comp value")]
        Comp_value = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.27.0 (Newtonsoft.Json v11.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.18.0 (NJsonSchema v9.13.27.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.18.0 (NJsonSchema v9.13.27.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}