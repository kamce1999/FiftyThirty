<?xml version="1.0"?>
<doc>
    <assembly>
        <name>smartsheet-csharp-sdk</name>
    </assembly>
    <members>
        <member name="T:Smartsheet.Api.AccessTokenExpiredException">
            <summary>
            <para>This is the exception to indicate that an access token expired error returned from Smartsheet REST API. This 
            exception will be thrown when the Smartsheet REST API generates a "1003 Your Access Token has expired" error.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.AccessTokenExpiredException.#ctor(Smartsheet.Api.Models.Error)">
            <summary>
            Instantiates a new access token expired exception.
            </summary>
            <param name="error"> the error </param>
        </member>
        <member name="T:Smartsheet.Api.AttachmentVersioningResources">
            <summary>
            <para>This interface provides methods to access Versioning resources that are associated to an Attachment resource.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.AttachmentVersioningResources.AttachNewVersion(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            <para>Uploads a new version of a file to a Sheet or Row.
            This operation can be performed using a simple upload or a multipart upload. For more information, see Posting an Attachment.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
             POST /sheets/{sheetId}/attachments/{attachmentId}/versions</para>
             <remarks><para>Uploading new versions is not supported for attachments on Comments or for URL attachments.</para>
             <para>This is a resource-intensive operation and incurs 10 additional requests against the rate limit.</para></remarks>
            </summary>
            <param name="sheetId"> the sheet id </param>
            <param name="attachmentId"> the attachment id </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type, can be null </param>
            <returns> Attachment object for the newly created attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.AttachmentVersioningResources.DeleteAllVersions(System.Int64,System.Int64)">
            <summary>
            <para>Deletes all versions of the attachment corresponding to the specified Attachment ID.
            For attachments with multiple versions, this will effectively delete the attachment from the object that it’s attached to.</para>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/attachments/{attachmentId}/versions</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="attachmentId"> the attachment id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.AttachmentVersioningResources.ListVersions(System.Int64,System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all versions of the given Attachment ID, in order from newest to oldest.</para>
            <remarks><para>This operation supports pagination of results. For more information, see Paging.</para>
            <para>to retrieve a download URL for a file attachment, use the Get Attachment operation for the specific version you want to download.</para></remarks>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/attachments/{attachmentId}/versions</para>
            </summary>
            <param name="sheetId"> the sheet id </param>
            <param name="attachmentId"> the attachment id </param>
            <param name="paging">the pagination</param>
            <returns>  list of all versions of the given Attachment ID. </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.AuthorizationException">
            <summary>
            <para>This is the exception to indicate authorization (access token) related errors returned from Smartsheet REST API.</para>
            
            <para>Basically this exception will be thrown when the Smartsheet REST API responds with "401 NOT AUTHORIZED" /
            "403 FORBIDDEN"</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.AuthorizationException.#ctor(Smartsheet.Api.Models.Error)">
            <summary>
            Constructor.
            </summary>
            <param name="error"> the Error object from Smartsheet REST API </param>
        </member>
        <member name="T:Smartsheet.Api.CommentAttachmentResources">
            <summary>
            <para>This interface provides methods to access Attachment resources that are associated to Comment resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.CommentAttachmentResources.AttachFile(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            <para>Attaches a file to the Comment.</para>
            <para>This operation will always create a new attachment.
            to upload a new version of the same attachment, use the Attach New Version operation.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST /sheets/{sheetId}/comments/{commentId}/attachments</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="commentId"> the comment Id </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type, can be null </param>
            <returns> the newly created Attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.CommentAttachmentResources.AttachUrl(System.Int64,System.Int64,Smartsheet.Api.Models.Attachment)">
            <summary>
            <para>Attaches a URL to the Comment.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST /sheets/{sheetId}/comments/{commentId}/attachments</para>
            <remarks><para>attachmentSubType is valid only for GOOGLE_DRIVE attachments which are Google Docs.
            It can optionally be included to indicate the type of a file.
            The following attachmentSubTypes are valid for GOOGLE_DRIVE attachments "DOCUMENT", "SPREADSHEET", "PRESENTATION", "PDF", "DRAWING".</para>
            <para>When the attachment type is BOX_COM, DROPBOX, or GOOGLE_DRIVE (without an attachmentSubType specified),
            the mimeType will be derived by the file extension specified on the “name”.</para>
            </remarks>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="commentId"> the comment Id </param>
            <param name="attachment"> the attachment object </param>
            <returns> the newly created Attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.ContactResources">
            <summary>
            <para>This interface provides methods to access Contact resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.ContactResources.GetContact(System.String)">
            <summary>
            <para>Gets the specified Contact.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST GET /contacts/{contactId}</para>
            </summary>
            <param name="contactId"> the contactId </param>
            <returns> the Contact object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.ContactResources.ListContacts(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of the user’s Smartsheet Contacts.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST GET /contacts</para>
            </summary>
            <param name="paging"> the pagination info </param>
            <returns> The list of Contact objects </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.DiscussionAttachmentResources">
            <summary>
            <para>This interface provides methods to access Attachment resources that are associated to Discussion resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.DiscussionAttachmentResources.ListAttachments(System.Int64,System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Attachments that are in the Discussion</para>
            <para>It mirrors to the following Smartsheet REST API method: <br />
            GET /sheets/{sheetId}/discussions/{discussionId}/attachments</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="discussionId"> the discussion Id </param>
            <param name="paging"> the paging </param>
            <returns> list of all Attachments that are in the Discussion. </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.DiscussionCommentResources">
            <summary>
            <para>This interface provides methods to access Comment resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.DiscussionCommentResources.AddComment(System.Int64,System.Int64,Smartsheet.Api.Models.Comment)">
            <summary>
            <para>Adds a Comment to a Discussion.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/discussions/{discussionId}/comments</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="discussionId"> the id of the discussion </param>
            <param name="comment"> Comment object </param>
            <returns> the created comment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.DiscussionCommentResources.AddCommentWithAttachment(System.Int64,System.Int64,Smartsheet.Api.Models.Comment,System.String,System.String)">
            <summary>
            <para>Adds a Comment to a Discussion.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/discussions/{discussionId}/comments</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="discussionId"> the id of the discussion </param>
            <param name="comment"> Comment object </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type, can be left null </param>
            <returns> the created comment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.DiscussionCommentResources.UpdateComment(System.Int64,Smartsheet.Api.Models.Comment)">
            <summary>
            <para>Update the specified comment.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/comments/{commentId}</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="comment"> Comment object </param>
            <returns> the updated comment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.FavoriteResources">
            <summary>
            <para>This interface provides methods to access Favorite resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.FavoriteResources.AddFavorites(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Favorite})">
            <summary>
            <para>Adds one or more items to the user’s list of Favorite items.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /favorites</para>
            <para>If called with a single Favorite object, and that favorite already exists, error code 1129 will be returned. 
            If called with an array of Favorite objects, any objects specified in the array that are already marked as favorites 
            will be ignored and omitted from the response.</para>
            </summary>
            <param name="favorites">list of favorite objects</param>
            <returns> the created favortie objects </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.FavoriteResources.ListFavorites(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all of the user’s Favorite items.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /favorites</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <param name="paging">the pagination</param>
            <returns> A list of all Favorites (note that an empty list will be returned if there are none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.FavoriteResources.RemoveFavorites(Smartsheet.Api.Models.ObjectType,System.Collections.Generic.IList{System.Int64})">
            <summary>
            <para>Removes one or multiple objects from the user’s list of Favorite items.</para>
            <para>It mirrors to the following Smartsheet REST API methods: 
            <list type="bullet">
            <item><description>DELETE /favorites/folder</description></item>
            <item><description>DELETE /favorites/report</description></item>
            <item><description>DELETE /favorites/sheet</description></item>
            <item><description>DELETE /favorites/template</description></item>
            <item><description>DELETE /favorites/workspace</description></item>
            </list>
            </para>
            </summary>
            <param name="objectIds">(required): object IDs representing the items to remove from Favorites. If type is "template", only private sheet-type template ID is allowed.</param>
            <param name="type">the object type to remove </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.ImageUrlsResources">
            <summary>
            This interface provides methods to access image URLs.
            
            Thread Safety: Implementation of this interface must be thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.ImageUrlsResources.GetImageUrls(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.ImageUrl})">
            <summary>
            <para>Gets URLs that can be used to retrieve the specified cell images.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /imageurls</para>
            </summary>
            <param name="requestUrls"> array of requested Images and sizes </param>
            <returns> the ImageUrlMap object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.ContactResourcesImpl">
            <summary>
            This is the implementation of the ContactResources.
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.ContactResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ContactResourcesImpl.GetContact(System.String)">
            <summary>
            <para>Gets the specified Contact.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST GET /contacts/{contactId}</para>
            </summary>
            <param name="contactId">the contactId</param>
            <returns>the Contact object</returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ContactResourcesImpl.ListContacts(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of the user’s Smartsheet Contacts.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST GET /contacts</para>
            </summary>
            <param name="paging"> the pagination info </param>
            <returns> The list of Contact objects </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.ImageUrlsResourcesImpl">
            <summary>
            This interface provides methods to access image URLs.
            
            Thread Safety: Implementation of this interface must be thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.ImageUrlsResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Parameters: - Smartsheet : the SmartsheetImpl
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.ImageUrlsResourcesImpl.GetImageUrls(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.ImageUrl})">
            <summary>
            <para>Gets URLs that can be used to retrieve the specified cell images.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /imageurls</para>
            </summary>
            <param name="requestUrls"> array of requested Images and sizes </param>
            <returns> the ImageUrlMap object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.Json.JsonNetSerializer">
            <summary>
            This is the Jackson based JsonSerializer implementation.
            
            Thread Safety: This class is thread safe because it is immutable and the underlying JSON.NET is thread
            safe as long as it is not re-configured.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Json.JsonNetSerializer.serializer">
            <summary>
            Represents the ObjectMapper used to serialize/de-serialize JSON.
            
            It will be initialized in a static initializer and will not change afterwards.
            
            Because ObjectMapper is thread-safe as long as it's not reconfigured, a static final class-level ObjectMapper is
            used to achieve best performance.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Internal.Json.JsonNetSerializer.failOnUnknownProperties">
            <summary>
            Sets if the OBJECT MAPPER should ignore unknown properties or fail when de-serializing the JSON data.
            </summary>
            <param name="value">
                       true if it should fail, false otherwise. </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonNetSerializer.#ctor">
            <summary>
            Constructor.
            
            Parameters: None
            
            Exceptions: None
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonNetSerializer.serialize``1(``0,System.IO.StreamWriter)">
            <summary>
            Serialize an object to JSON.
            
            Parameters: 
              object : the object to serialize
              outputStream : the output stream to which the JSON will be written
            
            Returns: None
            
            Exceptions: - IllegalArgumentException : if any argument is null - JSONSerializationException : if there is any
            other error occurred during the operation
            </summary>
            <param name="outputStream"> </param>
            <param name="object"> </param>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonNetSerializer.deserialize``1(System.IO.StreamReader)">
            <summary>
            De-serialize an object from JSON.
            
            Returns: the de-serialized object
            
            Exceptions: 
              - IllegalArgumentException : if any argument is null 
              - JSONSerializationException : if there is any other error occurred during the operation
            </summary>
            <param name="inputStream"> the input stream from which the JSON will be read </param>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonNetSerializer.deserializeList``1(System.IO.StreamReader)">
            <summary>
            De-serialize an object list from JSON. 
            
            Returns: the de-serialized list
            
            Exceptions: 
              - IllegalArgumentException : if any argument is null 
              - JSONSerializationException : if there is any other error occurred during the operation
            </summary>
            <param name="inputStream"> the input stream from which the JSON will be read </param>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonNetSerializer.DeserializeDataWrapper``1(System.IO.StreamReader)">
            <summary>
            De-serialize to a DataWrapper (holds pagination info) from JSON
            </summary>
            <returns>DataWrapper containing data and pagination info</returns>
            <param name="inputStream"> the input stream from which the JSON will be read </param>
            <exception cref="T:System.ArgumentException"> if any argument is null </exception>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException">if there is any other error occurred during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonNetSerializer.DeserializeMap(System.IO.StreamReader)">
            <summary>
            De-serialize to a map from JSON.
            </summary>
            <param name="inputStream">
            @return </param>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonNetSerializer.deserializeResult``1(System.IO.StreamReader)">
            <summary>
            De-serialize a RequestResult&lt;T&gt; object from JSON. 
            
            Exceptions: 
              - IllegalArgumentException : if any argument is null 
              - JSONSerializationException : if there is any other error occurred during the operation
            </summary>
            <param name="inputStream"> the input stream from which the JSON will be read </param>
            <returns> the de-serialized RequestResult </returns>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonNetSerializer.deserializeListResult``1(System.IO.StreamReader)">
            <summary>
            De-serialize a RequestResult&lt;List&lt;T&gt;&gt; object from JSON.
            
            Parameters: - objectClass :  - inputStream : 
            
            Returns: the de-serialized RequestResult
            
            Exceptions: 
              - IllegalArgumentException : if any argument is null 
              - JSONSerializationException : if there is any other error occurred during the operation
            </summary>
            <param name="inputStream"> the input stream from which the JSON will be read </param>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.Json.JsonSerializer">
            <summary>
            This interface defines methods to handle JSON serialization/de-serialization.
            
            Thread Safety: Implementation of this interface must be thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonSerializer.serialize``1(``0,System.IO.StreamWriter)">
            <summary>
            Serialize an object to JSON.
            
            Parameters: - object : the object to serialize - outputStream : the output stream to which the JSON will be
            written
            
            Returns: None
            
            Exceptions: - IllegalArgumentException : if any argument is null - JSONSerializationException : if there is any
            other error occurred during the operation
            </summary>
            <param name="object"> the object </param>
            <param name="outputStream"> the output stream </param>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonSerializer.deserialize``1(System.IO.StreamReader)">
            <summary>
            De-serialize an object from JSON.
            
            Parameters: - objectClass : the class of the object to de-serialize - inputStream : the input stream from which
            the JSON will be read
            
            Returns: the de-serialized object
            
            Exceptions: - IllegalArgumentException : if any argument is null - JSONSerializationException : if there is any
            other error occurred during the operation
            </summary>
            <param name="inputStream"> the input stream </param>
            <returns> the t </returns>
            <exception cref="T:Newtonsoft.Json.JsonException"> the Json parse exception </exception>
            <exception cref="T:System.IO.IOException"> Signals that an I/O exception has occurred. </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonSerializer.deserializeList``1(System.IO.StreamReader)">
            <summary>
            De-serialize an object list from JSON.
            
            Parameters: - objectClass : the class of the object (of the list) to de-serialize - inputStream : the input
            stream from which the JSON will be read
            
            Returns: the de-serialized list
            
            Exceptions: - IllegalArgumentException : if any argument is null - JSONSerializationException : if there is any
            other error occurred during the operation
            </summary>
            <param name="inputStream"> the input stream </param>
            <returns> the list </returns>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonSerializer.DeserializeDataWrapper``1(System.IO.StreamReader)">
            <summary>
            De-serialize an object to DataWrapper from JSON.
            
            Parameters: - objectClass : the class of the object to de-serialize - inputStream : the input stream from which
            the JSON will be read
            
            Returns: the de-serialized object
            
            Exceptions: - IllegalArgumentException : if any argument is null - JSONSerializationException : if there is any
            other error occurred during the operation
            </summary>
            <param name="inputStream"> the input stream </param>
            <returns> the t </returns>
            <exception cref="T:Newtonsoft.Json.JsonException"> the Json parse exception </exception>
            <exception cref="T:System.IO.IOException"> Signals that an I/O exception has occurred. </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonSerializer.DeserializeMap(System.IO.StreamReader)">
            <summary>
            De-serialize an object list from JSON to a Map.
            </summary>
            <param name="inputStream"> the input stream </param>
            <returns> the map </returns>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonSerializer.deserializeResult``1(System.IO.StreamReader)">
            <summary>
            De-serialize a RequestResult&lt;T&gt; object from JSON.
            
            Parameters: - objectClass : the class of the object (of the RequestResult) to de-serialize - inputStream : the input
            stream from which the JSON will be read
            
            Returns: the de-serialized RequestResult
            
            Exceptions: - IllegalArgumentException : if any argument is null - JSONSerializationException : if there is any
            other error occurred during the operation
            </summary>
            <param name="inputStream"> the input stream </param>
            <returns> the RequestResult </returns>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonSerializer.deserializeListResult``1(System.IO.StreamReader)">
            <summary>
            De-serialize a RequestResult&lt;List&lt;T&gt;&gt; object from JSON.
            
            Parameters: - objectClass : the class of the object (of the RequestResult) to de-serialize - inputStream : the input
            stream from which the JSON will be read
            
            Returns: the de-serialized RequestResult
            
            Exceptions: - IllegalArgumentException : if any argument is null - JSONSerializationException : if there is any
            other error occurred during the operation
            </summary>
            <param name="inputStream"> the input stream </param>
            <returns> the RequestResult </returns>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Json.JsonSerializer.DeserializeRowResult(System.IO.StreamReader)">
            <summary>
            De-serialize a CopyOrMoveRowResult object from JSON.
            
            Parameters: - objectClass : the class of the object to de-serialize - inputStream : the input
            stream from which the JSON will be read
            
            Returns: the de-serialized CopyOrMoveRowResult
            
            Exceptions: - IllegalArgumentException : if any argument is null - JSONSerializationException : if there is any
            other error occurred during the operation
            </summary>
            <param name="inputStream"> the input stream </param>
            <returns> the CopyOrMoveRowResult </returns>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.PassthroughResourcesImpl.GetRequest(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            <para>Issue an HTTP GET request</para>
            </summary>
            <param name="endpoint"> the API endpoint </param>
            <param name="parameters"> optional list of resource parameters </param>
            <returns> a JSON response string </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.PassthroughResourcesImpl.PostRequest(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            <para>Issue an HTTP POST request</para>
            </summary>
            <param name="endpoint"> the API endpoint </param>
            <param name="payload"> a JSON payload string </param>
            <param name="parameters"> optional list of resource parameters </param>
            <returns> a JSON response string </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.PassthroughResourcesImpl.PutRequest(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            <para>Issue an HTTP PUT request</para>
            </summary>
            <param name="endpoint"> the API endpoint </param>
            <param name="payload"> a JSON payload string </param>
            <param name="parameters"> optional list of resource parameters </param>
            <returns> a JSON response string </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.PassthroughResourcesImpl.DeleteRequest(System.String)">
            <summary>
            <para>Issue an HTTP DELETE request</para>
            </summary>
            <param name="endpoint"> the API endpoint </param>
            <returns> a JSON response string </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetAutomationRuleResourcesImpl.ListAutomationRules(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets all automation rules for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/automationrules</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="paging"> the pagination parameters </param>
            <returns> a list of automation rules </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetAutomationRuleResourcesImpl.GetAutomationRule(System.Int64,System.Int64)">
            <summary>
            <para>Gets an automation rule for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/automationrules/{automationRuleId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="automationRuleId"> the automation rule Id </param>
            <returns> the automation rule </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetAutomationRuleResourcesImpl.UpdateAutomationRule(System.Int64,Smartsheet.Api.Models.AutomationRule)">
            <summary>
            <para>Updates an automation rule for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/automationrules/{automationRuleId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="automationRule"> the automation rule </param>
            <returns> the automation rule </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetAutomationRuleResourcesImpl.DeleteAutomationRule(System.Int64,System.Int64)">
            <summary>
            <para>Deletes an automation rule for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/automationrules/{automationRuleId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="automationRuleId"> the automation rule Id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetCrossSheetReferencesResourcesImpl.ListCrossSheetReferences(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets all cross-sheet references for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/crosssheetreferences</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="paging"> the pagination parameters </param>
            <returns> a list of cross sheet references </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetCrossSheetReferencesResourcesImpl.GetCrossSheetReference(System.Int64,System.Int64)">
            <summary>
            <para>Gets a cross-sheet reference for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: 
            GET /sheets/{sheetId}/crosssheetreferences/{crosssheetreferenceId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="crossSheetReferenceId"> the cross-sheet reference Id </param>
            <returns> the cross-sheet reference </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetCrossSheetReferencesResourcesImpl.CreateCrossSheetReference(System.Int64,Smartsheet.Api.Models.CrossSheetReference)">
            <summary>
            <para>Creates a cross-sheet reference in the given sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/crosssheetreferences</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="crossSheetReference"> the cross-sheet reference </param>
            <returns> the cross-sheet reference </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetFilterResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetFilterResourcesImpl.ListFilters(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets the list of all sheet filters.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/filters</para>
            </summary>
            <param name="sheetId">the sheet Id</param>
            <param name="paging">the pagination</param>
            <returns> A list of all sheets filters (note that an empty list will be returned if there are none) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetFilterResourcesImpl.GetFilter(System.Int64,System.Int64)">
            <summary>
            <para>Gets a filter.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/filters/{filterId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="filterId"> the filter Id </param>
            <returns> the sheet filter (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetFilterResourcesImpl.DeleteFilter(System.Int64,System.Int64)">
            <summary>
            <para>Deletes a filter.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/filters/{filterId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="filterId"> the filter Id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetUpdateRequestResourcesImpl.ListUpdateRequests(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Update Requests that have future schedules associated with the specified Sheet.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/updaterequests</para>
            </summary>
            <returns> A list of all UpdateRequests (note that an empty list will be returned if there are none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetUpdateRequestResourcesImpl.GetUpdateRequest(System.Int64,System.Int64)">
            <summary>
            <para>Gets the specified Update Request for the Sheet that has a future schedule.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/updaterequests/{updateRequestId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="updateRequestId"> the update request Id </param>
            <returns> the update request resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetUpdateRequestResourcesImpl.CreateUpdateRequest(System.Int64,Smartsheet.Api.Models.UpdateRequest)">
            <summary>
            <para>Creates an Update Request for the specified Row(s) within the Sheet. An email notification
            (containing a link to the update request) will be asynchronously sent to the specified recipient(s).</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/updaterequests</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="updateRequest"></param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetUpdateRequestResourcesImpl.DeleteUpdateRequest(System.Int64,System.Int64)">
            <summary>
            <para>Terminates the future scheduled delivery of the Update Request specified in the URL.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/updaterequests/{updateRequestId}</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="updateRequestId"> the updateRequestId </param>,
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetUpdateRequestResourcesImpl.UpdateUpdateRequest(System.Int64,Smartsheet.Api.Models.UpdateRequest)">
            <summary>
            <para>Changes the specified Update Request for the Sheet.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/updaterequests/{updateRequestId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="updateRequest"> the UpdateRequest to update</param>
            <returns> the updated updateRequest </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetUpdateRequestResourcesImpl.ListSentUpdateRequests(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Sent Update Requests that have future schedules associated with the specified Sheet.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/sentupdaterequests</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="paging">paging parameters for the list</param>
            <returns> A list of all SentUpdateRequests (note that an empty list will be returned if there are none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetUpdateRequestResourcesImpl.GetSentUpdateRequest(System.Int64,System.Int64)">
            <summary>
            <para>Gets the specified sent update request on the Sheet.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/sentupdaterequests/{updateRequestId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="sentUpdateRequestId"> the sent update request Id </param>
            <returns> the sent update request resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetUpdateRequestResourcesImpl.DeleteSentUpdateRequest(System.Int64,System.Int64)">
            <summary>
            <para>Deletes the specified sent update request.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/sentupdaterequests/{sentUpdateRequestId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="sentUpdateRequestId"> the sent update request Id </param>,
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="F:Smartsheet.Api.Internal.SightResourcesImpl.shares">
            <summary>
            Represents the ShareResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.SightResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.SightResourcesImpl.ListSights(Smartsheet.Api.Models.PaginationParameters,System.Nullable{System.DateTime})">
            <summary>
            <para>Gets the list of all Sights that the user has access to.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sights</para>
            </summary>
            <returns>IndexResult object containing an array of Sight objects limited to the following attributes:
                   id, name, accessLevel, permalink, createdAt, modifiedAt 
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SightResourcesImpl.GetSight(System.Int64)">
            <summary>
            <para>Gets a specified Sight.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sights/{sightId}</para>
            </summary>
            <param name="sightId"> the Id of the Sight </param>
            <returns> the Sight resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SightResourcesImpl.GetSight(System.Int64,System.Nullable{System.Int32})">
            <summary>
            <para>Gets a specified Sight.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sights/{sightId}</para>
            </summary>
            <param name="sightId"> the Id of the Sight </param>
            <param name="level"> compatibility level </param>
            <returns> the Sight resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SightResourcesImpl.UpdateSight(Smartsheet.Api.Models.Sight)">
            <summary>
            <para>Updates (renames) the specified Sight.</para>
            <para>The request body is limited to the name attribute.</para>
            <para>Mirrors to the following Smartsheet REST API method: PUT /sights/{sightId}</para>
            </summary>
            <param name="sight"> the Sight to update </param>
            <returns> the updated Sight </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SightResourcesImpl.DeleteSight(System.Int64)">
            <summary>
            <para>Deletes a Sight.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: DELETE /sights/{sightId}</para>
            </summary>
            <param name="sightId"> the Sight Id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SightResourcesImpl.CopySight(System.Int64,Smartsheet.Api.Models.ContainerDestination)">
            <summary>
            <para>Creates a copy of the specified Sight.</para>
            <para>Mirrors to the following Smartsheet REST API method:<br />
            POST /sights/{sightId}/copy</para>
            </summary>
            <param name="sightId"> the Sight Id </param>
            <param name="destination"> the destination to copy to </param>
            <returns>Result object containing a Sight for the newly created Sight, limited to the following attributes:
                   id, name, accessLevel, permalink.</returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SightResourcesImpl.MoveSight(System.Int64,Smartsheet.Api.Models.ContainerDestination)">
            <summary>
            <para>Moves the specified Sight to a new location.</para>
            <para>Mirrors to the following Smartsheet REST API method:<br />
            POST /sights/{sightId}/move</para>
            </summary>
            <param name="sightId"> the Sight Id </param>
            <param name="destination"> the destination to copy to </param>
            <returns> the moved Sight </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SightResourcesImpl.GetPublishStatus(System.Int64)">
            <summary>
            <para>Gets the publish status of a Sight.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sights/{id}/publish</para>
            </summary>
            <param name="sightId"> the Sight Id </param>
            <returns>
            The Sight's publish status (note that if there is no such resource, this method will 
            throw ResourceNotFoundException rather than returning null).
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SightResourcesImpl.SetPublishStatus(System.Int64,Smartsheet.Api.Models.SightPublish)">
            <summary>
            <para>
            Sets the publish status of a Sight and returns the new status, including the URLs of any enabled publishing.
            </para>
            
            <para>Mirrors to the following Smartsheet REST API method: PUT /sights/{id}/publish</para>
            </summary>
            <param name="sightId"> the Sight Id </param>
            <param name="sightPublish"> the SightPublish object</param>
            <returns>
            The Sight publish status (note that if there is no such resource, this method will 
            throw ResourceNotFoundException rather than returning null).
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.Internal.SightResourcesImpl.ShareResources">
            <summary>
            Returns the ShareResources object that provides access to share resources associated with Sight resources.
            </summary>
            <returns> the ShareResources object </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.TokenResourcesImpl">
            <summary>
            This is the implementation of TokenResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.TokenResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the SmartsheetImpl </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.TokenResourcesImpl.GetAccessToken">
            <summary>
            <para> Please use OAuthFlowBuilder class to build an instance of an OAuthFlow class. </para>
            <para> Will throw exception. </para>
            <para>It mirrors to the following Smartsheet REST API method: POST /token</para>
            </summary>
            <exception cref="T:System.NotSupportedException"> This exception is always thrown since this operation is not supported by the Token Resources.
            Instead, see OAuthFlow. </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.TokenResourcesImpl.RefreshAccessToken">
            <summary>
            <para> Please use OAuthFlowBuilder class to build an instance of an OAuthFlow class. </para>
            <para> Will throw exception. </para>
            <para>It mirrors to the following Smartsheet REST API method: POST /token</para>
            </summary>
            <exception cref="T:System.NotSupportedException"> This exception is always thrown since this operation is not supported by the Token Resources.
            Instead, see OAuthFlow. </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.TokenResourcesImpl.RevokeAccessToken">
            <summary>
            <para>Revokes the access token used to make this request. The access token will no longer be valid, and subsequent API calls made using the token will fail.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            DELETE /token</para>
            </summary>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.TokenResourcesImpl.RevokeAccessToken(System.Nullable{System.Boolean})">
            <summary>
            <para>Revokes the access token used to make this request. The access token will no longer be valid, and subsequent API calls made using the token will fail.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            DELETE /token</para>
            </summary>
            
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WebhookResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.WebhookResourcesImpl.ListWebhooks(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets the list of all Webhooks that the user owns (if a user generated token was used to make the request)
            or the list of all Webhooks associated with the third-party app (if a third-party app made the request). Items 
            in the response are ordered by API Client name, then Webhook name, then creation date.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /webhooks</para>
            </summary>
            <returns>IndexResult object containing an array of Webhook objects</returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WebhookResourcesImpl.GetWebhook(System.Int64)">
            <summary>
            <para>Gets the Webhook specified in the URL.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /webhook/{webhookId}</para>
            </summary>
            <param name="webhookId"> the Id of the webhook </param>
            <returns> the webhook resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WebhookResourcesImpl.CreateWebhook(Smartsheet.Api.Models.Webhook)">
            <summary>
            <para>Creates a new Webhook.</para>
            <para>The request body is limited to name(required), callbackUrl (required), scope (required)
            scopeObjectId (required), events(required), version(required)</para>
            <para>It mirrors to the following Smartsheet REST API method:POST /webhooks</para>
            </summary>
            <param name="webhook"> the webhook to be created </param>
            <returns> the created webhook </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WebhookResourcesImpl.UpdateWebhook(Smartsheet.Api.Models.Webhook)">
            <summary>
            <para>Updates the Webhook specified in the URL.</para>
            <para>The request body is limited to the name, events, callbackUrl, enabled and version attributes.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /webhooks/{webhookId}</para>
            </summary>
            <param name="webhook"> the webhook to update </param>
            <returns> the updated webhook </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WebhookResourcesImpl.DeleteWebhook(System.Int64)">
            <summary>
            <para>Delete a webhook.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: DELETE /webhooks/{webhookId}</para>
            </summary>
            <param name="webhookId"> the sightId </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WebhookResourcesImpl.ResetSharedSecret(System.Int64)">
            <summary>
            <para>Resets the shared secret for the specified Webhook. For more information about how a shared secret is used, see Authenticating Callbacks.</para>
            <para>The request body should be empty</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /webhooks/{webhookId}/resetsharedsecret</para>
            </summary>
            <param name="webhookId"> the sightId </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.AbstractAssociatedResources">
            <summary>
            This is the base class of the Smartsheet REST API resources that are associated to other resources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.AbstractAssociatedResources.masterResourceType">
            <summary>
            Represents the master resource Type (e.g. "sheet", "workspace").
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractAssociatedResources.#ctor(Smartsheet.Api.Internal.SmartsheetImpl,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <param name="masterResourceType"> the master resource Type </param>
        </member>
        <member name="P:Smartsheet.Api.Internal.AbstractAssociatedResources.MasterResourceType">
            <summary>
            Getter of corresponding field.
            </summary>
            <returns> the master resource Type </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.AbstractResources">
            <summary>
            This is the base class of the SmartsheetClient REST API resources.
            
            Thread Safety: This class is thread safe because it is immutable and the underlying SmartsheetImpl is thread safe.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Internal.AbstractResources.ErrorCode">
            <summary>
            Error code class for mapping specific error codes to Exceptions
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.AbstractResources.ErrorCode.BAD_REQUEST">
            <summary>
            The bad request
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.AbstractResources.ErrorCode.NOT_AUTHORIZED">
            <summary>
            The not authorized
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.AbstractResources.ErrorCode.FORBIDDEN">
            <summary>
            The forbidden
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.AbstractResources.ErrorCode.NOT_FOUND">
            <summary>
            The not found
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.AbstractResources.ErrorCode.METHOD_NOT_SUPPORTED">
            <summary>
            The method not supported
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.AbstractResources.ErrorCode.INTERNAL_SERVER_ERROR">
            <summary>
            The internal server error
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.AbstractResources.ErrorCode.SERVICE_UNAVAILABLE">
            <summary>
            The service unavailable
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Internal.AbstractResources.ErrorCode.Values">
            <summary>
            Gets an IEnumerable to iterate through the error codes.
            </summary>
            <value>
            The IEnumerable to iterate through the error codes
            </value>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.ErrorCode.getErrorCode(System.Net.HttpStatusCode)">
            <summary>
            Gets the error code.
            </summary>
            <param name="errorNumber"> the error number </param>
            <returns> the error code </returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.ErrorCode.getException">
            <summary>
            Gets the exception.
            </summary>
            <returns> the exception </returns>
            <exception cref="T:System.MemberAccessException"> the instantiation exception </exception>
            <exception cre="IllegalAccessException"> the illegal access exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.ErrorCode.getException(Smartsheet.Api.Models.Error)">
            <summary>
            Gets the exception.
            </summary>
            <param name="error"> the error </param>
            <returns> the exception </returns>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the SmartsheetClient exception </exception>
        </member>
        <member name="F:Smartsheet.Api.Internal.AbstractResources.smartsheet">
            <summary>
            Represents the SmartsheetImpl.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the SmartsheetClient </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.GetResource``1(System.String,System.Type)">
            <summary>
            Get a resource from SmartsheetClient REST API.
            
            Parameters: - path : the relative path of the resource - objectClass : the resource object class
            
            Returns: the resource (note that if there is no such resource, this method will throw ResourceNotFoundException
            rather than returning null).
            
            Exceptions: -
              InvalidRequestException : if there is any problem with the REST API request
              AuthorizationException : if there is any problem with the REST API authorization (access token)
              ResourceNotFoundException : if the resource cannot be found
              ServiceUnavailableException : if the REST API service is not available (possibly due to rate limiting)
              SmartsheetRestException : if any other REST API related error occurred during the operation
              SmartsheetException : if any other error occurred during the operation
            </summary>
            <param name="path"> the relative path of the resource. </param>
            <param name="objectClass"> the object class </param>
            <returns> the resource </returns>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the SmartsheetClient exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.CreateResource``2(System.String,``1)">
            <summary>
            Create a resource using SmartsheetClient REST API.
            
            Exceptions: 
              IllegalArgumentException : if any argument is null, or path is an empty string
              InvalidRequestException : if there is any problem with the REST API request
              AuthorizationException : if there is any problem with the REST API authorization (access token)
              ServiceUnavailableException : if the REST API service is not available (possibly due to rate limiting)
              SmartsheetRestException : if any other REST API related error occurred during the operation
              SmartsheetException : if any other error occurred during the operation
            </summary>
            <param name="path"> the relative path of the resource collections </param>
            <param name="object"> the object to create </param>
            <returns> the created resource </returns>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the SmartsheetClient exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.CreateResource``1(System.String,System.Type,``0)">
            <summary>
            Create a resource using SmartsheetClient REST API.
            
            Exceptions: 
              IllegalArgumentException : if any argument is null, or path is an empty string
              InvalidRequestException : if there is any problem with the REST API request
              AuthorizationException : if there is any problem with the REST API authorization (access token)
              ServiceUnavailableException : if the REST API service is not available (possibly due to rate limiting)
              SmartsheetRestException : if any other REST API related error occurred during the operation
              SmartsheetException : if any other error occurred during the operation
            </summary>
            <param name="path"> the relative path of the resource collections </param>
            <param name="objectClass"> the resource object class </param>
            <param name="object"> the object to create </param>
            <returns> the created resource </returns>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the SmartsheetClient exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.CreateResourceWithAttachment``1(System.String,``0,System.String,System.String,System.String)">
            <summary>
            Create a resource with an attachment.
            </summary>
            <param name="path"> the relative path of the resource collections </param>
            <param name="object">the object to create </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type, can be null </param>
            <param name="objectType"> the object type to return as </param>
            <returns> the created resource </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null, or path is an empty string </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.UpdateResource``1(System.String,System.Type,``0)">
            <summary>
            Update a resource using SmartsheetClient REST API.
            
            Exceptions:
              IllegalArgumentException : if any argument is null, or path is an empty string
              InvalidRequestException : if there is any problem with the REST API request
              AuthorizationException : if there is any problem with the REST API authorization (access token)
              ResourceNotFoundException : if the resource cannot be found
              ServiceUnavailableException : if the REST API service is not available (possibly due to rate limiting)
              SmartsheetRestException : if any other REST API related error occurred during the operation
              SmartsheetException : if any other error occurred during the operation
            </summary>
            <param name="path"> the relative path of the resource </param>
            <param name="objectClass"> the resource object class </param>
            <param name="object"> the object to create </param>
            <returns> the updated resource </returns>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the SmartsheetClient exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.ListResourcesWithWrapper``1(System.String)">
            <summary>
            List resources using SmartsheetClient REST API.
            
            Exceptions:
              IllegalArgumentException : if any argument is null, or path is an empty string
              InvalidRequestException : if there is any problem with the REST API request
              AuthorizationException : if there is any problem with the REST API authorization (access token)
              ServiceUnavailableException : if the REST API service is not available (possibly due to rate limiting)
              SmartsheetRestException : if any other REST API related error occurred during the operation
              SmartsheetException : if any other error occurred during the operation
            </summary>
            <param name="path"> the relative path of the resource collections </param>
            <returns> the resources </returns>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if an error occurred during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.ListResources``1(System.String,System.Type)">
            <summary>
            List resources using SmartsheetClient REST API.
            
            Exceptions:
              IllegalArgumentException : if any argument is null, or path is an empty string
              InvalidRequestException : if there is any problem with the REST API request
              AuthorizationException : if there is any problem with the REST API authorization (access token)
              ServiceUnavailableException : if the REST API service is not available (possibly due to rate limiting)
              SmartsheetRestException : if any other REST API related error occurred during the operation
              SmartsheetException : if any other error occurred during the operation
            </summary>
            <param name="path"> the relative path of the resource collections </param>
            <param name="objectClass"> the resource object class </param>
            <returns> the resources </returns>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if an error occurred during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.DeleteResource``1(System.String)">
            <summary>
            Delete a resource from SmartsheetClient REST API.
            
            Exceptions:
              IllegalArgumentException : if any argument is null, or path is an empty string
              InvalidRequestException : if there is any problem with the REST API request
              AuthorizationException : if there is any problem with the REST API authorization (access token)
              ResourceNotFoundException : if the resource cannot be found
              ServiceUnavailableException : if the REST API service is not available (possibly due to rate limiting)
              SmartsheetRestException : if any other REST API related error occurred during the operation
              SmartsheetException : if any other error occurred during the operation
            </summary>
            <param name="path"> the relative path of the resource </param>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the SmartsheetClient exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.DeleteResource``1(System.String,System.Type)">
            <summary>
            Delete a resource from SmartsheetClient REST API.
            
            Exceptions:
              IllegalArgumentException : if any argument is null, or path is an empty string
              InvalidRequestException : if there is any problem with the REST API request
              AuthorizationException : if there is any problem with the REST API authorization (access token)
              ResourceNotFoundException : if the resource cannot be found
              ServiceUnavailableException : if the REST API service is not available (possibly due to rate limiting)
              SmartsheetRestException : if any other REST API related error occurred during the operation
              SmartsheetException : if any other error occurred during the operation
            </summary>
            <param name="path"> the relative path of the resource </param>
            <param name="objectClass"> the resource object class </param>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the SmartsheetClient exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.PostAndReceiveList``2(System.String,``0,System.Type)">
            <summary>
            Post an object to SmartsheetClient REST API and receive a list of objects from response.
            
            Parameters: - path : the relative path of the resource collections - objectToPost : the object to post -
            objectClassToReceive : the resource object class to receive
            
            Returns: the object list
            
            Exceptions:
              IllegalArgumentException : if any argument is null, or path is an empty string
              InvalidRequestException : if there is any problem with the REST API request
              AuthorizationException : if there is any problem with the REST API authorization (access token)
              ServiceUnavailableException : if the REST API service is not available (possibly due to rate limiting)
              SmartsheetRestException : if any other REST API related error occurred during the operation
              SmartsheetException : if any other error occurred during the operation
            </summary>
            <param name="path"> the path </param>
            <param name="objectToPost"> the object to post </param>
            <param name="objectClassToReceive"> the object class to receive </param>
            <returns> the list </returns>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the SmartsheetClient exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.PutAndReceiveList``2(System.String,``0,System.Type)">
            <summary>
            Put an object to SmartsheetClient REST API and receive a list of objects from response.
            
            Exceptions:
              IllegalArgumentException : if any argument is null, or path is an empty string
              InvalidRequestException : if there is any problem with the REST API request
              AuthorizationException : if there is any problem with the REST API authorization (access token)
              ServiceUnavailableException : if the REST API service is not available (possibly due to rate limiting)
              SmartsheetRestException : if any other REST API related error occurred during the operation
              SmartsheetException : if any other error occurred during the operation
            </summary>
            <param name="path"> the relative path of the resource collections </param>
            <param name="objectToPut"> the object to put </param>
            <param name="objectClassToReceive"> the resource object class to receive </param>
            <returns> the object list </returns>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the SmartsheetClient exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.ImportFile``1(System.String,System.String,System.String)">
            <summary>
            Post a file to an import endpoint
            
            Exceptions:
              IllegalArgumentException : if any argument is null, or path is an empty string
              InvalidRequestException : if there is any problem with the REST API request
              AuthorizationException : if there is any problem with the REST API authorization (access token)
              ServiceUnavailableException : if the REST API service is not available (possibly due to rate limiting)
              SmartsheetRestException : if any other REST API related error occurred during the operation
              SmartsheetException : if any other error occurred during the operation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">endpoint path</param>
            <param name="file">file</param>
            <param name="contentType">Content-Type of the file</param>
            <returns>the object</returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.CreateHttpRequest(System.Uri,Smartsheet.Api.Internal.Http.HttpMethod)">
            <summary>
            Create an HttpRequest.
            
            Exceptions: Any exception shall be propagated since it's a private method.
            </summary>
            <param name="uri"> the URI </param>
            <param name="method"> the HttpMethod </param>
            <returns> the HTTP request </returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.HandleError(Smartsheet.Api.Internal.Http.HttpResponse)">
            <summary>
            Handles an error HttpResponse (non-200) returned by SmartsheetClient REST API.
            
            Exceptions: 
              SmartsheetRestException : the exception corresponding to the error
            </summary>
            <param name="response"> the HttpResponse </param>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the SmartsheetClient exception </exception>
        </member>
        <member name="P:Smartsheet.Api.Internal.AbstractResources.Smartsheet">
            <summary>
            Gets the SmartsheetClient.
            </summary>
            <returns> the SmartsheetClient </returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.AbstractResources.serializeToEntity``1(``0)">
            <summary>
            Serializes an object into an entity.
            </summary>
            <typeparam name="T">Object to Serialize to an Entity</typeparam>
            <param name="objectToPost">The object to post.</param>
            <returns></returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.AttachmentVersioningResourcesImpl">
            <summary>
            This is the implementation of the AttachmentVersioningResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.AttachmentVersioningResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Parameters: - Smartsheet : the SmartsheetImpl
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.AttachmentVersioningResourcesImpl.AttachNewVersion(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            <para>Uploads a new version of a file to a Sheet or Row.
            This operation can be performed using a simple upload or a multipart upload. For more information, see Posting an Attachment.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
             POST /sheets/{sheetId}/attachments/{attachmentId}/versions</para>
             <remarks><para>Uploading new versions is not supported for attachments on Comments or for URL attachments.</para>
             <para>This is a resource-intensive operation and incurs 10 additional requests against the rate limit.</para></remarks>
            </summary>
            <param name="sheetId"> the sheet id </param>
            <param name="attachmentId"> the attachment id </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type </param>
            <returns> Attachment object for the newly created attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AttachmentVersioningResourcesImpl.DeleteAllVersions(System.Int64,System.Int64)">
            <summary>
            <para>Deletes all versions of the attachment corresponding to the specified Attachment ID.
            For attachments with multiple versions, this will effectively delete the attachment from the object that it’s attached to.</para>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/attachments/{attachmentId}/versions</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="attachmentId"> the attachment id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AttachmentVersioningResourcesImpl.ListVersions(System.Int64,System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all versions of the given Attachment ID, in order from newest to oldest.</para>
            <remarks><para>This operation supports pagination of results. For more information, see Paging.</para>
            <para>to retrieve a download URL for a file attachment, use the Get Attachment operation for the specific version you want to download.</para></remarks>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/attachments/{attachmentId}/versions</para>
            </summary>
            <param name="sheetId"> the sheet id </param>
            <param name="attachmentId"> the attachment id </param>
            <param name="paging">the pagination</param>
            <returns>  list of all versions of the given Attachment ID. </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.AttachmentVersioningResourcesImpl.AttachFile(System.String,System.String,System.String)">
            <summary>
            Attach file.
            </summary>
            <param name="path"> the url path </param>
            <param name="file"> the file </param>
            <param name="contentType"> the content Type </param>
            <returns> the attachment </returns>
            <exception cref="T:System.IO.FileNotFoundException"> the file not found exception </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the Smartsheet exception </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.CommentAttachmentResourcesImpl">
            <summary>
            <para>
            This is the implementation of the CommentAttachmentResources.
            </para>
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.CommentAttachmentResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.CommentAttachmentResourcesImpl.AttachFile(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            <para>Attaches a file to the Comment.</para>
            <para>This operation will always create a new attachment.
            To upload a new version of the same attachment, use the Attach New Version operation.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST /sheets/{sheetId}/comments/{commentId}/attachments</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="commentId"> the comment Id </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type </param>
            <returns> the newly created Attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.CommentAttachmentResourcesImpl.AttachUrl(System.Int64,System.Int64,Smartsheet.Api.Models.Attachment)">
            <summary>
            <para>Attaches a URL to the Comment.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST /sheets/{sheetId}/comments/{commentId}/attachments</para>
            <remarks><para>attachmentSubType is valid only for GOOGLE_DRIVE attachments which are Google Docs.
            It can optionally be included to indicate the type of a file.
            The following attachmentSubTypes are valid for GOOGLE_DRIVE attachments "DOCUMENT", "SPREADSHEET", "PRESENTATION", "PDF", "DRAWING".</para>
            <para>When the attachment type is BOX_COM, DROPBOX, or GOOGLE_DRIVE (without an attachmentSubType specified),
            the mimeType will be derived by the file extension specified on the "name".</para>
            </remarks>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="commentId"> the comment Id </param>
            <param name="attachment"> the attachment object </param>
            <returns> the newly created Attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.CommentAttachmentResourcesImpl.AttachFile(System.String,System.String,System.String)">
            <summary>
            Attach file.
            </summary>
            <param name="path"> the url path </param>
            <param name="file"> the file </param>
            <param name="contentType"> the content Type </param>
            <returns> the attachment </returns>
            <exception cref="T:System.IO.FileNotFoundException"> the file not found exception </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the Smartsheet exception </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.DiscussionAttachmentResourcesImpl">
            <summary>
            This is the implementation of the AssociatedAttachmentResources for Discussions.
            
            It extends AssociatedAttachmentResourcesImpl and overrides attachFile/attachURL methods by throwing
            UnsupportedOperationException (since they're not supported for Discussions).
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.DiscussionAttachmentResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.DiscussionAttachmentResourcesImpl.ListAttachments(System.Int64,System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Attachments that are in the Discussion</para>
            <para>It mirrors to the following Smartsheet REST API method: <br />
            GET /sheets/{sheetId}/discussions/{discussionId}/attachments</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="discussionId"> the discussion Id </param>
            <param name="paging"> the paging </param>
            <returns> list of all Attachments that are in the Discussion. </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.DiscussionCommentResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.DiscussionCommentResourcesImpl.AddComment(System.Int64,System.Int64,Smartsheet.Api.Models.Comment)">
            <summary>
            <para>Adds a Comment to a Discussion.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/discussions/{discussionId}/comments</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="discussionId"> the id of the discussion </param>
            <param name="comment"> Comment object </param>
            <returns> the created comment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.DiscussionCommentResourcesImpl.AddCommentWithAttachment(System.Int64,System.Int64,Smartsheet.Api.Models.Comment,System.String,System.String)">
            <summary>
            <para>Adds a Comment attached with an Attachment to a Discussion.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/discussions/{discussionId}/comments</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="discussionId"> the id of the discussion </param>
            <param name="comment"> Comment object </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type </param>
            <returns> the created comment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.DiscussionCommentResourcesImpl.UpdateComment(System.Int64,Smartsheet.Api.Models.Comment)">
            <summary>
            <para>Update the specified comment.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/comments/{commentId}</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="comment"> Comment object </param>
            <returns> the updated comment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.FavoriteResourcesImpl">
            <summary>
            This is the implementation of the FavoriteResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.FavoriteResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.FavoriteResourcesImpl.AddFavorites(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Favorite})">
            <summary>
            <para>Adds one or more items to the user’s list of Favorite items.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /favorites</para>
            <para>If called with a single Favorite object, and that favorite already exists, error code 1129 will be returned. 
            If called with an array of Favorite objects, any objects specified in the array that are already marked as favorites 
            will be ignored and omitted from the response.</para>
            </summary>
            <param name="favorites">list of favorite objects</param>
            <returns> the created favortie objects </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FavoriteResourcesImpl.ListFavorites(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all of the user’s Favorite items.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /favorites</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <param name="paging">the pagination</param>
            <returns> A list of all Favorites (note that an empty list will be returned if there are none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FavoriteResourcesImpl.RemoveFavorites(Smartsheet.Api.Models.ObjectType,System.Collections.Generic.IList{System.Int64})">
            <summary>
            <para>Removes one or multiple objects from the user’s list of Favorite items.</para>
            <para>objectIds must not be null or empty.</para>
            <para>It mirrors to the following Smartsheet REST API methods: 
            <list type="bullet">
            <item><description>DELETE /favorites/folder</description></item>
            <item><description>DELETE /favorites/report</description></item>
            <item><description>DELETE /favorites/sheet</description></item>
            <item><description>DELETE /favorites/sight</description></item>
            <item><description>DELETE /favorites/template</description></item>
            <item><description>DELETE /favorites/workspace</description></item>
            </list>
            </para>
            </summary>
            <param name="objectIds">(required): a comma-separated list of object IDs representing the items to remove from Favorites</param>
            <param name="type">the object type to remove </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.FolderResourcesImpl">
            <summary>
            This is the implementation of the FolderResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the SmartsheetImpl </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderResourcesImpl.GetFolder(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.FolderInclusion})">
            <summary>
            <para>Gets the specified Folder (and lists its contents).</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /folders/{folderId}</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="include"> (optional) – comma-separated list of elements to include in the respons</param>
            <returns> the folder (note that if there is no such resource, this method will throw ResourceNotFoundException 
            rather than returning null) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderResourcesImpl.UpdateFolder(Smartsheet.Api.Models.Folder)">
            <summary>
            <para>Updates a folder.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /folders/{folderId}</para>
            </summary>
            <param name="folder"> the folder to update </param>
            <returns> the updated folder (note that if there is no such folder, this method will throw Resource Not Found 
            Exception rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderResourcesImpl.DeleteFolder(System.Int64)">
            <summary>
            <para>Deletes a folder.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            DELETE /folders/{folderId}</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderResourcesImpl.ListFolders(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of the top-level child Folders within the specified Folder.</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            <para>It mirrors to the following Smartsheet REST API method:<br /> GET /folders/{folderId}/folders</para>
            </summary>
            <param name="folderId"> the folderId</param>
            <param name="paging">the pagination information</param>
            <returns>the child Folders (note that an empty list will be returned if no child folder is found), limited to the following attributes:
            <list type="bullet">
            <item><description>id</description></item>
            <item><description>name</description></item>
            <item><description>permalink</description></item>
            </list>
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderResourcesImpl.CreateFolder(System.Int64,Smartsheet.Api.Models.Folder)">
            <summary>
            <para>Creates a Folder in the specified Folder.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /folders/{folderId}/folders</para>
            </summary>
            <param name="folderId"> the parent folder Id </param>
            <param name="folder"> the folder to create </param>
            <returns> the created folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderResourcesImpl.CopyFolder(System.Int64,Smartsheet.Api.Models.ContainerDestination,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.FolderCopyInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.FolderRemapExclusion})">
            <summary>
            <para>Creates a copy of the specified Folder.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /folders/{folderId}/copy</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="destination"> the destination to copy to </param>
            <param name="include"> the elements to copy. Note: Cell history will not be copied, regardless of which include parameter values are specified.</param>
            <param name="skipRemap"> the references to NOT re-map for the newly created folder
            <para>
            If “cellLinks” is specified in the skipRemap parameter value, the cell links within the newly created folder will continue to point to the original source sheets.
            If “reports” is specified in the skipRemap parameter value, the reports within the newly created folder will continue to point to the original source sheets.
            </para>
            </param>
            <returns> the created folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderResourcesImpl.MoveFolder(System.Int64,Smartsheet.Api.Models.ContainerDestination)">
            <summary>
            <para>Moves the specified Folder to another location.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /folders/{folderId}/move</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="destination"> the destination to copy to </param>
            <returns> the moved folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.Internal.FolderResourcesImpl.SheetResources">
            <summary>
            <para>Return the SheetResources object that provides access to Sheet resources associated with Folder resources.</para>
            </summary>
            <returns> the SheetResources object </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.GroupResourcesImpl">
            <summary>
            This is the implementation of the UserResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.GroupResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.GroupResourcesImpl.ListGroups(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>List all Users.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /groups</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <param name="paging"> the pagination</param>
            <returns> the list of all Users </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.GroupResourcesImpl.CreateGroup(Smartsheet.Api.Models.Group)">
            <summary>
            <para>Creates a new Group.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /groups</para>
            <remarks>This operation is only available to group administrators and system administrators.</remarks>
            </summary>
            <param name="group"> the group object </param>
            <returns> the created group </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.GroupResourcesImpl.GetGroup(System.Int64)">
            <summary>
            <para>Gets the Group specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /groups/{groupId}</para>
            </summary>
            <returns> Group object that includes the list of GroupMembers </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.GroupResourcesImpl.UpdateGroup(Smartsheet.Api.Models.Group)">
            <summary>
            <para>Updates the Group specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /groups/{groupId}</para>
            <remarks>This operation is only available to group administrators and system administrators.</remarks>
            </summary>
            <param name="group"> the group to update </param>
            <returns> the updated user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.GroupResourcesImpl.DeleteGroup(System.Int64)">
            <summary>
            <para>Deletes the Group specified in the URL.</para>
            <remarks>This operation is only available to system administrators.</remarks>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /groups/{groupId}</para>
            </summary>
            <param name="groupId"> the Id of the group </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.GroupResourcesImpl.AddGroupMembers(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.GroupMember})">
            <summary>
            <para>Adds one or more members to a Group.</para>
            <remarks><para>If called with a single GroupMember object, and that group member already exists, error code 1129 will be returned.
            If called with an array of GroupMember objects any users specified in the array that are already group members will be ignored and omitted from the response.</para>
            <para>This operation is only available to group administrators and system administrators.</para>
            <para>This operation is asynchronous, meaning the users may not yet have sharing access to sheets for a period of time after this operation returns.
            For small groups with limited sharing, the operation should complete quickly (within a few seconds).
            For large groups with many shares, this operation could possibly take more than a minute to complete.</para></remarks>
            <para>It mirrors to the following Smartsheet REST API method: POST /groups/{groupId}/members</para>
            </summary>
            <param name="groupId"> the Id of the group </param>
            <param name="groupMembers"> array of Group Member objects </param>
            <returns> the members added to the group </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.GroupResourcesImpl.RemoveGroupMember(System.Int64,System.Int64)">
            <summary>
            <para>Removes a member from a Group.</para>
            <remarks><para>This operation is only available to group administrators and system administrators.</para>
            <para>This operation is asynchronous, meaning group members may retain their sharing access for a brief period of time after the call returns.
            For small groups with limited sharing, the operation should complete quickly (within a few seconds).
            For large groups with many shares, this operation could possibly take more than a minute to complete.</para></remarks>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /groups/{groupId}/members/{userId}</para>
            </summary>
            <param name="groupId"> the Id of the group </param>
            <param name="userId"> the Id of the user </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.HomeFolderResourcesImpl">
            <summary>
            This is the implementation of the HomeFolderResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.HomeFolderResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.HomeFolderResourcesImpl.ListFolders(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>List Folders under home.</para>
            
            <para>It mirrors to the following Smartsheet REST API method:<br />
            GET /home/Folders</para>
            </summary>
            <returns>the list of Folders (note that an empty list will be returned if no child folder is found), limited to the following attributes:
            <list type="bullet">
            <item><description>id</description></item>
            <item><description>name</description></item>
            <item><description>permalink</description></item>
            </list>
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.HomeFolderResourcesImpl.CreateFolder(Smartsheet.Api.Models.Folder)">
            <summary>
            <para>Create a folder in home.</para>
            
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /home/Folders</para>
            </summary>
            <param name="folder"> the folder to create </param>
            <returns> the folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.HomeResourcesImpl">
            <summary>
            This is the implementation of HomeResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.HomeResourcesImpl.folders">
            <summary>
            Represents the HomeFolderResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.HomeResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.HomeResourcesImpl.GetHome(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.HomeInclusion})">
            <summary>
            <para>
            Get a nested list of all Home objects, including folders, sheets, and workspaces, and optionally, reports and/or
            templates as shown on the Home tab.
            </para>
            <para>
            Mirrors to the following Smartsheet REST API method: GET /home
            </para>
            </summary>
            <param name="includes"> used to specify the optional objects to include, currently TEMPLATES is supported. </param>
            <exception cref="T:Smartsheet.Api.InvalidRequestException">if there is any problem with the REST API request</exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException">if there is any problem with the REST API authorization (access token)</exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException">if the resource cannot be found</exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException">if the REST API service is not available (possibly due to rate limiting)</exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException">if any other REST API related error occurred during the operation</exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException">if any other error occurred during the operation</exception>
            <returns> the resource (note that if there is no such resource, this method will throw ResourceNotFoundException
            rather than returning null). </returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.HomeResourcesImpl.GetHome(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.HomeInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.HomeExclusion})">
            <summary>
            <para>
            Gets a nested list of all Home objects, including folders, reports, sheets, templates, and workspaces as shown on the Home tab.
            </para>
            <para>
            Mirrors to the following Smartsheet REST API method: GET /home
            </para>
            </summary>
            <param name="includes"> used to specify the optional objects to include, currently TEMPLATES is supported. </param>
            <param name="excludes"> used to specify the optional object to exclude </param>
            <exception cref="T:Smartsheet.Api.InvalidRequestException">if there is any problem with the REST API request</exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException">if there is any problem with the REST API authorization (access token)</exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException">if the resource cannot be found</exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException">if the REST API service is not available (possibly due to rate limiting)</exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException">if any other REST API related error occurred during the operation</exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException">if any other error occurred during the operation</exception>
            <returns> the resource (note that if there is no such resource, this method will throw ResourceNotFoundException
            rather than returning null). </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.HomeResourcesImpl.FolderResources">
            <summary>
            Return the HomeFolderResources object that provides access to folder resources under home.
            </summary>
            <returns> the home folder resources </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.Http.DefaultHttpClient">
            <summary>
            This is the RestSharp based HttpClient implementation.
            
            Thread Safety: This class is thread safe because it is immutable and the underlying http client is
            thread safe.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.DefaultHttpClient.httpClient">
            <summary>
            Represents the underlying http client.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.DefaultHttpClient.logger">
            <summary>
            static logger 
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.DefaultHttpClient.jsonSerializer">
            <summary>
            The JSON serializer (used to deserialize errors for ShouldRetry
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.DefaultHttpClient.maxRetryTimeout">
            <summary>
            maximum retry timeout used by ShouldRetry
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.DefaultHttpClient.restRequest">
            <summary>
            The http request. </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.DefaultHttpClient.restResponse">
            <summary>
            The http response. </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.DefaultShouldRetry(System.Int32,System.Int64,Smartsheet.Api.Internal.Http.HttpResponse)">
            <summary>
            
            </summary>
            <param name="previousAttempts"></param>
            <param name="totalElapsedTime"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.#ctor(RestSharp.RestClient,Smartsheet.Api.Internal.Json.JsonSerializer)">
            <summary>
            Constructor.
            
            Parameters: - HttpClient : the http client to use
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="httpClient"> the http client </param>
            <param name="jsonSerializer"> custom JSON serializer </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.Request(Smartsheet.Api.Internal.Http.HttpRequest,System.String,System.String,System.String)">
            <summary>
            Make a multipart HTTP request and return the response.
            </summary>
            <param name="smartsheetRequest"> the Smartsheet request </param>
            <param name="file">the full file path</param>
            <param name="fileType">the file type, or also called the conent type of the file</param>
            <param name="objectType">the object name, for example 'comment', or 'discussion'</param>
            <returns> the HTTP response </returns>
            <exception cref="T:Smartsheet.Api.Internal.Http.HttpClientException"> the HTTP client exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.Request(Smartsheet.Api.Internal.Http.HttpRequest)">
            <summary>
            Make an HTTP request and return the response.
            </summary>
            <param name="smartsheetRequest"> the Smartsheet request </param>
            <returns> the HTTP response </returns>
            <exception cref="T:Smartsheet.Api.Internal.Http.HttpClientException"> the HTTP client exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.CreateRestRequest(Smartsheet.Api.Internal.Http.HttpRequest)">
            <summary>
            Create the RestSharp request. Override this function to inject additional
            headers in the request or use a proxy.
            </summary>
            <param name="smartsheetRequest"></param>
            <returns> the RestSharp request </returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.SetMaxRetryTimeout(System.Int64)">
            <summary>
            Sets the max retry timeout from the Smartsheet client
            </summary>
            <param name="maxRetryTimeout"> the retry timeout </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.CalcBackoff(System.Int32,System.Int64,Smartsheet.Api.Models.Error)">
            <summary>
            The default CalcBackoff implementation. Uses exponential backoff. If the maximum elapsed time
            has expired, this calculation returns -1 causing the caller to fall out of the retry loop.
            </summary>
            <param name="previousAttempts"></param>
            <param name="totalElapsedTime"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.ShouldRetry(System.Int32,System.Int64,Smartsheet.Api.Internal.Http.HttpResponse)">
            <summary>
            Called by DefaultHttpClient when a request fails to determine if we can retry the request. Calls
            calcBackoff to determine time in between retries.
            </summary>
            <param name="previousAttempts"></param>
            <param name="totalElapsedTime"></param>
            <param name="response"></param>
            <returns>true if this error code can be retried</returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.SetUserAgent(System.String)">
            <summary>
            Set the User-Agent in the RestClient since RestSharp won't pick it up at request time
            </summary>
            <param name="userAgent"></param>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.Close">
            <summary>
            Close the HttpClient.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.ReleaseConnection">
            <summary>
            Release connection - not currently used.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.DefaultHttpClient.LogRequest(RestSharp.IRestRequest,RestSharp.IRestResponse,System.Int64)">
            <summary>
            Log URL and response code to INFO, message bodies to DEBUG
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="durationMs"></param>
        </member>
        <member name="T:Smartsheet.Api.Internal.Http.HttpClient">
            <summary>
            This interface defines methods to make an HTTP request.
            
            Thread Safety: Implementation of this interface must be thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.HttpClient.Request(Smartsheet.Api.Internal.Http.HttpRequest,System.String,System.String,System.String)">
            <summary>
            Make a multipart HTTP request and return the response.
            </summary>
            <param name="request"> the Smartsheet request </param>
            <param name="file">the full file path</param>
            <param name="fileType">the file type, or also called the conent type of the file</param>
            <param name="objectType">the object name, for example 'comment', or 'discussion'</param>
            <returns> the HTTP response </returns>
            <exception cref="T:Smartsheet.Api.Internal.Http.HttpClientException"> the HTTP client exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.HttpClient.Request(Smartsheet.Api.Internal.Http.HttpRequest)">
            <summary>
            Make an HTTP request and return the response.
            
            Parameters: - request : the HTTP request
            
            Returns: the HTTP response
            
            Exceptions: - IllegalArgumentException : if any argument is null - HttpClientException : if there is any other
            error occurred during the operation
            </summary>
            <param name="request"> the request </param>
            <returns> the http response </returns>
            <exception cref="T:Smartsheet.Api.Internal.Http.HttpClientException"> the http client exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.HttpClient.ReleaseConnection">
            <summary>
            Release connection.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.HttpClient.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Internal.Http.HttpClientException">
            <summary>
            This is the exception throw by HttpClient to indicate errors occurred during HTTP operation.
            
            Thread safety: Exceptions are not thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.HttpClientException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.HttpClientException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
            <param name="cause"> the cause </param>
        </member>
        <member name="T:Smartsheet.Api.Internal.Http.HttpEntity">
            <summary>
            This class represents an HTTP Entity (http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html).
            
            Thread Safety: This class is not thread safe since it's mutable.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpEntity.contentType">
            <summary>
            Represents the content Type.
            
            It has a pair of setter/getter (not shown on class diagram for brevity).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpEntity.contentLength">
            <summary>
            Represents the content length.
            
            It has a pair of setter/getter (not shown on class diagram for brevity).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpEntity.content">
            <summary>
            Represents the content as an InputStream.
            
            It has a pair of setter/getter (not shown on class diagram for brevity).
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Internal.Http.HttpEntity.ContentType">
            <summary>
            Gets the content Type.
            </summary>
            <returns> the content Type </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.Http.HttpEntity.ContentLength">
            <summary>
            Gets the content length.
            </summary>
            <returns> the content length </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.Http.HttpEntity.Content">
            <summary>
            Gets the content.
            </summary>
            <returns> the content </returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.Http.HttpEntity.GetContent">
            <summary>
            Gets the content as a stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.Http.HttpMessage">
            <summary>
            This is the base class of HTTP messages, it holds Headers and an HttpEntity.
            
            Thread Safety: This class is not thread safe since it's mutable.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpMessage.headers">
            <summary>
            Represents the HTTP Headers.
            
            It has a pair of setter/getter (not shown on class diagram for brevity).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpMessage.entity">
            <summary>
            Represents the HTTP Entity.
            
            It has a pair of setter/getter (not shown on class diagram for brevity).
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Internal.Http.HttpMessage.Headers">
            <summary>
            Gets the Headers.
            </summary>
            <returns> the Headers </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.Http.HttpMessage.Entity">
            <summary>
            Gets the Entity.
            </summary>
            <returns> the Entity </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.Http.HttpMethod">
            <summary>
            Represents HTTP methods.
            Thread Safety: This enumeration is thread safe as it is immutable.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpMethod.GET">
            <summary>
            The get
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpMethod.POST">
            <summary>
            The post
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpMethod.PUT">
            <summary>
            The put
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpMethod.DELETE">
            <summary>
            The delete
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Internal.Http.HttpRequest">
            <summary>
            This class represents an HTTP request.
            
            Thread Safety: This class is not thread safe since it's mutable.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpRequest.uri">
            <summary>
            Represents the URI.
            
            It has a pair of setter/getter (not shown on class diagram for brevity).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpRequest.method">
            <summary>
            Represents the HTTP method.
            
            It has a pair of setter/getter (not shown on class diagram for brevity).
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Internal.Http.HttpRequest.Uri">
            <summary>
            Gets the uri.
            </summary>
            <returns> the uri </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.Http.HttpRequest.Method">
            <summary>
            Gets the method.
            </summary>
            <returns> the method </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.Http.HttpResponse">
            <summary>
            This class represents an HTTP response.
            
            Thread Safety: This class is not thread safe since it's mutable.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.Http.HttpResponse.statusCode">
            <summary>
            Represents the response Status Code.
            
            It has a pair of setter/getter (not shown on class diagram for brevity).
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Internal.Http.HttpResponse.StatusCode">
            <summary>
            Gets the Status Code.
            </summary>
            <returns> the Status Code </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl">
            <summary>
            Default implementation of OAuthFlow.
            
            Thread Safety: Implementation of this interface must be thread safe.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.httpClient">
            <summary>
            Represents the HttpClient.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.jsonSerializer">
            <summary>
            Represents the JsonSerializer.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.clientId">
            <summary>
            Represents the Client ID.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.clientSecret">
            <summary>
            Represents the Client Secret.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.redirectURL">
            <summary>
            Represents the redirect URL.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.authorizationURL">
            <summary>
            Represents the authorization URL.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.tokenURL">
            <summary>
            Represents the token URL.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.#ctor(System.String,System.String,System.String,System.String,System.String,Smartsheet.Api.Internal.Http.HttpClient,Smartsheet.Api.Internal.Json.JsonSerializer)">
            <summary>
            Constructor.
            
            Exceptions: - 
            </summary>
            <param name="clientId"> the client Id </param>
            <param name="clientSecret"> the client secret </param>
            <param name="redirectURL"> the redirect Url </param>
            <param name="authorizationURL"> the authorization Url </param>
            <param name="tokenURL"> the token Url </param>
            <param name="httpClient"> the http client </param>
            <param name="jsonSerializer"> the Json serializer </param>
            <exception cref="T:System.InvalidOperationException"> If any argument is null, or empty string. </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.NewAuthorizationURL(System.Collections.Generic.IEnumerable{Smartsheet.Api.OAuth.AccessScope},System.String)">
            <summary>
            Generate a new authorization URL. 
            
            Exceptions: - IllegalArgumentException : if scopes is null/empty
            </summary>
            <param name="scopes"> the scopes </param>
            <param name="state"> an arbitrary string that will be returned to your app; intended to be used by you to ensure that 
            this redirect is indeed from an OAuth flow that you initiated </param>
            <returns> the authorization URL </returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.ExtractAuthorizationResult(System.String)">
            <summary>
            Extract AuthorizationResult from the authorization response URL (i.e. the RedirectURL with the response
            parameters from Smartsheet OAuth server).
            
            Exceptions: 
              - IllegalArgumentException : if authorizationResponseURL is null/empty, or a malformed URL 
              - AccessDeniedException : if the user has denied the authorization request 
              - UnsupportedResponseTypeException : if the response Type isn't supported (note that this won't really happen in current implementation) 
              - InvalidScopeException : if some of the specified scopes are invalid 
              - OAuthAuthorizationCodeException : if any other error occurred during the operation
            </summary>
            <param name="authorizationResponseURL"> the authorization response URL </param>
            <returns> the authorization RequestResult </returns>
            <exception cref="T:System.UriFormatException"> the URI syntax exception </exception>
            <exception cref="T:Smartsheet.Api.OAuth.OAuthAuthorizationCodeException"> the o auth authorization Code exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.ObtainNewToken(Smartsheet.Api.OAuth.AuthorizationResult)">
            <summary>
            Obtain a new token using AuthorizationResult.
            
            Exceptions: 
              - IllegalArgumentException : if authorizationResult is null 
              - InvalidTokenRequestException : if the token request is invalid (note that this won't really happen in current implementation) 
              - InvalidOAuthClientException : if the client information is invalid 
              - InvalidOAuthGrantException : if the authorization Code or refresh token is invalid or expired, the 
              redirect_uri does not match, or the hash Value does not match the client secret and/or Code 
              - UnsupportedOAuthGrantTypeException : if the grant Type is invalid (note that this won't really happen in 
              current implementation) 
              - OAuthTokenException : if any other error occurred during the operation
            </summary>
            <param name="authorizationResult"> the authorization RequestResult </param>
            <returns> the token </returns>
            <exception cref="T:Smartsheet.Api.OAuth.OAuthTokenException"> the o auth token exception </exception>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
            <exception cref="T:System.UriFormatException"> the URI syntax exception </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> the invalid request exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.RefreshToken(Smartsheet.Api.OAuth.Token)">
            <summary>
            Refresh token.
            
            Exceptions: 
              - IllegalArgumentException : if token is null. 
              - InvalidTokenRequestException : if the token request is invalid 
              - InvalidOAuthClientException : if the client information is invalid 
              - InvalidOAuthGrantException : if the authorization Code or refresh token is invalid or expired, 
              the redirect_uri does not match, or the hash Value does not match the client secret and/or Code 
              - UnsupportedOAuthGrantTypeException : if the grant Type is invalid
              - OAuthTokenException : if any other error occurred during the operation
            </summary>
            <param name="token"> the token to refresh </param>
            <returns> the refreshed token </returns>
            <exception cref="T:Smartsheet.Api.OAuth.OAuthTokenException"> the o auth token exception </exception>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
            <exception cref="T:System.UriFormatException"> the URI syntax exception </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> the invalid request exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.RequestToken(System.String)">
            <summary>
            Request a token.
            
            Exceptions: 
              - IllegalArgumentException : if Url is null or empty 
              - InvalidTokenRequestException : if the token request is invalid 
              - InvalidOAuthClientException : if the client information is invalid 
              - InvalidOAuthGrantException : if the authorization Code or refresh token is invalid or 
              expired, the redirect_uri does not match, or the hash Value does not match the client secret and/or Code 
              - UnsupportedOAuthGrantTypeException : if the grant Type is invalid 
              - OAuthTokenException : if any other error occurred during the operation
            </summary>
            <param name="url"> the URL (with request parameters) from which the token will be requested </param>
            <returns> the token </returns>
            <exception cref="T:Smartsheet.Api.OAuth.OAuthTokenException"> the o auth token exception </exception>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
            <exception cref="T:System.UriFormatException"> the URI syntax exception </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> the invalid request exception </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.RevokeToken(Smartsheet.Api.OAuth.Token)">
            <summary>
            Revoke token.
            </summary>
            <param name="token"> the  token </param>
            <exception cref="T:Smartsheet.Api.OAuth.OAuthTokenException"> the o auth token exception </exception>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
            <exception cref="T:System.UriFormatException"> the URI syntax exception </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> the invalid request exception </exception>
            <exception cref="T:System.InvalidOperationException"> if any other error occurred during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.RevokeAllForApiClient(Smartsheet.Api.OAuth.Token)">
            <summary>
            Revoke token.
            </summary>
            <param name="token"> the  token </param>
            <exception cref="T:Smartsheet.Api.OAuth.OAuthTokenException"> the o auth token exception </exception>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
            <exception cref="T:System.UriFormatException"> the URI syntax exception </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> the invalid request exception </exception>
            <exception cref="T:System.InvalidOperationException"> if any other error occurred during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.GenerateURL(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Helper function to generate a URL using the base URL and the given parameters. It will encode each of the 
            parameters as well.
            </summary>
            <param name="baseURL"> The base URL that the parameters will be appended to. </param>
            <param name="parameters"> The parameters that will be appended to the base URL. Each parameter will be URL encoded. </param>
            <returns> A string representing the full URL. </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.HttpClient">
            <summary>
            Gets the http client.
            </summary>
            <returns> the http client </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.JsonSerializer">
            <summary>
            Gets the Json serializer.
            </summary>
            <returns> the Json serializer </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.ClientId">
            <summary>
            Gets the client Id.
            </summary>
            <returns> the client Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.ClientSecret">
            <summary>
            Gets the client secret.
            </summary>
            <returns> the client secret </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.RedirectURL">
            <summary>
            Gets the redirect Url.
            </summary>
            <returns> the redirect Url </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.AuthorizationURL">
            <summary>
            Gets the authorization Url.
            </summary>
            <returns> the authorization Url </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.OAuth.OAuthFlowImpl.TokenURL">
            <summary>
            Gets the token Url.
            </summary>
            <returns> the token Url </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.ReportResourcesImpl">
            <summary>
                This is the implementation of the ReportResources.
                Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.ReportResourcesImpl.shares">
            <summary>
            Represents the ShareResources.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.ReportResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.ReportResourcesImpl.GetReport(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.ReportInclusion},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Gets the Report, including one page of Rows, and optionally populated with Discussions, Attachments, and source Sheets.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /reports/{reportId}</para>
            </summary>
            <remarks>This method returns the top 100 rows. To get more or less rows please use the other overloaded versions of this method</remarks>
            <param name="reportId"> the Id of the report </param>
            <param name="includes"> used to specify the optional objects to include. </param>
            <param name="pageSize">(optional): Number of rows per page. If not specified, the default value is 100.
            This operation can return a maximum of 500 rows per page.</param>
            <param name="page">(optional): Which page number (1-based) to return. 
            If not specified, the default value is 1. If a page number is specified that is greater than the number of total pages, the last page will be returned.</param>
            <returns> the report resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ReportResourcesImpl.GetReport(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.ReportInclusion},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Gets the Report, including one page of Rows, and optionally populated with Discussions, Attachments, and source Sheets.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /reports/{reportId}</para>
            </summary>
            <remarks>This method returns the top 100 rows. To get more or less rows please use the other overloaded versions of this method</remarks>
            <param name="reportId"> the Id of the report </param>
            <param name="includes"> used to specify the optional objects to include. </param>
            <param name="pageSize">(optional): Number of rows per page. If not specified, the default value is 100.
            This operation can return a maximum of 500 rows per page.</param>
            <param name="page">(optional): Which page number (1-based) to return. 
            If not specified, the default value is 1. If a page number is specified that is greater than the number of total pages, the last page will be returned.</param>
            <param name="level"> compatibility level </param>
            <returns> the report resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ReportResourcesImpl.ListReports(Smartsheet.Api.Models.PaginationParameters,System.Nullable{System.DateTime})">
            <summary>
            <para>Gets the list of all Reports that the User has access to, in alphabetical order, by name.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /reports</para>
            </summary>
            <param name="paging">the pagination</param>
            <param name="modifiedSince">restrict results to reports modified on or after the specified date</param>
            <returns>A list of Report objects limited to the following attributes:
            <list type="bullet">
            <item><description>id</description></item>
            <item><description>name</description></item>
            <item><description>accessLevel</description></item>
            <item><description>permalink</description></item>
            </list></returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ReportResourcesImpl.GetReportAsExcel(System.Int64,System.IO.BinaryWriter)">
            <summary>
            <para>Gets the Report in the format specified, based on the Report ID.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            GET /reports/{reportId} with "application/vnd.ms-excel" Accept HTTP header</para>
            </summary>
            <param name="reportId"> the Id of the report </param>
            <param name="outputStream"> the output stream to which the Excel file will be written. </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ReportResourcesImpl.GetReportAsCSV(System.Int64,System.IO.BinaryWriter)">
            <summary>
            <para>Get a report as a CSV file.</para>
            
            <para>It mirrors to the following Smartsheet REST API method:<br />
            GET /reports/{reportId} with "text/csv" Accept HTTP header</para>
            </summary>
            <param name="reportId"> the Id of the report </param>
            <param name="outputStream"> the output stream to which the Excel file will be written. </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ReportResourcesImpl.SendReport(System.Int64,Smartsheet.Api.Models.SheetEmail)">
            <summary>
            <para>Send a report as a PDF attachment via Email to the designated recipients.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: POST /reports/{reportId}/emails</para>
            </summary>
            <param name="reportId"> the reportId </param>
            <param name="email"> the Email </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ReportResourcesImpl.GetPublishStatus(System.Int64)">
            <summary>
            <para>Get the publish status of a report.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /reports/{id}/publish</para>
            </summary>
            <param name="reportId"> the reportId </param>
            <returns>
            The report publish status (note that if there is no such resource, this method will 
            throw ResourceNotFoundException rather than returning null).
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ReportResourcesImpl.UpdatePublishStatus(System.Int64,Smartsheet.Api.Models.ReportPublish)">
            <summary>
            <para>
            Sets the publish status of a report and returns the new status, including the URLs of any enabled publishing.
            </para>
            
            <para>It mirrors to the following Smartsheet REST API method: PUT /reports/{id}/publish</para>
            </summary>
            <param name="reportId"> the reportId </param>
            <param name="reportPublish"> the ReportPublish object</param>
            <returns>
            The report publish status (note that if there is no such resource, this method will 
            throw ResourceNotFoundException rather than returning null).
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.Internal.ReportResourcesImpl.ShareResources">
            <summary>
            <para>Return the ShareResources object that provides access to Share resources associated with Report resources.</para>
            </summary>
            <returns> the ShareResources object </returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.ReportResourcesImpl.GetReportAsFile(System.String,System.IO.BinaryWriter,System.String)">
            <summary>
            <para>Get a sheet as a file.</para>
            
            <para>It mirrors to the following Smartsheet REST API method:<br />
            GET /reports/{reportId} with "application/pdf", "application/vnd.ms-excel", or "text/csv" as Accept HTTP header</para>
            </summary>
            <param name="path">the path of the file</param>
            <param name="outputStream"> the output stream to which the CSV file will be written. </param>
            <param name="contentType"> the Accept header </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.RowAttachmentResourcesImpl">
            <summary>
            This is the implementation of the RowAttachmentResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowAttachmentResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowAttachmentResourcesImpl.ListAttachments(System.Int64,System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Attachments that are on the Row, including Row and Discussion level Attachments.</para>
            <para>It mirrors to the following Smartsheet REST API method: <br />
            GET /sheets/{sheetId}/rows/{rowId}/attachments</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="rowId"> the row Id </param>
            <param name="paging"> the paging </param>
            <returns> list of all Attachments that are in the Discussion. </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowAttachmentResourcesImpl.AttachFile(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            <para>Attaches a file to the Row.</para>
            <para>This operation will always create a new attachment.
            To upload a new version of the same attachment, use the Attach New Version operation.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST /sheets/{sheetId}/rows/{rowId}/attachments</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="rowId"> the row Id </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type </param>
            <returns> the newly created Attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowAttachmentResourcesImpl.AttachUrl(System.Int64,System.Int64,Smartsheet.Api.Models.Attachment)">
            <summary>
            <para>Attaches a URL to the Row.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST /sheets/{sheetId}/rows/{rowId}/attachments</para>
            <remarks><para>attachmentSubType is valid only for GOOGLE_DRIVE attachments which are Google Docs.
            It can optionally be included to indicate the type of a file.
            The following attachmentSubTypes are valid for GOOGLE_DRIVE attachments "DOCUMENT", "SPREADSHEET", "PRESENTATION", "PDF", "DRAWING".</para>
            <para>When the attachment type is BOX_COM, DROPBOX, or GOOGLE_DRIVE (without an attachmentSubType specified),
            the mimeType will be derived by the file extension specified on the “name”.</para>
            </remarks>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="rowId"> the row Id </param>
            <param name="attachment"> the attachment object </param>
            <returns> the newly created Attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowAttachmentResourcesImpl.AttachFile(System.String,System.String,System.String)">
            <summary>
            Attach file.
            </summary>
            <param name="path"> the url path </param>
            <param name="file"> the file </param>
            <param name="contentType"> the content Type </param>
            <returns> the attachment </returns>
            <exception cref="T:System.IO.FileNotFoundException"> the file not found exception </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the Smartsheet exception </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.RowColumnResourcesImpl">
            <summary>
            This is the implementation of the RowColumnResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowColumnResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowColumnResourcesImpl.GetCellHistory(System.Int64,System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.CellInclusion},Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets the cell modification history.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/history</para>
            <remarks><para>This operation supports pagination of results. For more information, see Paging.</para>
            <para>This is a resource-intensive operation and incurs 10 additional requests against the rate limit.</para></remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rowId"> the row Id </param>
            <param name="columnId"> the column Id</param>
            <param name="include"> the elements to include in the response </param>
            <param name="paging"> the pagination </param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowColumnResourcesImpl.GetCellHistory(System.Int64,System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.CellInclusion},Smartsheet.Api.Models.PaginationParameters,System.Nullable{System.Int32})">
            <summary>
            <para>Gets the cell modification history.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/history</para>
            <remarks><para>This operation supports pagination of results. For more information, see Paging.</para>
            <para>This is a resource-intensive operation and incurs 10 additional requests against the rate limit.</para></remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rowId"> the row Id </param>
            <param name="columnId"> the column Id</param>
            <param name="include"> the elements to include in the response </param>
            <param name="paging"> the pagination </param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowColumnResourcesImpl.AddImageToCell(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            <para>Uploads an image to the specified cell within a sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/cellimages</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rowId"> the row Id </param>
            <param name="columnId"> the column Id</param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type </param>
            <returns> the Row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowColumnResourcesImpl.AddImageToCell(System.Int64,System.Int64,System.Int64,System.String,System.String,System.Boolean,System.String)">
            <summary>
            <para>Uploads an image to the specified cell within a sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/cellimages</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rowId"> the row Id </param>
            <param name="columnId"> the column Id</param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type </param>
            <param name="overrideValidation"></param>
            <param name="altText"> alt text for image </param>
            <returns> the Row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowColumnResourcesImpl.AddImage(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Attach file.
            </summary>
            <param name="path"> the url path </param>
            <param name="file"> the file </param>
            <param name="contentType"> the content Type </param>
            <param name="overrideValidation"> override column validation </param>
            <param name="altText"> image alternate text </param>
            <returns> the attachment </returns>
            <exception cref="T:System.IO.FileNotFoundException"> the file not found exception </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the Smartsheet exception </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.RowDiscussionResourcesImpl">
            <summary>
            This is the implementation of the RowDiscussionResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowDiscussionResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowDiscussionResourcesImpl.CreateDiscussion(System.Int64,System.Int64,Smartsheet.Api.Models.Discussion)">
            <summary>
            <para>Creates a new Discussion on a Row.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /sheets/{sheetId}/rows/{rowId}/discussions</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="rowId"> the id of the row </param>
            <param name="discussion"> the discussion to add </param>
            <returns> the created discussion </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowDiscussionResourcesImpl.CreateDiscussionWithAttachment(System.Int64,System.Int64,Smartsheet.Api.Models.Discussion,System.String,System.String)">
            <summary>
            <para>Creates a new Discussion attached with an Attachment on a Row.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /sheets/{sheetId}/rows/{rowId}/discussions</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="rowId"> the id of the row </param>
            <param name="discussion"> the discussion to add </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type, can be null </param>
            <returns> the created discussion </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.RowDiscussionResourcesImpl.ListDiscussions(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.DiscussionInclusion},Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Discussions associated with the specified Row.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/rows/{rowId}/discussions</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rowId"> the row Id </param>
            <param name="include">elements to include in response</param>
            <param name="paging">the pagination</param>
            <returns> list of all Discussions </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.SearchResourcesImpl">
            <summary>
            This is the implementation of the SearchResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.SearchResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.SearchResourcesImpl.Search(System.String)">
            <summary>
            <para>Searches all sheets that the user can access, for the specified text.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /search</para>
            </summary>
            <param name="query"> (required): Text with which to perform the search. </param>
            <returns> SearchResult object that contains a maximum of 100 SearchResultems </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SearchResourcesImpl.Search(System.String,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SearchInclusion},System.Nullable{Smartsheet.Api.Models.SearchLocation},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SearchScope})">
            <summary>
            <para>Searches all sheets that the user can access for the specified text.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /search</para>
            </summary>
            <param name="query"> (required): Text with which to perform the search. </param>
            <param name="includes">includes enum set of inclusions</param>
            <param name="location">location when specified with a value of "personalWorkspace limits response to only those
            items in the user's workspace</param>
            <param name="modifiedSince">only return items modified since this date</param>
            <param name="scopes">scopes enum set of search filters</param>
            <returns> SearchResult object that contains a maximum of 100 SearchResultems </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SearchResourcesImpl.SearchSheet(System.Int64,System.String)">
            <summary>
            <para>Searches a sheet for the specified text.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /search/sheets/{sheetId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="query"> the query text </param>
            <returns> SearchResult object that contains a maximum of 100 SearchResultems </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.ServerInfoResourcesImpl">
            <summary>
            This is the implementation of the ServerInfoResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.ServerInfoResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null or empty string
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="T:Smartsheet.Api.Internal.ShareResourcesImpl">
            <summary>
            This is the implementation of the ShareResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.ShareResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl,System.String)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null or empty string
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <param name="masterResourceType"> the master resource Type (e.g. "sheets", "workspaces", "reports") </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.ShareResourcesImpl.ListShares(System.Int64,Smartsheet.Api.Models.PaginationParameters,Smartsheet.Api.Models.ShareScope)">
            <summary>
            <para>List shares of a given object.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            GET /workspaces/{workspaceId}/shares <br />
            GET /sheets/{sheetId}/shares <br />
            GET /sights/{sightId}/shares <br />
            GET /reports/{reportId}/shares</para>
            </summary>
            <param name="objectId"> the object Id </param>
            <param name="paging"> the pagination request </param>
            <param name="shareScope"> when specified with a value of <see cref="F:Smartsheet.Api.Models.ShareScope.Workspace"/>, the response will contain both item-level shares (scope=‘ITEM’) and workspace-level shares (scope='WORKSPACE’). </param>
            <returns> the list of Share objects (note that an empty list will be returned if there is none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ShareResourcesImpl.GetShare(System.Int64,System.String)">
            <summary>
            <para>Get a Share.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            GET /workspaces/{workspaceId}/shares/{shareId}<br />
            GET /sheets/{sheetId}/shares/{shareId}<br />
            GET /sights/{sightId}/shares/{shareId}<br />
            GET /reports/{reportId}/shares/{shareId}</para>
            </summary>
            <param name="objectId"> the ID of the object to share </param>
            <param name="shareId"> the ID of the share instance </param>
            <returns> the share (note that if there is no such resource, this method will throw ResourceNotFoundException
            rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ShareResourcesImpl.ShareTo(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Share},System.Nullable{System.Boolean})">
            <summary>
            <para>Shares a Sheet with the specified Users and Groups.</para>
            
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /workspaces/{workspaceId}/shares<br />
            POST /sheets/{sheetId}/shares<br />
            POST /sights/{sightsId}/shares<br />
            POST /reports/{reportId}/shares</para>
            </summary>
            <param name="objectId"> the Id of the object </param>
            <param name="shares"> the share objects </param>
            <param name="sendEmail">(optional): Either true or false to indicate whether or not
            to notify the user by email. Default is false.</param>
            <returns> the created share </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ShareResourcesImpl.UpdateShare(System.Int64,Smartsheet.Api.Models.Share)">
            <summary>
            <para>Updates the access level of a User or Group for the specified Object.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            PUT /workspaces/{workspaceId}/shares/{shareId}<br />
            PUT /sheets/{sheetId}/shares/{shareId}<br />
            PUT /sights/{sightId}/shares/{shareId}<br />
            PUT /reports/{reportId}/shares/{shareId}</para>
            </summary>
            <param name="objectId"> the ID of the object to share </param>
            <param name="share"> the share </param>
            <returns> the updated share (note that if there is no such resource, this method will throw
             ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.ShareResourcesImpl.DeleteShare(System.Int64,System.String)">
            <summary>
            <para>Delete a share.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            DELETE /workspaces/{workspaceId}/shares/{shareId}<br />
            DELETE /sheets/{sheetId}/shares/{shareId}<br />
            DELETE /sight/{sightId}/shares/{shareId}<br />
            DELETE /reports/{reportId}/shares/{shareId}</para>
            </summary>
            <param name="objectId"> the ID of the object to share </param>
            <param name="shareId"> the ID of the user to whom the object is shared </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.SheetAttachmentResourcesImpl">
            <summary>
            This is the implementation of the SheetAttachmentResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetAttachmentResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetAttachmentResourcesImpl.AttachFile(System.Int64,System.String,System.String)">
            <summary>
            <para>Attaches a file to the Sheet.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /sheets/{sheetId}/attachments</para>
            </summary>
            <param name="file">the file path</param>
            <param name="fileType">the file type</param>
            <param name="sheetId">the sheet Id</param>
            <returns> the Attachment object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetAttachmentResourcesImpl.AttachFile(System.String,System.String,System.String)">
            <summary>
            Attach file.
            </summary>
            <param name="path"> the url path </param>
            <param name="file"> the file </param>
            <param name="contentType"> the content Type </param>
            <returns> the attachment </returns>
            <exception cref="T:System.IO.FileNotFoundException"> the file not found exception </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the Smartsheet exception </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.SheetColumnResourcesImpl">
            <summary>
            This is the implementation of the SheetColumnResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetColumnResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetColumnResourcesImpl.ListColumns(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.ColumnInclusion},Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Columns belonging to the Sheet specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/columns</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="include">elements to include in response</param>
            <param name="paging">the paging</param>
            <returns> the list of Columns (note that an empty list will be returned if there is none) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetColumnResourcesImpl.AddColumns(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Column})">
            <summary>
            <para>Inserts one or more columns into the Sheet specified in the URL.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/Columns</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="columns"> the column object(s) </param>
            <returns> the created column </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetColumnResourcesImpl.DeleteColumn(System.Int64,System.Int64)">
            <summary>
            <para>Deletes the Column specified in the URL.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/columns/{columnId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="columnId"> the column object </param>
            <returns> the created column </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetColumnResourcesImpl.GetColumn(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.ColumnInclusion})">
            <summary>
            <para>Gets the Column specified in the URL.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/columns/{columnId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="columnId"> the columnId </param>
            <param name="include"> elements to include in response </param>
            <returns> the created column </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetColumnResourcesImpl.UpdateColumn(System.Int64,Smartsheet.Api.Models.Column)">
            <summary>
            <para>Updates properties of the column, moves the column, and/or renames the column.</para>
            <para>You cannot change the type of a Primary column.</para>
            <para>While dependencies are enabled on a sheet, you can’t change the type of any special calendar/Gantt columns.</para>        
            <para>If the column type is changed, all cells in the column will be converted to the new column type.</para>
            <para>Type is optional when moving or renaming, but required when changing type or dropdown values.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/columns/{columnId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="column"> column object to update </param>
            <returns> the updated column </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.SheetCommentResourcesImpl">
            <summary>
            This is the implementation of the SheetCommentResources.
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetCommentResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetCommentResourcesImpl.DeleteComment(System.Int64,System.Int64)">
            <summary>
            <para>Deletes the Comment specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/comments/{commentId}</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="commentId">the commentId</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetCommentResourcesImpl.GetComment(System.Int64,System.Int64)">
            <summary>
            <para>Gets the Comment specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/comments/{commentId}</para>
            </summary>
            <param name="sheetId">the id of the sheet</param>
            <param name="commentId">the id the of the comment</param>
            <returns> the comment object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetCommentResourcesImpl.AttachmentResources">
            <summary>
            Return the CommentAttachmentResources object that provides access to Attachment resources associated with Comment resources.
            </summary>
            <returns> the Attachment resources </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.SheetDiscussionResourcesImpl">
            <summary>
            This is the implementation of the SheetDiscussionResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetDiscussionResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
            <exception cref="T:System.InvalidOperationException">if any argument is null</exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetDiscussionResourcesImpl.CreateDiscussion(System.Int64,Smartsheet.Api.Models.Discussion)">
            <summary>
            <para>Creates a new Discussion on a Sheet.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /sheets/{sheetId}/discussions</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="discussion"> the discussion to add </param>
            <returns> the created discussion </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetDiscussionResourcesImpl.CreateDiscussionWithAttachment(System.Int64,Smartsheet.Api.Models.Discussion,System.String,System.String)">
            <summary>
            <para>Creates a new Discussion attached with an Attachment on a Sheet.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /sheets/{sheetId}/discussions</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="discussion"> the discussion to add </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type, can be null </param>
            <returns> the created discussion </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetDiscussionResourcesImpl.DeleteDiscussion(System.Int64,System.Int64)">
            <summary>
            <para>Delete a discussion</para>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/discussions/{discussionId}</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="discussionId"> the discussionId</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetDiscussionResourcesImpl.ListDiscussions(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.DiscussionInclusion},Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Discussions associated with the specified Sheet (both sheet-level discussions and row-level discussions).</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/discussions</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="include">elements to include in response</param>
            <param name="paging">the pagination</param>
            <returns> list of all Discussions </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetDiscussionResourcesImpl.GetDiscussion(System.Int64,System.Int64)">
            <summary>
            <para>Gets the Discussion specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/discussions/{discussionId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="discussionId"> the ID of the discussion </param>
            <returns> the discussion </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetDiscussionResourcesImpl.AttachmentResources">
            <summary>
            <para>Return the DiscussionAttachmentResources object that provides access
            To Attachment resources associated with Discussion resources.</para>
            </summary>
            <returns> the attachment resources object </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetDiscussionResourcesImpl.CommentResources">
            <summary>
            <para>Return the DiscussionCommentResources object that provides access
            To Comment resources associated with Discussion resources.</para>
            </summary>
            <returns> the comment resources object </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.SheetResourcesImpl">
            <summary>
            This is the implementation of the SheetResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SheetResourcesImpl.BUFFER_SIZE">
            <summary>
            The Constant BUFFER_SIZE. </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SheetResourcesImpl.shares">
            <summary>
            Represents the ShareResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SheetResourcesImpl.rows">
            <summary>
            Represents the SheetRowResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SheetResourcesImpl.columns">
            <summary>
            Represents the SheetColumnResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SheetResourcesImpl.attachments">
            <summary>
            Represents the AssociatedAttachmentResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SheetResourcesImpl.discussions">
            <summary>
            Represents the AssociatedDiscussionResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SheetResourcesImpl.comments">
            <summary>
            Represents the AssociatedDiscussionResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SheetResourcesImpl.updateRequests">
            <summary>
            Represents the associated SheetUpdateRequestResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SheetResourcesImpl.filters">
            <summary>
            Represents the associated SheetFilterResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SheetResourcesImpl.automationRules">
            <summary>
            Represents the associated SheetAutomationRulesResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SheetResourcesImpl.crossSheetReferences">
            <summary>
            Represents the associated SheetCrossSheetReferenceResources.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.ListSheets(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetInclusion},Smartsheet.Api.Models.PaginationParameters,System.Nullable{System.DateTime})">
            <summary>
            <para>Gets the list of all sheets that the user has access to, in alphabetical order, by name.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /Sheets</para>
            </summary>
            <returns> A list of all sheets (note that an empty list will be returned if there are none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.ListOrganizationSheets(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Lists all sheets in the organization.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /users/sheets</para>
            </summary>
            <returns> the list of all sheets (note that an empty list will be returned if there are none) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.GetSheet(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelExclusion},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            <para>Gets a sheet.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="includes"> used to specify the optional objects to include. </param>
            <param name="excludes"> used to specify the optional objects to include. </param>
            <param name="rowIds"> used to specify the optional objects to include. </param>
            <param name="rowNumbers"> used to specify the optional objects to include. </param>
            <param name="columnIds"> used to specify the optional objects to include. </param>
            <param name="pageSize"> used to specify the optional objects to include. </param>
            <param name="page"> used to specify the optional objects to include. </param>
            <returns> the sheet resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.GetSheet(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelExclusion},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            <para>Gets a sheet.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="includes"> used to specify the optional objects to include. </param>
            <param name="excludes"> used to specify the optional objects to include. </param>
            <param name="rowIds"> used to specify the optional objects to include. </param>
            <param name="rowNumbers"> used to specify the optional objects to include. </param>
            <param name="columnIds"> used to specify the optional objects to include. </param>
            <param name="pageSize"> used to specify the optional objects to include. </param>
            <param name="page"> used to specify the optional objects to include. </param>
            <param name="ifVersionAfter"> only fetch sheet if more recent version available </param>
            <returns> the sheet resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.GetSheet(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelExclusion},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            <para>Gets a sheet.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="includes"> used to specify the optional objects to include. </param>
            <param name="excludes"> used to specify the optional objects to include. </param>
            <param name="rowIds"> used to specify the optional objects to include. </param>
            <param name="rowNumbers"> used to specify the optional objects to include. </param>
            <param name="columnIds"> used to specify the optional objects to include. </param>
            <param name="pageSize"> used to specify the optional objects to include. </param>
            <param name="page"> used to specify the optional objects to include. </param>
            <param name="ifVersionAfter"> only fetch sheet if more recent version available </param>
            <returns> the sheet resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.GetSheetAsExcel(System.Int64,System.IO.BinaryWriter)">
            <summary>
            <para>Gets a sheet as an Excel file.</para>
            
            <para>Mirrors to the following Smartsheet REST API method:<br />
            GET /sheets/{sheetId} with "application/vnd.ms-excel" Accept HTTP header</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="outputStream"> the output stream to which the Excel file will be written. </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.GetSheetAsPDF(System.Int64,System.IO.BinaryWriter,System.Nullable{Smartsheet.Api.Models.PaperSize})">
            <summary>
            <para>Gets a sheet as a PDF file.</para>
            
            <para>Mirrors to the following Smartsheet REST API method:<br />
            GET /sheets/{sheetId} with "application/pdf" Accept HTTP header</para>
            </summary>
            <param name="sheetId">the Id of the sheet</param>
            <param name="outputStream">the output stream to which the PDF file will be written.</param>
            <param name="paperSize">the paper size</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.GetSheetAsCSV(System.Int64,System.IO.BinaryWriter)">
            <summary>
            <para>Gets a sheet as a CSV file.</para>
            
            <para>Mirrors to the following Smartsheet REST API method:<br />
            GET /sheets/{sheetId} with "text/csv" Accept HTTP header</para>
            </summary>
            <param name="sheetId">the Id of the sheet</param>
            <param name="outputStream"> the output stream to which the CSV file will be written. </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.CreateSheet(Smartsheet.Api.Models.Sheet)">
            <summary>
            <para>Creates a sheet in default "Sheets" collection.</para>
            
            <para>Mirrors to the following Smartsheet REST API method:<br />
             POST /Sheets</para>
            </summary>
            <param name="sheet"> the sheet to create </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.CreateSheetFromTemplate(Smartsheet.Api.Models.Sheet,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.TemplateInclusion})">
            <summary>
            <para>Creates a sheet (from existing sheet or template) in default "Sheets" collection.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /Sheets</para>
            </summary>
            <param name="sheet"> the sheet to create </param>
            <param name="includes"> used to specify the optional objects to include. </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.DeleteSheet(System.Int64)">
            <summary>
            <para>Deletes a sheet.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.UpdateSheet(Smartsheet.Api.Models.Sheet)">
            <summary>
            <para>Updates a sheet.</para>
            <para>to modify sheet contents, see Add Rows, Update Rows, and Update Column.</para>
            <para>This operation can be used to update an individual users sheet settings. 
            If the request body contains only the userSettings attribute, 
            this operation may be performed even if the user only has read-only access to the sheet 
            (i.e., the user has viewer permissions, or the sheet is read-only).</para>
            <para>Mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}</para>
            </summary>
            <param name="sheet"> the sheet to update </param>
            <returns> the updated sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.GetSheetVersion(System.Int64)">
            <summary>
            <para>Gets the sheet version without loading the entire sheet.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/version</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <returns> the sheet version (note that if there is no such resource, this method will throw
            ResourceNotFoundException) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.SendSheet(System.Int64,Smartsheet.Api.Models.SheetEmail)">
            <summary>
            <para>Sends a sheet as a PDF attachment via email to the designated recipients.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/emails</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="email"> the email </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.SendUpdateRequest(System.Int64,Smartsheet.Api.Models.MultiRowEmail)">
            <summary>
            <para>Creates an update request for the specified rows within the sheet. An email notification
            (containing a link to the update request) will be asynchronously sent to the specified recipients.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/updaterequests</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="email"> the email </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.CopySheet(System.Int64,Smartsheet.Api.Models.ContainerDestination,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetCopyInclusion})">
            <summary>
            <para>Creates a copy of the specified sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method:<br />
            POST /sheets/{sheetId}/copy</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="destination"> the destination to copy to </param>
            <param name="include"> the elements to copy. Note: Cell history will not be copied, regardless of which include parameter values are specified.</param>
            <returns> the created folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.MoveSheet(System.Int64,Smartsheet.Api.Models.ContainerDestination)">
            <summary>
            <para>Moves the specified sheet to a new location.</para>
            <para>Mirrors to the following Smartsheet REST API method:<br />
            POST /sheets/{sheetId}/move</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="destination"> the destination to copy to </param>
            <returns> the moved sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.GetPublishStatus(System.Int64)">
            <summary>
            <para>Get the status of the publish settings of the sheet, including the URLs of any enabled publishings.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/publish</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <returns> the publish status (note that if there is no such resource, this method will throw ResourceNotFoundException rather than returning null) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.UpdatePublishStatus(System.Int64,Smartsheet.Api.Models.SheetPublish)">
            <summary>
            <para>Sets the publish status of a sheet and returns the new status, including the URLs of any enabled publishings.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/publish</para>
            </summary>
            <param name="id"> the sheet Id </param>
            <param name="publish"> the SheetPublish object limited. </param>
            <returns> the updated SheetPublish object (note that if there is no such resource, this method will throw a 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.SortSheet(System.Int64,Smartsheet.Api.Models.SortSpecifier)">
            <summary>
            <para>Sorts a sheet according to the sort criteria.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/sort</para>
            </summary>
            <param name="id"> the sheet Id </param>
            <param name="sortSpecifier"> the sort criteria </param>
            <returns> the sheet (note that if there is no such resource, this method will throw a ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.SortSheet(System.Int64,Smartsheet.Api.Models.SortSpecifier,System.Nullable{System.Int32})">
            <summary>
            <para>Sorts a sheet according to the sort criteria.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/sort</para>
            </summary>
            <param name="id"> the sheet Id </param>
            <param name="sortSpecifier"> the sort criteria </param>
            <param name="level"> compatibility level </param>
            <returns> the sheet (note that if there is no such resource, this method will throw a ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.ImportCsvSheet(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet (from CSV). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/import</para>
            </summary>
            <param name="file"> path to the CSV file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.ImportXlsSheet(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet (from XLSX). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/import</para>
            </summary>
            <param name="file"> path to the XLSX file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetResourcesImpl.ShareResources">
            <summary>
            Returns the ShareResources object that provides access to share resources associated with sheet resources.
            </summary>
            <returns> the ShareResources object </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetResourcesImpl.RowResources">
            <summary>
            Returns the SheetRowResources object that provides access to row resources associated with sheet resources.
            </summary>
            <returns> the sheet row resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetResourcesImpl.ColumnResources">
            <summary>
            Returns the SheetColumnResources object that provides access to column resources associated with sheet resources.
            </summary>
            <returns> the sheet column resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetResourcesImpl.AttachmentResources">
            <summary>
            Returns the SheetAttachmentResources object that provides access to attachment resources associated with
            sheet resources.
            </summary>
            <returns> the associated attachment resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetResourcesImpl.DiscussionResources">
            <summary>
            Returns the SheetDiscussionResources object that provides access to discussion resources associated with
            sheet resources.
            </summary>
            <returns> the associated discussion resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetResourcesImpl.CommentResources">
            <summary>
            Returns the SheetCommentResources object that provides access to discussion resources associated with
            sheet resources.
            </summary>
            <returns> the associated comment resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetResourcesImpl.UpdateRequestResources">
            <summary>
            Returns the UpdateRequestResources object that provides access to update request resources associated with
            sheet resources.
            </summary>
            <returns> the associated update request resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetResourcesImpl.FilterResources">
            <summary>
            Returns the FilterResources object that provides access to filter resources associated with sheet resources.
            </summary>
            <returns> the associated filter resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetResourcesImpl.AutomationRuleResources">
            <summary>
            Returns the AutomationRuleResources object that provides access to automation rule resources associated 
            with sheet resources.
            </summary>
            <returns> the associated automation rule resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetResourcesImpl.CrossSheetReferenceResources">
            <summary>
            Returns the CrossSheetReferenceResources object that provides access to cross-sheet reference resources associated 
            with sheet resources.
            </summary>
            <returns> the associated cross-sheet reference resources </returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.GetSheetAsFile(System.Int64,System.Nullable{Smartsheet.Api.Models.PaperSize},System.IO.BinaryWriter,System.String)">
            <summary>
            <para>Gets a sheet as a file.</para>
            
            <para>Mirrors to the following Smartsheet REST API method:<br />
            GET /sheets/{sheetId} with "application/pdf", "application/vnd.ms-excel", or "text/csv" as Accept HTTP header</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="paperSize"> the size of the PDF file </param>
            <param name="outputStream"> the output stream to which the CSV file will be written. </param>
            <param name="contentType"> the Accept header </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.ImportSheet(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Private routine to import a sheet of contentType
            </summary>
            <param name="path"></param>
            <param name="file"></param>
            <param name="sheetName"></param>
            <param name="headerRowIndex"></param>
            <param name="primaryColumnIndex"></param>
            <param name="contentType"></param>
            <returns> the created sheet </returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetResourcesImpl.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copy stream.
            </summary>
            <param name="input"> the input </param>
            <param name="output"> the output </param>
            <exception cref="T:System.IO.IOException"> Signals that an I/O exception has occurred. </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.SheetRowResourcesImpl">
            <summary>
            This is the implementation of the SheetRowResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetRowResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Parameters: - Smartsheet : the SmartsheetImpl
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetRowResourcesImpl.AddRows(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Row})">
            <summary>
            <para>Inserts one or more rows into the Sheet specified in the URL.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows</para>
            <remarks>If multiple rows are specified in the request, all rows must be inserted at the same location 
            (i.e. the toTop, toBottom, parentId, siblingId, and above attributes must be the same for all rows in the request).</remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rows"> one or more rows </param>
            <returns> the list of created Rows </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetRowResourcesImpl.AddRowsAllowPartialSuccess(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Row})">
            <summary>
            <para>Inserts one or more rows into the Sheet specified in the URL with allowPartialSuccess.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows?allowPartialSuccess=true</para>
            <remarks>If multiple rows are specified in the request, all rows must be inserted at the same location 
            (i.e. the toTop, toBottom, parentId, siblingId, and above attributes must be the same for all rows in the request).</remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rows"> one or more rows </param>
            <returns> the list of created Rows </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetRowResourcesImpl.GetRow(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.RowInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.RowExclusion})">
            <summary>
            <para>Gets the Row specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/rows/{rowId}</para>
            </summary>
            <param name="include"> comma-separated list of elements to include in the response. </param>
            <param name="exclude"> a comma-separated list of optional objects to exclude in the response. </param>
            <param name="sheetId"> the sheetId </param>
            <param name="rowId"> the rowId </param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetRowResourcesImpl.CopyRowsToAnotherSheet(System.Int64,Smartsheet.Api.Models.CopyOrMoveRowDirective,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.CopyRowInclusion},System.Nullable{System.Boolean})">
            <summary>
            <para>Copies Row(s) from the Sheet specified in the URL to (the bottom of) another sheet.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows/copy</para>
            <remarks>Up to 5,000 row IDs can be specified in the request, 
            but if the total number of rows in the destination sheet after the copy exceeds the Smartsheet row limit, 
            an error response will be returned.</remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="include"> objects to include </param>
            <param name="ignoreRowsNotFound"> ignoreRowsNotFound </param>
            <param name="directive"> directive </param>
            <returns> CopyOrMoveRowResult object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetRowResourcesImpl.DeleteRows(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            <para>Deletes one or more row(s) from the Sheet</para>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/rows?ids={rowId1},{rowId2},{rowId3}...</para>
            <remarks>This operation will delete ALL child Rows of the specified Row(s).</remarks>
            </summary>
            <param name="sheetId"> The sheet ID </param>
            <param name="ids"> The list of row IDs </param>
            <param name="ignoreRowsNotFound"> If set to false and any of the specified Row IDs are not found, no rows will be deleted, and the “not found” error will be returned.</param>
            <returns>Row IDs corresponding to all rows that were successfully deleted (including any child rows of rows specified in the URL).</returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetRowResourcesImpl.MoveRowsToAnotherSheet(System.Int64,Smartsheet.Api.Models.CopyOrMoveRowDirective,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.MoveRowInclusion},System.Nullable{System.Boolean})">
            <summary>
            <para>Moves Row(s) from the Sheet specified in the URL to (the bottom of) another sheet.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows/copy</para>
            <remarks><para>Up to 5,000 row IDs can be specified in the request, 
            but if the total number of rows in the destination sheet after the copy exceeds the Smartsheet row limit, 
            an error response will be returned.</para>
            <para>Any child rows of the rows specified in the request will also be moved. 
            Parent-child relationships amongst rows will be preserved within the destination sheet.</para></remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="ignoreRowsNotFound"> ignoreRowsNotFound </param>
            <param name="directive"> directive </param>
            <param name="include">the elements to include.</param>
            <returns> CopyOrMoveRowResult object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetRowResourcesImpl.SendRows(System.Int64,Smartsheet.Api.Models.MultiRowEmail)">
            <summary>
            <para>Sends one or more Rows via email.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows/emails</para>
            </summary>
            <param name="sheetId"> The sheet Id </param>
            <param name="email"> The email. The columns included for each row in the email will be populated according to the following rules:
            <list type="bullet">
            <item><description>
            If the columnIds attribute of the MultiRowEmail object is specified as an array of column IDs, those specific columns will be included.
            </description></item>
            <item><description>
            If the columnIds attribute of the MultiRowEmail object is omitted, all columns except hidden columns shall be included.
            </description></item>
            <item><description>
            If the columnIds attribute of the MultiRowEmail object is specified as empty, no columns shall be included.
            (Note: In this case, either includeAttachments:true or includeDiscussions:true must be specified.)
            </description></item>
            </list>
            </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetRowResourcesImpl.UpdateRows(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Row})">
            <summary>
            <para>Updates cell values in the specified row(s), expands/collapses the specified row(s), 
            and/or modifies the position of specified rows (including indenting/outdenting).</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/rows</para>
            <remarks>If a row’s position is updated, all child rows are moved with the row.</remarks>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="rows"> the list of rows to update </param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.SheetRowResourcesImpl.UpdateRowsAllowPartialSuccess(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Row})">
            <summary>
            <para>Updates cell values in the specified row(s), expands/collapses the specified row(s), 
            and/or modifies the position of specified rows (including indenting/outdenting).</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/rows?allowPartialSuccess=true</para>
            <remarks>If a row’s position is updated, all child rows are moved with the row.</remarks>
            </summary>
            <param name="sheetId">the sheetId</param>
            <param name="rows">the list of rows to update</param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetRowResourcesImpl.AttachmentResources">
            <summary>
            Gets the RowAttachmentResources object that provides access to Attachment resources associated with
            Row resources.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetRowResourcesImpl.DiscussionResources">
            <summary>
            Gets the RowDiscussionResources object that provides access to Discussion resources associated with
            Row resources.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Internal.SheetRowResourcesImpl.CellResources">
            <summary>
            Gets the RowColumnResources object that provides access to Cell resources associated with
            Row resources.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Internal.SmartsheetImpl">
            <summary>
            This is the implementation of Smartsheet interface.
            
            Thread Safety: This class is thread safe because all its mutable fields are safe-guarded using AtomicReference to
            ensure atomic modifications, and also the underlying HttpClient and JsonSerializer interfaces are thread safe.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.httpClient">
            <summary>
            Represents the HttpClient.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.jsonSerializer">
            <summary>
            Represents the JsonSerializer.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.baseURI">
            <summary>
            Represents the base URI of the Smartsheet REST API.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.accessToken">
            <summary>
            Represents the AtomicReference for the access token.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and can be set via corresponding setter, therefore effectively the access token can be updated in the
            SmartsheetImpl in thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.assumedUser">
            <summary>
            Represents the AtomicReference for assumed user email.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and can be set via corresponding setter, therefore effectively the assumed user can be updated in the
            SmartsheetImpl in thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.changeAgent">
            <summary>
            Represents the AtomicReference for the change agent.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and can be set via corresponding setter, therefore effectively the assumed user can be updated in the
            SmartsheetImpl in thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.home">
            <summary>
            Represents the AtomicReference to HomeResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.workspaces">
            <summary>
            Represents the AtomicReference to WorkspaceResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.folders">
            <summary>
            Represents the AtomicReference to FolderResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null at the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.templates">
            <summary>
            Represents the AtomicReference to TemplateResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null at the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.reports">
            <summary>
            Represents the AtomicReference to ReportResources.
            
            It will be initialized in constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.sheets">
            <summary>
            Represents the AtomicReference to SheetResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.sights">
            <summary>
            Represents the AtomicReference to SightResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.webhooks">
            <summary>
            Represents the AtomicReference to WebhookResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.users">
            <summary>
            Represents the AtomicReference to UserResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.search">
            <summary>
            Represents the AtomicReference to SearchResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.serverInfo">
            <summary>
            Represents the AtomicReference to ServerInfoResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.groups">
            <summary>
            Represents the AtomicReference to GroupResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.favorites">
            <summary>
            Represents the AtomicReference to FavoriteResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.tokens">
            <summary>
            Represents the AtomicReference to TokenResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.contacts">
            <summary>
            Represents the AtomicReference to ContactResources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and will be initialized to non-null the first time it is accessed via corresponding getter, therefore
            effectively the underlying value is lazily created in a thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.imageUrls">
            <summary>
            Represents the AtomicReference for image Urls.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and can be set via corresponding setter, therefore effectively the assumed user can be updated in the
            SmartsheetImpl in thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.passthrough">
            <summary>
            Represents the AtomicReference for passthrough resources.
            
            It will be initialized in the constructor and will not change afterwards. The underlying value will be initially set
            as null, and can be set via corresponding setter, therefore effectively the assumed user can be updated in the
            SmartsheetImpl in thread safe manner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.SmartsheetImpl.logger">
            <summary>
            static logger 
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.SmartsheetImpl.#ctor(System.String,System.String,Smartsheet.Api.Internal.Http.HttpClient,Smartsheet.Api.Internal.Json.JsonSerializer)">
            <summary>
            Creates an instance with given server URI, HttpClient (optional), and JsonSerializer (optional)
            
            Exceptions: - IllegalArgumentException : if serverURI/Version/AccessToken is null/empty
            </summary>
            <param name="baseURI"> the server uri </param>
            <param name="accessToken"> the access token </param>
            <param name="httpClient"> the HTTP client (optional) </param>
            <param name="jsonSerializer"> the JSON serializer (optional) </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.SmartsheetImpl.Finalize">
            <summary>
            Finalizes the object, this method is overridden to close the HttpClient.
            </summary>
            <exception cref="T:System.IO.IOException"> Signals that an I/O exception has occurred. </exception>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.HttpClient">
            <summary>
            Getter of corresponding field.
            </summary>
            <returns> corresponding field. </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.JsonSerializer">
            <summary>
            Getter of corresponding field.
            </summary>
            <returns> corresponding field </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.BaseURI">
            <summary>
            Getter of corresponding field.
            
            Returns: corresponding field.
            </summary>
            <returns> the base uri </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.AccessToken">
            <summary>
            Return the access token
            </summary>
            <returns> the access token </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.AssumedUser">
            <summary>
            Return the assumed user.
            </summary>
            <returns> the assumed user </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.ChangeAgent">
            <summary>
            Return the change agent
            </summary>
            <returns> the change agent </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.UserAgent">
            <summary>
            Set the RestSharp default user agent
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.MaxRetryTimeout">
            <summary>
            Set the maximum retry timeout
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.HomeResources">
            <summary>
            Returns the HomeResources instance that provides access to home resources.
            </summary>
            <returns> the home resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.WorkspaceResources">
            <summary>
            Returns the WorkspaceResources instance that provides access to workspace resources.
            </summary>
            <returns> the workspace resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.FolderResources">
            <summary>
            Returns the FolderResources instance that provides access to folder resources.
            </summary>
            <returns> the folder resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.TemplateResources">
            <summary>
            Returns the TemplateResources instance that provides access to template resources.
            </summary>
            <returns> the template resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.ReportResources">
            <summary>
            Returns the ReportResources instance that provides access to report resources.
            </summary>
            <returns> the report resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.SheetResources">
            <summary>
            Returns the SheetResources instance that provides access to sheet resources.
            </summary>
            <returns> the sheet resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.SightResources">
            <summary>
            Returns the SightResources instance that provides access to Sight resources.
            </summary>
            <returns> the Sight resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.WebhookResources">
            <summary>
            Returns the WebhookResources instance that provides access to webhook resources.
            </summary>
            <returns> the webhook resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.UserResources">
            <summary>
            Returns the UserResources instance that provides access to user resources.
            </summary>
            <returns> the user resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.SearchResources">
            <summary>
            Returns the SearchResources instance that provides access to searching resources.
            </summary>
            <returns> the search resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.ServerInfoResources">
            <summary>
            Returns the ServerInfoResources instance that provides access to server information resources.
            </summary>
            <returns> the server information resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.GroupResources">
            <summary>
            Returns the GroupResources instance that provides access to group resources.
            </summary>
            <returns> the group resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.FavoriteResources">
            <summary>
            Returns the FavoriteResources instance that provides access to favorite resources.
            </summary>
            <returns> the favorite resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.TokenResources">
            <summary>
            Returns the TokenResources instance that provides access to token resources.
            </summary>
            <returns> the token resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.ContactResources">
            <summary>
            Returns the ContactResources instance that provides access to contacts resources.
            </summary>
            <returns> the contacts resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.ImageUrlResources">
            <summary>
            Returns the ImageUrlResources instance that provides access to image URL resources.
            </summary>
            <returns> the image URL resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.SmartsheetImpl.PassthroughResources">
            <summary>
            Returns the PassthroughResources instance that provides access to passthrough resources.
            </summary>
            <returns> the passthrough resources </returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.SmartsheetImpl.GenerateUserAgent(System.String)">
            <summary>
            Compose a User-Agent string that represents this version of the SDK (along with platform info)
            </summary>
            <param name="userAgent"></param>
            <returns> a User-Agent string </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.TemplateResourcesImpl">
            <summary>
            This is the implementation of the TemplateResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.TemplateResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.TemplateResourcesImpl.ListPublicTemplates(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets the list of public Templates to which the user has access.</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            <para>It mirrors to the following Smartsheet REST API method: GET /templates/public</para>
            </summary>
            <returns> the list of Templates (note that an empty list will be returned if there are none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.TemplateResourcesImpl.ListUserCreatedTemplates(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets the list of user-created Templates to which the user has access.</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            <para>It mirrors to the following Smartsheet REST API method: GET /templates</para>
            </summary>
            <returns> the list of Templates (note that an empty list will be returned if there are none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.UserResourcesImpl">
            <summary>
            This is the implementation of the UserResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.UserResourcesImpl.smartsheet">
            <summary>
            Represents the SmartsheetImpl.
            
            It will be initialized in the constructor and will not change afterwards.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.ListUsers(System.Collections.Generic.IEnumerable{System.String},Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Lists all users.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /Users</para>
            </summary>
            <param name="emails">list of emails</param>
            <param name="paging"> the pagination</param>
            <returns> the list of all users </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.AddUser(Smartsheet.Api.Models.User,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            <para>Adds a user to the organization</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /Users</para>
            </summary>
            <param name="user"> the user </param>
            <param name="sendEmail"> indicates whether to send a welcome email. Defaults to false. </param>
            <param name="allowInviteAccountAdmin">if user is an admin in another organization, setting to true will invite their entire organization.</param>
            <returns> the created user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.GetCurrentUser">
            <summary>
            <para>Gets the current user.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /users/me</para>
            </summary>
            <returns> the current user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.GetCurrentUser(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.UserInclusion})">
            <summary>
            <para>Get the current user.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /users/me</para>
            </summary>
            <param name="includes">used to specify the optional objects to include.</param>
            <returns> the current user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.GetUser(System.Int64)">
            <summary>
            <para>Gets the user.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /users/{userId}</para>
            </summary>
            <param name="userId"> the user Id </param>
            <returns> the user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.UpdateUser(Smartsheet.Api.Models.User)">
            <summary>
            <para>Updates a user.</para>
            <para>Mirrors to the following Smartsheet REST API method: PUT /users/{userId}</para>
            </summary>
            <param name="user"> the user to update </param>
            <returns> the updated user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.RemoveUser(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            <para>Removes a user from an organization. User is transitioned to a free collaborator with read-only access to owned sheets (unless those are optionally transferred to another user).</para>
            <remarks>This operation is only available to system administrators.</remarks>
            <para>Mirrors to the following Smartsheet REST API method: DELETE /user{Id}</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="transferTo">(required if user owns groups): The Id of the user to transfer ownership to. 
            If the user being deleted owns groups, they will be transferred to this user. 
            If the user owns sheets, and transferSheets is true, then the deleted user’s sheets will be transferred to this user.</param>
            <param name="transferSheets">If true, and transferTo is specified, the deleted user’s sheets will be transferred. Else, sheets will not be transferred. Defaults to false.</param>
            <param name="removeFromSharing">Set to true to remove the user from sharing for all sheets/workspaces in the organization. If not specified, user will not be removed from sharing.</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.ListAlternateEmails(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Lists all user alternate emails.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /users/{userId}/alternateemails</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="pagination"> the pagination</param>
            <returns> the list of all AlternateEmails </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.GetAlternateEmail(System.Int64,System.Int64)">
            <summary>
            <para>Gets alternate email.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /users/{userId}/alternateemails/{alternateEmailId}</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="altEmailId"> the alternate email Id</param>
            <returns>
            Return the AlternateEmail (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null) 
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.AddAlternateEmail(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.AlternateEmail})">
            <summary>
            <para>Adds alternate emails.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /users/{userId}/alternateemails</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="altEmails"> list of AlternateEmails</param>
            <returns>
            Return the list of AlternateEmails (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null) 
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.DeleteAlternateEmail(System.Int64,System.Int64)">
            <summary>
            <para>Deletes alternate email.</para>
            <para>Mirrors to the following Smartsheet REST API method: DELETE /users/{userId}/alternateemails/{alternateEmailId}</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="altEmailId"> the alternate email Id</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.PromoteAlternateEmail(System.Int64,System.Int64)">
            <summary>
            <para>Promotes an alternate email to primary.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /users/{userId}/alternateemails/{alternateEmailId}/makeprimary</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="altEmailId"> the alternate email Id</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.AddProfileImage(System.Int64,System.String,System.String)">
            <summary>
            <para>Uploads a profile image for the specified user.</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="file"> path to the image file</param>
            <param name="fileType">fileType content type of the image file</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserResourcesImpl.AttachProfileImage(System.String,System.String,System.String)">
            <summary>
            Attaches file.
            </summary>
            <param name="path"> the url path </param>
            <param name="file"> the file </param>
            <param name="contentType"> the content Type </param>
            <returns> the attachment </returns>
            <exception cref="T:System.IO.FileNotFoundException"> the file not found exception </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> the Smartsheet exception </exception>
        </member>
        <member name="P:Smartsheet.Api.Internal.UserResourcesImpl.SheetResources">
            <summary>
            <para>Returns the UserSheetResources object that provides access to sheets resources associated with
            user resources.</para>
            </summary>
            <returns> the associated discussion resources </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.UserSheetResourcesImpl">
            <summary>
            This is the implementation of the UserResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserSheetResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is null
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.UserSheetResourcesImpl.ListOrgSheets(Smartsheet.Api.Models.PaginationParameters,System.Nullable{System.DateTime})">
            <summary>
            <para>List of all Sheets owned by the members of the account (organization).</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /users/sheets</para>
            </summary>
            <returns> the list of all Sheets owned by the members of the account (organization). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.Utility.Utility.ThrowIfNull(System.Object[])">
            Helper function that throws an IllegalArgumentException if one of the parameters is null.
            @param objects the paramters to 
        </member>
        <member name="T:Smartsheet.Api.Internal.Util.QueryUtil">
            <summary>
            Generates string queries.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.Util.QueryUtil.GenerateCommaSeparatedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            <para>
            Generates a string of camelCase words each separated by a comma.
            </para>
            <para>
            For example, an input array of {DISCUSSIONS, COLUMN_TYPE} would output a string of "discussions,columnType".
            </para>
            </summary>
            <typeparam name="T">The Type of the list</typeparam>
            <param name="include">the list of object</param>
            <returns>the comma separated list of words</returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.Util.QueryUtil.GenerateUrl(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Generates a url based on the baseUrl and parameters.
            </summary>
            <param name="baseUrl">the baseUrl</param>
            <param name="parameters">the parameters</param>
            <returns>the generated url</returns>
        </member>
        <member name="M:Smartsheet.Api.Internal.Util.QueryUtil.GenerateQueryString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Generates a query string.
            </summary>
            <param name="parameters">the map of query string keys and values</param>
            <returns>the qery string</returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.WorkspaceFolderResourcesImpl">
            <summary>
            This is the implementation of the WorkspaceFolderResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceFolderResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceFolderResourcesImpl.ListFolders(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>List Folders of a given workspace.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /workspaces/{workspaceId}/Folders</para>
            </summary>
            <param name="workspaceId">the workspace Id</param>
            <param name="paging">the pagination information</param>
            <returns>the list of Folders (note that an empty list will be returned if no child folder is found), limited to the following attributes:
            <list type="bullet">
            <item><description>id</description></item>
            <item><description>name</description></item>
            <item><description>permalink</description></item>
            </list>
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceFolderResourcesImpl.CreateFolder(System.Int64,Smartsheet.Api.Models.Folder)">
            <summary>
            <para>Create a folder in the workspace.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: POST /workspaces/{workspaceId}/Folders</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="folder"> the folder to create </param>
            <returns> the created folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.Internal.WorkspaceResourcesImpl">
            <summary>
            This is the implementation of the WorkspaceResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.WorkspaceResourcesImpl.folders">
            <summary>
            Represents the WorkspaceFolderResources.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.WorkspaceResourcesImpl.sheets">
            <summary>
            Represents the WorkspaceSheetResources.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Internal.WorkspaceResourcesImpl.shares">
            <summary>
            Represents the ShareResources.
            
            It will be initialized in constructor and will not change afterwards.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: 
              - IllegalArgumentException : if any argument is
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceResourcesImpl.ListWorkspaces(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>List all Workspaces.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /Workspaces</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <returns> the list of Workspaces (note that an empty list will be returned if there are none) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceResourcesImpl.GetWorkspace(System.Int64,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.WorkspaceInclusion})">
            <summary>
            <para>Gets the specified Workspace (and lists its contents).</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /workspaces/{workspaceid}</para>
            <remarks><para>By default, this operation only returns the top-level items in the Workspace. To load all of the contents, 
            including nested Folders, include the loadAll query string parameter with a value of true.</para>
            <para>If no Folders, Sheets, Reports, or Templates are present in the Workspace, the corresponding attribute 
            (e.g., "folders", "sheets") will not be present in the response object.</para></remarks>
            </summary>
            <param name="workspaceId">the workspace id</param>
            <param name="loadAll"> Defaults to false. If true, loads all of the contents, including nested Folders. </param>
            <param name="include"> When specified with a value of "source", response will include the source for any sheet that was created from another sheet or template</param>
            <returns> the workspace (note that if there is no such resource, this method will throw ResourceNotFoundException
            rather than returning null) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceResourcesImpl.CreateWorkspace(Smartsheet.Api.Models.Workspace)">
            <summary>
            <para>Create a workspace.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /Workspaces</para>
            </summary>
            <param name="workspace"> the workspace to create </param>
            <returns> the created workspace </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceResourcesImpl.UpdateWorkspace(Smartsheet.Api.Models.Workspace)">
            <summary>
            <para>Update a workspace.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /workspaces/{workspaceId}</para>
            </summary>
            <param name="workspace"> the workspace to update </param>
            <returns> the updated workspace (note that if there is no such resource, this method will throw
            ResourceNotFoundException rather than returning null) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceResourcesImpl.DeleteWorkspace(System.Int64)">
            <summary>
            <para>Deletes the specified Workspace (and its contents).</para>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /workspaces{workspaceId}</para>
            </summary>
            <param name="workspaceId"> the Id of the workspace </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceResourcesImpl.CopyWorkspace(System.Int64,Smartsheet.Api.Models.ContainerDestination,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.WorkspaceCopyInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.WorkspaceRemapExclusion})">
            <summary>
            <para>Creates a copy of the specified Workspace.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /workspaces/{workspaceId}/copy</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="destination"> the destination to copy to </param>
            <param name="include"> the elements to copy. Note: Cell history will not be copied, regardless of which include parameter values are specified.</param>
            <param name="skipRemap"> the references to NOT re-map for the newly created folder
            <para>
            If "cellLinks" is specified in the skipRemap parameter value, the cell links within the newly created folder will continue to point to the original source sheets.
            If "reports" is specified in the skipRemap parameter value, the reports within the newly created folder will continue to point to the original source sheets.
            </para>
            </param>
            <returns> the created workspace </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.Internal.WorkspaceResourcesImpl.SheetResources">
            <summary>
            <para>Return the WorkspaceFolderResources object that provides access to Folder resources associated with Workspace
            resources.</para>
            </summary>
            <returns> the workspace folder resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.WorkspaceResourcesImpl.FolderResources">
            <summary>
            Return the WorkspaceFolderResources object that provides access to Folder resources associated with Workspace
            resources.
            </summary>
            <returns> the workspace folder resources </returns>
        </member>
        <member name="P:Smartsheet.Api.Internal.WorkspaceResourcesImpl.ShareResources">
            <summary>
            Return the ShareResources object that provides access to Share resources associated with Workspace resources.
            </summary>
            <returns> the share resources </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.FolderSheetResourcesImpl">
            <summary>
            This is the implementation of the FolderSheetResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderSheetResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderSheetResourcesImpl.CreateSheet(System.Int64,Smartsheet.Api.Models.Sheet)">
            <summary>
            <para>Creates a sheet from scratch in the specified folder.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /folders/{folderId}/sheets</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="sheet"> the sheet to create </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderSheetResourcesImpl.CreateSheetFromTemplate(System.Int64,Smartsheet.Api.Models.Sheet,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.TemplateInclusion})">
            <summary>
            <para> Creates a sheet in the specified folder, from the specified template. </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /folders/{folderId}/sheets</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="sheet"> the sheet to create </param>
            <param name="includes"> used to specify the optional objects to include </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderSheetResourcesImpl.ImportCsvSheet(System.Int64,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet in the specified folder (from CSV). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /folders/{folderId}/sheets/import</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="file"> path to the CSV file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderSheetResourcesImpl.ImportXlsSheet(System.Int64,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet in the specified folder (from XLSX). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /folders/{folderId}/sheets/import</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="file"> path to the XLSX file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.FolderSheetResourcesImpl.ImportSheet(System.Int64,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Private routine to import a sheet of contentType into a folder
            </summary>
            <param name="folderId"></param>
            <param name="file"></param>
            <param name="sheetName"></param>
            <param name="headerRowIndex"></param>
            <param name="primaryColumnIndex"></param>
            <param name="contentType"></param>
            <returns> the created sheet </returns>
        </member>
        <member name="T:Smartsheet.Api.Internal.WorkspaceSheetResourcesImpl">
            <summary>
            This is the implementation of the WorkspaceSheetResources.
            
            Thread Safety: This class is thread safe because it is immutable and its base class is thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceSheetResourcesImpl.#ctor(Smartsheet.Api.Internal.SmartsheetImpl)">
            <summary>
            Constructor.
            
            Exceptions: - IllegalArgumentException : if any argument is
            </summary>
            <param name="smartsheet"> the Smartsheet </param>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceSheetResourcesImpl.CreateSheet(System.Int64,Smartsheet.Api.Models.Sheet)">
            <summary>
            <para>Create a sheet in given workspace.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /workspaces/{workspaceId}/Sheets</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="sheet"> the sheet to create </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceSheetResourcesImpl.CreateSheetFromTemplate(System.Int64,Smartsheet.Api.Models.Sheet,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.TemplateInclusion})">
            <summary>
            <para>Creates a sheet at the top-level of the specified workspace, from the specified template. </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /workspaces/{workspaceId}/Sheets</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="sheet"> the sheet to create </param>
            <param name="includes"> used to specify the optional objects to include </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceSheetResourcesImpl.ImportCsvSheet(System.Int64,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet at the top-level of the specified workspace (CSV). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /workspaces/{workspaceId}/sheets/import</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="file"> path to the CSV file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceSheetResourcesImpl.ImportXlsSheet(System.Int64,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet at the top-level of the specified workspace (XLSX). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /workspaces/{workspaceId}/sheets/import</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="file"> path to the XLSX file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.Internal.WorkspaceSheetResourcesImpl.ImportSheet(System.Int64,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Private routine to import a sheet of contentType into a workspace
            </summary>
            <param name="workspaceId"></param>
            <param name="file"></param>
            <param name="sheetName"></param>
            <param name="headerRowIndex"></param>
            <param name="primaryColumnIndex"></param>
            <param name="contentType"></param>
            <returns> the created sheet </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.AlternateEmail">
            <summary>
            The AlternateEmail object. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/?shell#alternateemail-object">AlternateEmail Object</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.AlternateEmail.confirmed">
            <summary>
            Flag indicating whether the alternate email address has been confirmed
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AlternateEmail.email">
            <summary>
            The user's alternate email address
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AlternateEmail.Confirmed">
            <summary>
            The confirmed flag for AlternateEmail.
            </summary>
            <returns> the Confirmed</returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AlternateEmail.Email">
            <summary>
            The email address string for AlternateEmail.
            </summary>
            <returns> the Email</returns>
        </member>
        <member name="T:Smartsheet.Api.Models.AlternateEmail.AlternateEmailBuilder">
            <summary>
            A convenience class to help generate AlternateEmail object with the appropriate fields.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.AlternateEmail.AlternateEmailBuilder.#ctor(System.String)">
            <summary>
            Sets the required properties for creating an AlternateEmail.
            </summary>
            <param name="email"> the AlternateEmail email</param>
        </member>
        <member name="M:Smartsheet.Api.Models.AlternateEmail.AlternateEmailBuilder.SetEmail(System.String)">
            <summary>
            Sets the Email for the AlternateEmail.
            </summary>
            <param name="email"> the Email </param>
            <returns> creates the alternate email builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.AlternateEmail.AlternateEmailBuilder.GetEmail">
            <summary>
            Gets the Email.
            </summary>
            <returns> the Email </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.AlternateEmail.AlternateEmailBuilder.Build">
            <summary>
            Builds the AlternateEmail.
            </summary>
            <returns> the alternate email</returns>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationAction.frequency">
            <summary>
            The frequency to apply this automation action
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationAction.includeAllColumns">
            <summary>
            Include all columns in email contents
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationAction.includeAttachments">
            <summary>
            Include attachments in email
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationAction.includeColumnIds">
            <summary>
            Specifies which columns to include in message
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationAction.includeDiscussions">
            <summary>
            Include discussions in email
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationAction.message">
            <summary>
            Email body
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationAction.notifyAllSharedUsers">
            <summary>
            Notifications are sent to all users shared to the sheet
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationAction.recipientColumnIds">
            <summary>
            List of column Ids from which to collect email recipients
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationAction.recipients">
            <summary>
            List of recipients
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationAction.subject">
            <summary>
            Email subject line
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationAction.type">
            <summary>
            AutomationActionType
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationAction.Frequency">
            <summary>
            Gets the automation action frequency
            </summary>
            <returns> the automation action frequency </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationAction.IncludeAllColumns">
            <summary>
            Gets the flag indicating if all columns in the sheet should be included with the email
            </summary>
            <returns> includeAllColumns flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationAction.IncludeAttachments">
            <summary>
            Gets the flag indicating if attachments should be included with the email
            </summary>
            <returns> the includeAttachments flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationAction.IncludeColumnIds">
            <summary>
            Gets the list of included columns
            </summary>
            <returns> the list of included columns </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationAction.IncludeDiscussions">
            <summary>
            Gets the flag indicating if discussions should be included with the email
            </summary>
            <returns> the includeDiscussions flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationAction.Message">
            <summary>
            Gets the email body
            </summary>
            <returns> the email body </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationAction.NotifhyAllSharedUsers">
            <summary>
            Gets the flag indicating if notification should be sent to all shared users
            </summary>
            <returns> the notifyAllSharedUsers flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationAction.RecipientColumnIds">
            <summary>
            Gets a list of columns from which to collect email recipients
            </summary>
            <returns> the list of column IDs </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationAction.Recipients">
            <summary>
            Gets the list of recipients
            </summary>
            <returns> the list of recipients </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationAction.Subject">
            <summary>
            Gets the email subject line
            </summary>
            <returns> the email subject line </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationAction.Type">
            <summary>
            Gets the automation action type
            </summary>
            <returns> the automation action type </returns>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationRule.action">
            <summary>
            AutomationAction object containing information for this rule
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationRule.createdAt">
            <summary>
            A timestamp of when the rule was originally active
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationRule.createdBy">
            <summary>
            A User object containing the name and email of the creator of this rule
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationRule.disabledReason">
            <summary>
            Machine-readable reason a rule is disabled
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationRule.disabledReasonText">
            <summary>
            Descriptive reason rule is disabled
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationRule.enabled">
            <summary>
            Indicates whether the rule is active
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationRule.modifiedAt">
            <summary>
            A timestamp indicating when the last change was made to the rule
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationRule.modifiedBy">
            <summary>
            User object containing the name and email of the user who last modified this rule
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutomationRule.userCanModify">
            <summary>
            Indicates that the current user can modify this rule
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationRule.Action">
            <summary>
            Gets the automation action for this rule
            </summary>
            <returns> the automation action </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationRule.CreatedAt">
            <summary>
            Gets a timestamp of when the rule was created
            </summary>
            <returns> the timestamp </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationRule.CreatedBy">
            <summary>
            Gets the User object for the author of this rule
            </summary>
            <returns> the User object </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationRule.DisabledReason">
            <summary>
            Gets a machine-readable reason a rule is disabled
            </summary>
            <returns> the reason </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationRule.DisabledReasonText">
            <summary>
            Gets descriptive text for why this rule is disabled
            </summary>
            <returns> the reason </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationRule.Enabled">
            <summary>
            Gets flag indicating whether rule is active
            </summary>
            <returns> the flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationRule.ModifiedAt">
            <summary>
            Gets a timestamp for the last modification to this rule
            </summary>
            <returns> the timestamp </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationRule.ModifiedBy">
            <summary>
            Gets the user who made the last modification to this rule
            </summary>
            <returns> the user </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutomationRule.UserCanModify">
            <summary>
            Gets a flag indicating whether the current user can modify this rule
            </summary>
            <returns> the flag </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.BulkItemFailure">
            <summary>
            Represents the BulkItemFailure object. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#bulkitemfailure-object">BulkItemFailure Object Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.BulkItemFailure.rowId">
            <summary>
            The id of the Row that failed. Applicable only to bulk row operations. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.BulkItemFailure.error">
            <summary>
            The error caused by the failed item.</summary>
        </member>
        <member name="F:Smartsheet.Api.Models.BulkItemFailure.index">
            <summary>
            The index of the failed item in the bulk request array. </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.BulkItemFailure.RowId">
            <summary>
            Get the id of the Row that failed.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.BulkItemFailure.Error">
            <summary>
            Gets the error caused by the failed item.
            </summary>
            <returns> the Error </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.BulkItemFailure.Index">
            <summary>
            The index of the failed item in the bulk request array.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.BulkItemRowResult">
            <summary>
            Represents the BulkItemRowResult object. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/?shell#partial-success">Partial Success</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.BulkItemRowResult.resultCode">
            <summary>
            0 if successful, 3 for partial success of a bulk operation
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.BulkItemRowResult.message">
            <summary>
            Message that indicates the outcome of the request
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.BulkItemRowResult.result">
            <summary>
            Row object(s) created or updated
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.BulkItemRowResult.failedItems">
            <summary>
            Array of BulkItemFailure objects which represents the items that failed to be added or updated
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.BulkItemRowResult.ResultCode">
            <summary>
            Gets the result Code.
            </summary>
            <returns> the result Code </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.BulkItemRowResult.Message">
            <summary>
            Gets the Message.
            </summary>
            <returns> the Message </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.BulkItemRowResult.Result">
            <summary>
            Row results created or updated.
            </summary>
            <returns> Array of Row objects </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.BulkItemRowResult.FailedItems">
            <summary>
            Array of BulkItemFailure objects which represents the items that failed to be added or updated. 
            </summary>
            <returns> the Description </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.CellDataItem">
            <summary>
            Represents the widget object. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#celldataitem-object">CellDataItem Object Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.CellDataItem.label">
            <summary>
            Label for the data point. This will be either the column name or a user-provided string
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellDataItem.labelFormat">
            <summary>
            formatDescriptor
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellDataItem.objectValue">
            <summary>
            The type of data returned will depend on the cell type and the data in the cell
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellDataItem.cell">
            <summary>
            Cell Object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellDataItem.valueFormat">
            <summary>
            formatDescriptor
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellDataItem.order">
            <summary>
            The display order for the CellDataItem
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellDataItem.columnId">
            <summary>
            Column ID for the cell
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CellDataItem.Label">
            <summary>
            Label for the data point. This will be either the column name or a user-provided string.
            </summary>
            <returns> the label </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.CellDataItem.LabelFormat">
            <summary>
            formatDescriptor.
            </summary>
            <returns> the labelFormat </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.CellDataItem.ObjectValue">
            <summary>
            The type of data returned will depend on the cell type and the data in the cell.
            </summary>
            <returns> an object </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.CellDataItem.Cell">
            <summary>
            Cell Object.
            </summary>
            <returns> the Cell Object </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.CellDataItem.ValueFormat">
            <summary>
            formatDescriptor.
            </summary>
            <returns> the valueFormat </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.CellDataItem.Order">
            <summary>
            The display order for the CellDataItem.
            </summary>
            <returns> the display order </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.CellDataItem.ColumnId">
            <summary>
            Column ID for the cell.
            </summary>
            <returns> the column Id </returns>
        </member>
        <member name="F:Smartsheet.Api.Models.ContactObjectValue.refIndex">
            <summary>
            Part of the ContactOverlay, if contactReferences is present in the sheet, refIndex will indicate
            the offset into the list containing this Contact
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ContactObjectValue.imageId">
            <summary>
            ID of the contact image
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ContactObjectValue.RefIndex">
            <summary>
            Gets the offset in the contactReferences for this Contact
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ContactObjectValue.ImageId">
            <summary>
            Gets the ID for the contact image
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.CriteriaTarget">
            <summary>
            The target for the filter query
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CrossSheetReference.endColumnId">
            <summary>
            the final column in the reference block
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CrossSheetReference.endRowId">
            <summary>
            the last row in the reference block
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CrossSheetReference.sourceSheetId">
            <summary>
            the source sheet Id for the reference block
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CrossSheetReference.startColumnId">
            <summary>
            the first row of the reference block
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CrossSheetReference.startRowId">
            <summary>
            the first row of the reference block
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CrossSheetReference.status">
            <summary>
            the status of the cross-sheet reference
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CrossSheetReference.EndColumnId">
            <summary>
            Get the last column Id in the cross-sheet reference block
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CrossSheetReference.EndRowId">
            <summary>
            Get the last row Id in the cross-sheet reference block
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CrossSheetReference.SourceSheetId">
            <summary>
            Get the source sheet Id in the cross-sheet reference block
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CrossSheetReference.StartColumnId">
            <summary>
            Get the first column Id in the cross-sheet reference block
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CrossSheetReference.StartRowId">
            <summary>
            Get the first row Id in the cross-sheet reference block
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CrossSheetReference.Status">
            <summary>
            Get the status of the cross-sheet reference block
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.DayDescriptor">
            <summary>
            Represents the Link types.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.DayOrdinal">
            <summary>
            Represents the Link types.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Duration.days">
            <summary>
            The number of days for this duration.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Duration.elapsed">
            <summary>
            If true, indicates this duration represents elapsed time, which ignores non-working time.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Duration.hours">
            <summary>
            The number of hours for this duration.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Duration.milliseconds">
            <summary>
            The number of milliseconds for this duration.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Duration.minutes">
            <summary>
            The number of minutes for this duration.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Duration.negative">
            <summary>
            When used as a predecessor’s lag value, indicates whether the lag is negative (if true), or positive (false).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Duration.seconds">
            <summary>
            The number of seconds for this duration.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Duration.weeks">
            <summary>
            The number of weeks for this duration.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Duration.Days">
            <summary>
            The number of days for this duration.
            </summary>
            <returns> the number of days in duration </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Duration.Elapsed">
            <summary>
            If true, indicates this duration represents elapsed time, which ignores non-working time.
            </summary>
            <returns> the elapsed flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Duration.Hours">
            <summary>
            The number of hours for this duration.
            </summary>
            <returns> the number of hours in duration </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Duration.Milliseconds">
            <summary>
            The number of milliseconds for this duration.
            </summary>
            <returns> the number of milliseconds in duration </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Duration.Minutes">
            <summary>
            The number of minutes for this duration.
            </summary>
            <returns> the number of minutes in duration </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Duration.Negative">
            <summary>
            When used as a predecessor’s lag value, indicates whether the lag is negative (if true), or positive (false).
            </summary>
            <returns> the negative flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Duration.Seconds">
            <summary>
            The number of seconds for this duration.
            </summary>
            <returns> the number of seconds in duration </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Duration.Weeks">
            <summary>
            The number of weeks for this duration.
            </summary>
            <returns> the number of weeks in duration </returns>
        </member>
        <member name="F:Smartsheet.Api.Models.ErrorDetail.alternateEmailAddress">
            <summary>
            User's alternate email address that was specified in the request.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ErrorDetail.index">
            <summary>
            When allowPartialSuccess = false, index of the row that caused the error.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ErrorDetail.maxSheetCount">
            <summary>
            The server-side limit on the number of sheets allowed in a single folder/workspace copy operation.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ErrorDetail.primaryEmailAddress">
            <summary>
            User's primary email address that must instead by specified for the operation.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ErrorDetail.rowId">
            <summary>
            When allowPartialSuccess = false, rowID of the row that caused the error.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ErrorDetail.topContainerId">
            <summary>
            The ID of the top level folder or workspace that was partially copied.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ErrorDetail.topContainerType">
            <summary>
            The destination type of the top-level folder or workspace that was partially copied.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ErrorDetail.AlternateEmailAddress">
            <summary>
            Gets the alternate email address that was specified in the request.
            </summary>
            <returns> the alternate email address </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ErrorDetail.Index">
            <summary>
            Gets the index of the row that caused the error.
            </summary>
            <returns> the index </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ErrorDetail.MaxSheetCount">
            <summary>
            Gets the server-side limit on the number of sheets allowed in a single copy operation.
            </summary>
            <returns> the maximum sheet count </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ErrorDetail.PrimaryEmailAddress">
            <summary>
            Gets the primary email address that should be specified in the request.
            </summary>
            <returns> the primary email address </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ErrorDetail.RowId">
            <summary>
            Gets the row Id of the row that caused the error.
            </summary>
            <returns> the row Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ErrorDetail.TopContainerId">
            <summary>
            Gets the Id of the container that was partially copied.
            </summary>
            <returns> the container Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ErrorDetail.TopContainerType">
            <summary>
            Gets the type of the container that was partially copied.
            </summary>
            <returns> the container type </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.SearchInclusion">
            <summary>
            Represents specific elements to include in a response. 
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchInclusion.FAVORITE_FLAG">
            <summary>
            When specified with a value of favoriteFlag, response indicates which returned items are favorites
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.HomeExclusion">
            <summary>
            A comma-separated list of optional elements to not include in the response.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.UserInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserInclusion.GROUPS">
            <summary>
            Adds an array of groups (groupId, name, and description only) that the user is a member of.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.MultiContactObjectValue.values">
            <summary>
            the list of contacts
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiContactObjectValue.Values">
            <summary>
            Gets the array of Contact objects
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ObjectValue.ObjectType">
            <summary>
            Gets the objectValue Type.
            </summary>
            <returns> the Type </returns>
        </member>
        <member name="F:Smartsheet.Api.Models.Predecessor.rowId">
            <summary>
            The ID of the predecessor row
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Predecessor.type">
            <summary>
            The type of the predecessor. One of FS, FF, SS, or SF.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Predecessor.inCriticalPath">
            <summary>
            True if this predecessor is in the critical path.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Predecessor.invalid">
            <summary>
            True if the row referenced by rowId is not a valid row in this sheet, or there is a circular reference 
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Predecessor.lag">
            <summary>
            The lag value of this predecessor. Omitted if there is no lag.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Predecessor.rowNumber">
            <summary>
            The row number of the predecessor row.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Predecessor.RowId">
            <summary>
            The ID of the predecessor row.
            </summary>
            <returns> the rowId </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Predecessor.Type">
            <summary>
            The type of the predecessor. 
            </summary>
            <returns> One of FS, FF, SS, or SF </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Predecessor.InCriticalPath">
            <summary>
            True if this predecessor is in the critical path.
            </summary>
            <returns> the value of the inCriticalPath flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Predecessor.Invalid">
            <summary>
            True if the row referenced by rowId is not a valid row in this sheet, or there is a circular reference.  
            </summary>
            <returns> the value of the invalid flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Predecessor.Lag">
            <summary>
            The lag value of this predecessor.  
            </summary>
            <returns> the lag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Predecessor.RowNumber">
            <summary>
            The number of the predecessor row.
            </summary>
            <returns> the rowNumber </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.PredecessorList.Predecessors">
            <summary>
            Gets the array of Predecessor objects.
            </summary>
            <returns> the array </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.ProjectSettings">
            <summary>
            Represents the Sight Publish object (see http://smartsheet-platform.github.io/api-docs/?shell#sightpublish-object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ProjectSettings.lengthOfDay">
            <summary>
            Length of a workday for a project sheet. Valid value must be above or equal to 1 hour, and less than or equal to 24 hours.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ProjectSettings.nonWorkingDays">
            <summary>
            Non-working days for a project sheet. The format for the timestamp array must be an array of strings that are valid ISO-8601 dates ('YYYY-MM-DD’).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ProjectSettings.workingDays">
            <summary>
            Working days of a week for a project sheet. 
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ProjectSettings.LengthOfDay">
            <summary>
            Get the length of the workday for a project seheet.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ProjectSettings.NonWorkingDays">
            <summary>
            Get a list of non working days in the year.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ProjectSettings.WorkingDays">
            <summary>
            Get a list of working days in the week.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Schedule">
            <summary>
            Represents the Schedule object.</summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#schedule-object">Schedule Object Help</seealso>    
        </member>
        <member name="F:Smartsheet.Api.Models.Schedule.type">
            <summary>
            Schedule type
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Schedule.dayDescriptors">
            <summary>
            A string array of day descriptors
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Schedule.dayOfMonth">
            <summary>
            The day within the month
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Schedule.dayOrdinal">
            <summary>
            It must be one of the following values
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Schedule.endAt">
            <summary>
            The date, time and time zone at which the delivery schedule will end.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Schedule.lastSentAt">
            <summary>
            The date and time for when the last request was sent. Read-only.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Schedule.nextSendAt">
            <summary>
            The date and time for when the next request is scheduled to send. Read-only.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Schedule.repeatEvery">
            <summary>
            Frequency on which the request will be delivered. 
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Schedule.startAt">
            <summary>
            The date, time and time zone at which the first delivery will start.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Schedule.Type">
            <summary>
            Gets the scheudle type
            </summary>
            <returns> the ScheduleType </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Schedule.DayDescriptors">
            <summary>
            A string array of day descriptors.
            </summary>
            <returns> the array of day descriptors </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Schedule.DayOfMonth">
            <summary>
            Get the day within the month.
            </summary>
            <returns> the day </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Schedule.DayOrdinal">
            <summary>
            A string with the day ordinal.
            </summary>
            <returns> the day ordinal </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Schedule.EndAt">
            <summary>
            Gets the date, time and time zone at which the delivery schedule will end.
            </summary>
            <returns> the timestamp </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Schedule.LastSentAt">
            <summary>
            Gets the The date and time for when the last request was sent. Read-only
            </summary>
            <returns> the timestamp </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Schedule.NextSendAt">
            <summary>
            The date and time for when the next request is scheduled to send. Read-only.
            </summary>
            <returns> the timestamp </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Schedule.RepeatEvery">
            <summary>
            Gets the frequency on which the request will be delivered.
            </summary>
            <returns> the repeat frequency </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Schedule.StartAt">
            <summary>
            Gets the date, time and time zone at which the first delivery will start
            </summary>
            <returns> the timestamp </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.ScheduleType">
            <summary>
            Represents the Link types.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.SentUpdateRequest">
            <summary>
            Represents the SentUpdateRequest object./// </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#sentupdaterequest-object">SentUpdateRequest Documentation</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.SentUpdateRequest.columnIds">
            <summary>
            IDs of columns included in the request.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SentUpdateRequest.rowIds">
            <summary>
            IDs of rows update is requested.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SentUpdateRequest.updateRequestId">
            <summary>
            ID of the originating update request.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SentUpdateRequest.includeAttachments">
            <summary>
            A flag to indicate whether or not the Attachments were included in the email.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SentUpdateRequest.includeDiscussions">
            <summary>
            A flag to indicate whether or not the Discussions were included in the email.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SentUpdateRequest.message">
            <summary>
            The message of the email.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SentUpdateRequest.sentAt">
            <summary>
            The date and time for when the sent update request was sent to the recipient.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SentUpdateRequest.sentBy">
            <summary>
            User object containing name and email of the sender.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SentUpdateRequest.sentTo">
            <summary>
            Recipient object.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SentUpdateRequest.status">
            <summary>
            The status of the sent update request.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SentUpdateRequest.subject">
            <summary>
            The subject of the email.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SentUpdateRequest.ColumnIds">
            <summary>
            IDs of columns included in the request.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SentUpdateRequest.RowIds">
            <summary>
            IDs of rows update is requested.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SentUpdateRequest.UpdateRequestId">
            <summary>
            Get the ID of the originating update request.
            </summary>
            <returns> the update request Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SentUpdateRequest.IncludeAttachments">
            <summary>
            Gets the flag that indicates if Attachments should be included in the Email.
            </summary>
            <returns> the include Attachments </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SentUpdateRequest.IncludeDiscussions">
            <summary>
            Gets the flag that indicates if Discussions should be included in the Email.
            </summary>
            <returns> the include Discussions </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SentUpdateRequest.Message">
            <summary>
            Gets the Message.
            </summary>
            <returns> the Message </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SentUpdateRequest.SentAt">
            <summary>
            Get the date and time for when the sent update request was sent to the recipient.
            </summary>
            <returns> the timestamp </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SentUpdateRequest.SentBy">
            <summary>
            Gets the User object containing name and email of the sender.
            </summary>
            <returns> the User </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SentUpdateRequest.SentTo">
            <summary>
            Gets the Recipient
            </summary>
            <returns> the Recipients </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SentUpdateRequest.Status">
            <summary>
            Gets the status of the sent update request.
            </summary>
            <returns> the UpdateRequestStatus </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SentUpdateRequest.Subject">
            <summary>
            Gets the Subject.
            </summary>
            <returns> the Subject </returns>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetFilter.filterType">
            <summary>
            Represents the filter type
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetFilter.query">
            <summary>
            Represents the details that make up the filter query
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetFilter.version">
            <summary>
            the filter version
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetFilter.FilterType">
            <summary>
            Gets the filter type
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetFilter.Query">
            <summary>
            Gets the details that make up the filter query
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetFilter.Version">
            <summary>
            Gets the sheet filter version
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetFilterDetails.criteria">
            <summary>
            Represents the list of criteria
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetFilterDetails.includeParent">
            <summary>
            Include parent rows whose children are included in this filter
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetFilterDetails._operator">
            <summary>
            How to combine criteria in this filter
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetFilterDetails.Criteria">
            <summary>
            Get the list of criteria
            </summary>
            <returns> list of criteria </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetFilterDetails.IncludeParent">
            <summary>
            Gets flag indicating whether to include parent rows whose children are included in this filter
            </summary>
            <returns> flag indicating whether to include parent </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetFilterDetails.Operator">
            <summary>
            Gets how to combine criteria in this filter
            </summary>
            <returns> the operator </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetFilterOperator">
            <summary>
            How to combine sheet filter criteria
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetFilterType">
            <summary>
            Represents the types of sheet filters
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.SightPublish">
            <summary>
            Represents the Sight Publish object (see http://smartsheet-platform.github.io/api-docs/?shell#sightpublish-object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SightPublish.readOnlyFullAccessibleBy">
            <summary>
            Flag to indicate who can access the 'Read-Only Full’ view of the published sight:
                   if "ALL", sight is available to anyone who has the link
                   if "ORG", sight is available only to members of the sight owner's organization
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SightPublish.readOnlyFullEnabled">
            <summary>
            If true, a rich version of the sight is published with the ability to download row attachments and discussions.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SightPublish.readOnlyFullUrl">
            <summary>
            URL for 'Read-Only Full’ view of the published sight
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SightPublish.ReadOnlyFullAccessibleBy">
            <summary>
            if "ALL", it is available to anyone who has the link.
            if "ORG", it is available only to members of the sight owner’s Smartsheet organization.
            Only returned in a response if readOnlyFullEnabled = true.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SightPublish.ReadOnlyFullEnabled">
            <summary>
            If true, a rich version of the sight is published with the ability to download row attachments and discussions
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SightPublish.ReadOnlyFullUrl">
            <summary>
            URL for 'Read-Only Full’ view of the published sight
            Only returned in a response if readOnlyFullEnabled = true.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SortCriterion.columnId">
            <summary>
            The column Id to sort on
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SortCriterion.direction">
            <summary>
            The direction of the sort
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SortCriterion.ColumnId">
            <summary>
            Get the column Id of the column to sort on
            </summary>
            <returns> the column Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SortCriterion.Direction">
            <summary>
            Get the sort direction
            </summary>
            <returns> the sort direction </returns>
        </member>
        <member name="F:Smartsheet.Api.Models.SortSpecifier.sortCriteria">
            <summary>
            An array of sort criterion
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SortSpecifier.SortCriteria">
            <summary>
            Get the sort criteria
            </summary>
            <returns> the array of sort criteria </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.UpdateRequestStatus">
            <summary>
            Represents the update reqeust status.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.WebhookSharedSecret">
            <summary>
            Represents the webhook shared secret. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#sharedsecret-object">SharedSecret Object Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookSharedSecret.sharedSecret">
            <summary>
            Shared secret for this webhook, randomly generated by Smartsheet. Read-only. 
            See Authenticating Callbacks for details about how this value can be used.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.WebhookSharedSecret.SharedSecret">
            <summary>
            Get the Shared secret for this webhook, randomly generated by Smartsheet.
            </summary>
            <returns> the shared secret </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.WebhookStatus">
            <summary>
            Represents the user Status. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#webhook-status">WebhookStatus Documentation</seealso>/>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookStatus.ENABLED">
            <summary>
            Webhook is active.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookStatus.NEW_NOT_VERIFIED">
            <summary>
            Webhook has been created but is not enabled because it has not yet been verified.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookStatus.DISABLED_BY_OWNER">
            <summary>
            Webhook has been disabled by the owner.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookStatus.DISABLED_VERIFICATION_FAILED">
            <summary>
            Webhook verification has failed.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookStatus.DISABLED_CALLBACK_FAILED">
            <summary>
            Webhook has been disabled because callback was not successfully delivered to the Callback URL.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookStatus.DISABLED_APP_REVOKED">
            <summary>
            Webhook has been disabled because the third-party app associated with the webhook has had its access revoked.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookStatus.DISABLED_SCOPE_INACCESSIBLE">
            <summary>
            Webhook has been disabled because its owner lost access to the corresponding data in Smartsheet 
            (either because the object was deleted or sharing permissions were revoked).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookStatus.DISABLED_ADMINISTRATIVE">
            <summary>
            Webhook has been disabled by Smartsheet support.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Contact">
            <summary>
            Represents a user’s personal 
            in Smartsheet
            <seealso href="http://help.smartsheet.com/customer/portal/articles/796143-managing-contacts">Managing contacts</seealso>
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Contact.Id">
            <summary>
            Contact ID, unlike other Smartsheet object ids, this id is an alphanumeric string.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Contact.Email">
            <summary>
            Contact’s email address
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.ContainerDestination">
            <summary>
            Object that describes the destination container when a Sheet or Folder is moved, or when a Sheet, Folder, or Workspace is copied.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ContainerDestination.destinationId">
            <summary>
            Id of the destination container (when copying or moving a Sheet or a Folder). Required if destinationType is 
                "folder" or "workspace" If destinationType is "home", this value must be null.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ContainerDestination.destinationType">
            <summary>
            home, workspace, or folder
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ContainerDestination.newName">
            <summary>
            Name of the newly created object
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ContainerDestination.DestinationId">
            <summary>
            ID of the destination container (when copying or moving a Sheet or a Folder).
            Required if destinationType is "folder" or "workspace" If destinationType is "home", this value must be null.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ContainerDestination.DestinationType">
            <summary>
            Type of the destination container (when copying or moving a Sheet or a Folder). 
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ContainerDestination.NewName">
            <summary>
            Name of the newly created object (when creating a copy of a Sheet, Folder, or Workspace).
            This attribute is not supported for "move" operations (i.e., a moved Sheet, Folder or Workspace retains its original name).
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.DestinationType">
            <summary>
            Represents the type of the destination container (when copying or moving a Sheet or a Folder)..
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.GlobalTemplate">
            <summary>
            Type of global template. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#template-object">Template Object Help</seealso>
        </member>
        <member name="T:Smartsheet.Api.Models.Image">
            <summary>
            Represents the Image object. </summary>
            <seealso href="https://smartsheet-platform.github.io/api-docs/#image-object">Image Object Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.Image.id">
            <summary>
            Image ID</summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Image.altText">
            <summary>
            Alternate Text for the image. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Image.height">
            <summary>
            Original height (in pixels) of the uploaded image. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Image.width">
            <summary>
            Original width (in pixels) of the uploaded image. </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Image.Id">
            <summary>
            Get Image Id.
            </summary>
            <returns> the Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Image.AltText">
            <summary>
            Alternate Text for the image.
            </summary>
            <returns> the altText </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Image.Height">
            <summary>
            Get the Height (in pixels) of the uploaded image.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Image.Width">
            <summary>
            Get the Width (in pixels) of the uploaded image.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.ImageUrl">
            <summary>
            Represents the ImageUrl object. </summary>
            <seealso href="https://smartsheet-platform.github.io/api-docs/#imageurl-object">ImageUrl Object Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.ImageUrl.imageId">
            <summary>
            Image ID</summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ImageUrl.error">
            <summary>
            Error object. Present in the Get Image URLs response only if an error occurred retrieving the image.</summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ImageUrl.height">
            <summary>
            Image height (in pixels).
            In the Get Image URLs request, this (optional) attribute represents requested height; 
            in the response, it represents actual height of the image returned. (See Get Image URLs.)</summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ImageUrl.url">
            <summary>
            Temporary URL that can be used to retrieve the image. This attribute can be present in a response but will never be specified in a request.</summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ImageUrl.width">
            <summary>
            Image width (in pixels).
            In the Get Image URLs request, this (optional) attribute represents requested width; 
            in the response, it represents actual width of the image returned. (See Get Image URLs.)</summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ImageUrl.ImageId">
            <summary>
            Get Image Id.
            </summary>
            <returns> the Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ImageUrl.Error">
            <summary>
            Get the Error object. Present in the Get Image URLs response only if an error occurred retrieving the image.
            </summary>
            <returns> the Error </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ImageUrl.Height">
            <summary>
            Get the Height (in pixels) of the uploaded image.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ImageUrl.Url">
            <summary>
            Temporary URL that can be used to retrieve the image.
            </summary>
            <returns> the Url </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ImageUrl.Width">
            <summary>
            Get the Width (in pixels) of the uploaded image.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.ImageUrl.ImageUrlBuilder">
            <summary>
            A convenience class to help generate ImageUrl object with the appropriate fields.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.ImageUrl.ImageUrlBuilder.#ctor(System.String)">
            <summary>
            Sets the required properties for creating an ImageUrl.
            </summary>
            <param name="imageId"> the ImageUrl imageId</param>
        </member>
        <member name="M:Smartsheet.Api.Models.ImageUrl.ImageUrlBuilder.#ctor(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Sets the required properties for creating an ImageUrl.
            </summary>
            <param name="imageId"> the ImageUrl imageId</param>
            <param name="width">Desired image width</param>
            <param name="height">Desired image height</param>
        </member>
        <member name="M:Smartsheet.Api.Models.ImageUrl.ImageUrlBuilder.SetImageId(System.String)">
            <summary>
            Sets the ImageId for the ImageUrlBuilder.
            </summary>
            <param name="imageId"> the imageId </param>
            <returns> creates the ImageUrlBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.ImageUrl.ImageUrlBuilder.GetImageId">
            <summary>
            Gets the image Id.
            </summary>
            <returns> the imageId </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.ImageUrl.ImageUrlBuilder.Build">
            <summary>
            Builds the ImageUrl.
            </summary>
            <returns> the ImageUrl</returns>
        </member>
        <member name="T:Smartsheet.Api.Models.ImageUrlMap">
            <summary>
            Represents the ImageUrl object. </summary>
            <seealso href="https://smartsheet-platform.github.io/api-docs/#imageurlmap-object">ImageUrlMap Object Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.ImageUrlMap.urlExpiresInMillis">
            <summary>
            Milliseconds before the URLs within imageUrls will expire.</summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ImageUrlMap.imageUrls">
            <summary>
            Array of ImageUrl objects
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ImageUrlMap.UrlExpiresInMillis">
            <summary>
            Get Milliseconds before the URLs within imageUrls will expire.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ImageUrlMap.ImageUrls">
            <summary>
            Gets the array of ImageUrl objects.
            </summary>
            <returns> the ImageUrls </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.FolderCopyInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderCopyInclusion.DATA">
            <summary>
            Includes the data.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderCopyInclusion.ATTACHMENTS">
            <summary>
            Includes the attachments.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderCopyInclusion.DISCUSSIONS">
            <summary>
            Includes the discussions.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderCopyInclusion.CELL_LINKS">
            <summary>
            Includes cell links.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderCopyInclusion.FORMS">
            <summary>
            Includes the forms.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderCopyInclusion.ALL">
            <summary>
            includeS everything (data, attachments, discussions, cellLinks, and forms).
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.FolderRemapExclusion">
            <summary>
            Represents specific references to NOT re-map for the newly created object.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderRemapExclusion.CELL_LINKS">
            <summary>
            Excludes re-mapping of the cell links.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderRemapExclusion.REPORTS">
            <summary>
            Excludes re-mapping of the reports.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderRemapExclusion.SHEET_HYPERLINKS">
            <summary>
            Excludes re-mapping of hyperlinks.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderRemapExclusion.SIGHTS">
            <summary>
            Excludes re-mapping of Sights.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetCopyInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetCopyInclusion.DATA">
            <summary>
            Includes the data.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetCopyInclusion.ATTACHMENTS">
            <summary>
            Includes the attachments.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetCopyInclusion.DISCUSSIONS">
            <summary>
            Includes the discussions.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetCopyInclusion.CELL_LINKS">
            <summary>
            Includes cell links.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetCopyInclusion.FORMS">
            <summary>
            Includes the forms.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetCopyInclusion.ALL">
            <summary>
            includes everything (data, attachments, discussions, cellLinks, and forms).
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.WorkspaceCopyInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceCopyInclusion.DATA">
            <summary>
            Includes the data.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceCopyInclusion.ATTACHMENTS">
            <summary>
            Includes the attachments.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceCopyInclusion.DISCUSSIONS">
            <summary>
            Includes the discussions.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceCopyInclusion.CELL_LINKS">
            <summary>
            Includes cell links.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceCopyInclusion.FORMS">
            <summary>
            Includes the forms.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceCopyInclusion.BRAND">
            <summary>
            Includes the brand.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceCopyInclusion.SHARES">
            <summary>
            Includes the shares.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceCopyInclusion.ALL">
            <summary>
            Includes everything (data, attachments, discussions, cellLinks, and forms).
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.WorkspaceRemapExclusion">
            <summary>
            Represents specific references to NOT re-map for the newly created object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceRemapExclusion.CELL_LINKS">
            <summary>
            Excludes re-mapping of the cell links.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceRemapExclusion.REPORTS">
            <summary>
            Excludes re-mapping of the reports.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceRemapExclusion.SHEET_HYPERLINKS">
            <summary>
            Excludes re-mapping of hyperlinks.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceRemapExclusion.SIGHTS">
            <summary>
            Excludes re-mapping of Sights.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.MultiRowEmail">
            <summary>
            Represents MultiRowEmail object. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/504773-sending-Sheets-Rows-via-Email">Help Sending 
            Sheets &amp; Rows via Email</seealso>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiRowEmail.RowIds">
            <summary>
            IDs of rows to be included.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.ReportPublish">
            <summary>
            Represents the Report Publish object (see http://smartsheet-platform.github.io/api-docs/?shell#reportpublish-object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ReportPublish.readOnlyFullAccessibleBy">
            <summary>
            Flag to indicate who can access the 'Read-Only Full’ view of the published report:
                   if "ALL", report is available to anyone who has the link
                   if "ORG", report is available only to members of the report owner's organization
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ReportPublish.readOnlyFullDefaultView">
            <summary>
            Default view for published reort (GRID, CARDS, CALENDAR)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ReportPublish.readOnlyFullEnabled">
            <summary>
            If true, a rich version of the report is published with the ability to download row attachments and discussions.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ReportPublish.readOnlyFullShowToolbar">
            <summary>
            Flag to show or hide the left nav toolbar for the read only report
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ReportPublish.readOnlyFullUrl">
            <summary>
            URL for 'Read-Only Full’ view of the published report
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ReportPublish.ReadOnlyFullAccessibleBy">
            <summary>
            if "ALL", it is available to anyone who has the link.
            if "ORG", it is available only to members of the report owner’s Smartsheet organization.
            Only returned in a response if readOnlyFullEnabled = true.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ReportPublish.ReadOnlyFullDefaultView">
            <summary>
            The read only full default view
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ReportPublish.ReadOnlyFullEnabled">
            <summary>
            If true, a rich version of the report is published with the ability to download row attachments and discussions
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ReportPublish.ReadOnlyFullShowToolbar">
            <summary>
            The read only full show toolbar flag
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ReportPublish.ReadOnlyFullUrl">
            <summary>
            URL for 'Read-Only Full’ view of the published report. Only returned in a response if readOnlyFullEnabled = true.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.ShareScope">
            <summary>
            Represents the scope of a share. For use with the <see cref="M:Smartsheet.Api.ShareResources.ListShares(System.Int64,Smartsheet.Api.Models.PaginationParameters,Smartsheet.Api.Models.ShareScope)"/>.
            </summary>
            <remarks>
            See http://smartsheet-platform.github.io/api-docs/#share-object and http://smartsheet-platform.github.io/api-docs/#list-sheet-shares for more information.
            </remarks>
        </member>
        <member name="T:Smartsheet.Api.Models.ShortcutDataItem">
            <summary>
            Represents the widget object. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#shortcutdataitem-object">ShortDataItem Object Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.ShortcutDataItem.attachmentType">
            <summary>
            Attachment type (one of FILE, GOOGLE_DRIVE, LINK, BOX_COM, DROPBOX, EVERNOTE, EGNYTE, ONEDRIVE, SMARTSHEET)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ShortcutDataItem.hyperlink">
            <summary>
            Hyperlink  object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ShortcutDataItem.label">
            <summary>
            Label for the data point
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ShortcutDataItem.labelFormat">
            <summary>
            formatDescriptor
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ShortcutDataItem.mimeType">
            <summary>
            Certain attachment types will also include a mimeType
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ShortcutDataItem.order">
            <summary>
            The display order for the ShortcutWidgetItem
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ShortcutDataItem.AttachmentType">
            <summary>
            Attachment type (one of FILE, GOOGLE_DRIVE, LINK, BOX_COM, DROPBOX, EVERNOTE, EGNYTE, ONEDRIVE, SMARTSHEET).
            </summary>
            <returns> the attachment type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ShortcutDataItem.Hyperlink">
            <summary>
            Hyperlink object.
            </summary>
            <returns> the Link </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ShortcutDataItem.Label">
            <summary>
            Label for the data point. 
            </summary>
            <returns> the label </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ShortcutDataItem.LabelFormat">
            <summary>
            formatDescriptor.
            </summary>
            <returns> the labelFormat </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ShortcutDataItem.MimeType">
            <summary>
            Certain attachment types will also include a mimeType.
            </summary>
            <returns> the MIME type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.ShortcutDataItem.Order">
            <summary>
            The display order for the CellDataItem.
            </summary>
            <returns> the display order </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Sight">
            <summary>
            Represents the Sight object. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#sight-object">Sight Object Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.Sight.accessLevel">
            <summary>
            User’s permissions on the Sight. Valid values
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Sight.backgroundColor">
            <summary>
            The background color of the Sight
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Sight.columnCount">
            <summary>
            Number of columns that the Sight contains
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Sight.createdAt">
            <summary>
            Time of creation
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Sight.favorite">
            <summary>
            Indicates whether the user has marked the Sight as a favorite
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Sight.modifiedAt">
            <summary>
            Time of last modification
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Sight.permalink">
            <summary>
            URL that represents a direct link to the Sight in Smartsheet
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Sight.widgets">
            <summary>
            Array of Widget objects
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Sight.workspace">
            <summary>
            A Workspace object, limited to only 2 attributes: Id, Name
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Sight.AccessLevel">
            <summary>
            User’s permissions on the Sight. valid values:
                   OWNER, ADMIN, VIEWER
            </summary>
            <returns> the AccessLevel </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Sight.BackgroundColor">
            <summary>
            Get the background color of the Sight
            </summary>
            <returns> the background color </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Sight.ColumnCount">
            <summary>
            Get the number of columns that the Sight contains.
            </summary>
            <returns> the columnCount </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Sight.CreatedAt">
            <summary>
            Time of creation
            </summary>
            <returns> the DateTime </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Sight.Favorite">
            <summary>
            Indicates whether the user has marked the Sight as a favorite.
            </summary>
            <returns> the favorite flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Sight.ModifiedAt">
            <summary>
            Time of last modification
            </summary>
            <returns> the DateTime </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Sight.Permalink">
            <summary>
            URL that represents a direct link to the Sight in Smartsheet
            </summary>
            <returns> the permalink </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Sight.Widgets">
            <summary>
            Array of Widget objects.
            </summary>
            <returns> the list </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Sight.Workspace">
            <summary>
            A Workspace object, limited to only 2 attributes:
                   id, name
               Note: this attribute is only present if the Sight resides within a workspace.
            </summary>
            <returns> the workspace </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.UpdateRequest">
            <summary>
            Represents the UpdateRequest object.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UpdateRequest.id">
            <summary>
            ID of the update request.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UpdateRequest.createdAt">
            <summary>
            The date and time for when this request was originally created. Read-only.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UpdateRequest.modifiedAt">
            <summary>
            The date and time for when the last change was made to this request. Read-only.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UpdateRequest.schedule">
            <summary>
            The schedule for which update requests will be sent out.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UpdateRequest.sentBy">
            <summary>
            User object containing name and email of the sender.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UpdateRequest.Id">
            <summary>
            ID of the update request.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UpdateRequest.CreatedAt">
            <summary>
            Gets the date and time for when this request was originally created. Read-only
            </summary>
            <returns> the timestamp </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.UpdateRequest.ModifiedAt">
            <summary>
            Gets the date and time for when the last change was made to this request. Read-only.
            </summary>
            <returns> the timestamp </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.UpdateRequest.Schedule">
            <summary>
            Gets the schedule for which update requests will be sent out.
            </summary>
            <returns> the Schedule </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.UpdateRequest.SentBy">
            <summary>
            Gets the User object containing name and email of the sender.
            </summary>
            <returns> the User </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Webhook">
            <summary>
            Represents the webhook object. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#webhook-object">Webhook Object Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.apiClientId">
            <summary>
            API Client Id corresponding to third-party app that created the Webhook. Read-only. Only present if webhook was created by third-party app.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.scopeObjectId">
            <summary>
            ID of the object that is subscribed to. Specified when a webhook is created and cannot be changed..
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.apiClientName">
            <summary>
            API Client Name corresponding to third-party app that created the Webhook. Read-only. Only present if webhook was created by third-party app.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.callbackUrl">
            <summary>
            HTTPS URL where callbacks will be sent.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.createdAt">
            <summary>
            Time of creation. Read-only.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.disabledDetails">
            <summary>
            Details about the reason the Webhook was disabled. Read-only. Only present when enabled=false
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.enabled">
            <summary>
            Flag indicating whether the Webhook is on (true) or off (false)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.events">
            <summary>
            Array of the events that are subscribed to. Currently, must be an array of size 1 that contains the string 
            value “*.*”, which means “all objects” and “all events”.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.modifiedAt">
            <summary>
            Time of last modification. Read-only.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.scope">
            <summary>
            Scope of the subscription. Currently, the only supported value is “sheet”. Specified when a webhook is created and cannot be changed.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.sharedSecret">
            <summary>
            Shared secret for this webhook, randomly generated by Smartsheet. Read-only. See Authenticating Callbacks for 
            details about how this value can be used.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.stats">
            <summary>
            Useful statistics for this webhook. Will only be returned once this webhook has performed a callback attempt. Read-only.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.status">
            <summary>
            Webhook status. Read-only. See Webhook Status for list of possible values.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Webhook.version">
            <summary>
            Webhook version. Currently, the only supported value is 1. This attribute is intended to ensure backward compatibility as new 
            webhook functionality is released. For example, a webhook with a version of 1 is guaranteed to always be sent callback objects 
            that are compatible with the version 1 release of webhooks.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.ApiClientId">
            <summary>
            Get the API Client Id corresponding to third-party app that created the Webhook.
            </summary>
            <returns> the Client Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.ScopeObjectId">
            <summary>
            Get the ID of the object that is subscribed to.
            </summary>
            <returns> the ScopeObjectId </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.ApiClientName">
            <summary>
            Get the API Client Name corresponding to third-party app that created the Webhook.
            </summary>
            <returns> the Client Name </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.CallbackUrl">
            <summary>
            Get the HTTPS URL where callbacks will be sent.
            </summary>
            <returns> the URL </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.CreatedAt">
            <summary>
            Gets the Time that the webhook was created.
            </summary>
            <returns> the DateTime </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.DisabledDetails">
            <summary>
            Get the details about the reason the Webhook was disabled.
            </summary>
            <returns> the details </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.Enabled">
            <summary>
            Get the Flag indicating whether the Webhook is on (true) or off (false).
            </summary>
            <returns> the enabled flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.Events">
            <summary>
            Get the Array of the events that are subscribed to.
            </summary>
            <returns> the string array </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.ModifiedAt">
            <summary>
            Gets the time that the webhook was modified.
            </summary>
            <returns> the DateTime </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.Scope">
            <summary>
            Get the Scope of the subscription.
            </summary>
            <returns> the Scope </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.SharedSecret">
            <summary>
            Get the Shared secret for this webhook, randomly generated by Smartsheet.
            </summary>
            <returns> the shared secret </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.Stats">
            <summary>
            Get the statistics for this webhook.
            </summary>
            <returns> the WebhookStats </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.Status">
            <summary>
            Get the Webhook status.
            </summary>
            <returns> the status </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Webhook.Version">
            <summary>
            Get the webhook version.
            </summary>
            <returns> the version </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.WebhookStats">
            <summary>
            Represents the webhook stats object. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#webhookstats-object">Webhook Stats Object Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookStats.lastCallbackAttempt">
            <summary>
            When this webhook last made a callback attempt.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookStats.lastCallbackAttemptRetryCount">
            <summary>
            The number of retries the webhook had performed as of the last callback attempt.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WebhookStats.lastSuccessfulCallback">
            <summary>
            When this webhook last made a successful callback.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.WebhookStats.LastCallbackAttempt">
            <summary>
            Get the timestamp from last callback attempt.
            </summary>
            <returns> the attempt timestamp </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WebhookStats.LastCallbackAttemptRetryCount">
            <summary>
            Get the number of retries the webhook had performed as of the last callback attempt.
            </summary>
            <returns> the retry count </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WebhookStats.LastSuccessfulCallback">
            <summary>
            Get the timestamp from the last successful callback.
            </summary>
            <returns> the successful timestamp</returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Widget">
            <summary>
            Represents the widget object. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#widget-object">Widget Object Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.Widget.type">
            <summary>
            Type of widget
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Widget.contents">
            <summary>
            Data that specifies the contents of the widget. _Note: the type of WidgetContent object (and attributes within) will depend on the value of Widget.type:
            CELLLINK - CellLinkWidgetContent
            SHEETSUMMARY - CellLinkWidgetContent
            RICHTEXT - RichTextWidgetContent
            SHORTCUTICON - ShortcutWidgetContent
            SHORTCUTLIST - ShortcutWidgetContent
            GRIDGANTT - ReportWidgetContent
            IMAGE - ImageWidgetContent
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Widget.height">
            <summary>
            Number of Rows that the widget occupies on the Sight
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Widget.showTitle">
            <summary>
            True indicates that the client should display the widget title. Note that this is independent of the “title” string which may be null or empty.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Widget.showTitleIcon">
            <summary>
            True indicates that the client should display the Sheet icon in the widget title
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Widget.title">
            <summary>
            (Optional) Title of the widget
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Widget.titleFormat">
            <summary>
            FormatDescriptor
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Widget.version">
            <summary>
            Widget version number
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Widget.width">
            <summary>
            Number of Columns that the widget occupies on the Sight
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Widget.xPosition">
            <summary>
            X-coordinate of widget’s position on the Sight
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Widget.yPosition">
            <summary>
            Y-coordinate of widget’s position on the Sight
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Widget.Type">
            <summary>
            Get the Type of widget.
            </summary>
            <returns> the WidgetType </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Widget.Contents">
            <summary>
            Get the data that specifies the contents of the widget. 
            See description of contents variable for valid objects.
            </summary>
            <returns> the contents </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Widget.Height">
            <summary>
            Number of Rows that the widget occupies on the Sight.
            </summary>
            <returns> the Height </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Widget.ShowTitle">
            <summary>
            True indicates that the client should display the widget title. Note that this is independent of the “title” string which may be null or empty.
            </summary>
            <returns> the showTitle flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Widget.ShowTitleIcon">
            <summary>
            True indicates that the client should display the Sheet icon in the widget title.
            </summary>
            <returns> the showTitleIcon flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Widget.Title">
            <summary>
            (Optional) Title of the widget.
            </summary>
            <returns> the Title </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Widget.TitleFormat">
            <summary>
            The title format FormatDescriptor string.
            </summary>
            <returns> the FormatDescriptor </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Widget.Version">
            <summary>
            Widget version number.
            </summary>
            <returns> the Version </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Widget.Width">
            <summary>
            Number of Columns that the widget occupies on the Sight.
            </summary>
            <returns> the Width </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Widget.XPosition">
            <summary>
            X-coordinate of widget’s position on the Sight.
            </summary>
            <returns> the xPosition </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Widget.YPosition">
            <summary>
            Y-coordinate of widget’s position on the Sight.
            </summary>
            <returns> the yPosition </returns>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetContent.hyperlink">
            <summary>
            Represents the CellLinkWidgetContent object.</summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#celllinkwidgetcontent-object">CellLinkWidge Object Help</seealso>        
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetContent.axes">
            <summary>
            Represents the ChartWidgetContent object. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#chartwidgetcontent-object">RichTextWidget Object Help</seealso>        
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetContent.privateId">
            <summary>
            Represents the ImageWidgetContent object.</summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#imagewidgetcontent-object">ImageWidgetContent  Object Help</seealso>    
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetContent.htmlContent">
            <summary>
            Represents the ReportWidgetContent object.</summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#reportwidgetcontent-object">ReportWidgetContent Object Help</seealso>    
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetContent.html">
            <summary>
            Represents the RichTextWidgetContent object.</summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#richtextwidgetcontent-object">RichTextWidget Object Help</seealso>        
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetContent.shortcutData">
            <summary>
            Represents the ShortcutWidgetContent object.</summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#shortcutwidgetcontent-object">ShortcutWidgetContent Object Help</seealso>        
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetContent.backgroundColor">
            <summary>
            Represents the TitleWidgetContent object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetContent.url">
            <summary>
            Represents the WebContentWidgetContent object
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.Hyperlink">
            <summary>
            The widget has when clicked attribute set to that hyperlink (if present and non-null).
            </summary>
            <returns> the Link </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.CellData">
            <summary>
            Array of cellDataItem objects.
            </summary>
            <returns> the array </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.Columns">
            <summary>
            Array of Column objects.
            </summary>
            <returns> the array </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.Html">
            <summary>
            The widget content as HTML.
            </summary>
            <returns> the HTML string </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.ShortcutData">
            <summary>
            An array of ShortcutDataItem objects.
            </summary>
            <returns> the array </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.HtmlContent">
            <summary>
            HTML snippet to render Report.
            </summary>
            <returns> the HTML string </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.PrivateId">
            <summary>
            The image private ID.
            </summary>
            <returns> the ID </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.Height">
            <summary>
            Original height of the image in pixels.
            </summary>
            <returns> the height </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.Width">
            <summary>
            Original width of the image in pixels.
            </summary>
            <returns> the width </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.FileName">
            <summary>
            Name of the image file.
            </summary>
            <returns> the name </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.Format">
            <summary>
            The formatDescriptor for the image file.
            </summary>
            <returns> the formatDescriptor </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.BackgroundColor">
            <summary>
            Gets the background color of a title widget
            </summary>
            <returns> the background color </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.Axes">
            <summary>
            Gets the axes for a chart widget
            </summary>
            <returns> the axes </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.Legend">
            <summary>
            Get the lengend for a chart widget
            </summary>
            <returns> chart lengend </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.Series">
            <summary>
            Get the series data for a chart widget
            </summary>
            <returns> the series data </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.WidgetContent.Url">
            <summary>
            Gets the URL for the webContent widget
            </summary>
            <returns> the url </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.WidgetType">
            <summary>
            Represents the contents of the widget. </summary>
            <seealso href="http://smartsheet-platform.github.io/api-docs/#widgetcontent-object">Widget Content Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetType.CELLLINK">
            <summary>
            CellLinkWidgetContent object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetType.CHART">
            <summary>
            ChartWidgetContent object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetType.IMAGE">
            <summary>
            ImageWidgetContent object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetType.SHEETSUMMARY">
            <summary>
            CellLinkWidgetContent object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetType.GRIDGANTT">
            <summary>
            ReportWidgetContent object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetType.RICHTEXT">
            <summary>
            RichTextWidgetContent object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetType.SHORTCUTICON">
            <summary>
            ShortcutWidgetContent object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetType.SHORTCUTLIST">
            <summary>
            ShortcutWidgetContent object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetType.TITLE">
            <summary>
            TitleWidgetContent object
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WidgetType.WEBCONTENT">
            <summary>
            WebContent object
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.AbstractRow`2">
            <summary>
            Represents the Row object.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.sheetId">
            <summary>
            Represents the Sheet ID. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.accessLevel">
            <summary>
            The user's permissions on the sheet. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.attachments">
            <summary>
            Represents the Attachments for this row. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.cells">
            <summary>
            Represents the Cells for this row. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.columns">
            <summary>
            Represents the Columns for this row. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.conditionalFormat">
            <summary>
            Describes the row's conditional format </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.createdAt">
            <summary>
            Represents the date and time the row was created. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.createdBy">
            <summary>
            User object containing the name and email of the creator of this row.</summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.discussions">
            <summary>
            Represents the Discussions for this row. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.expanded">
            <summary>
            A read-only flag to indicate if the row is Expanded or collapsed. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.filteredOut">
            <summary>
            true if this row is filtered out by a column filter </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.format">
            <summary>
            Format descriptors </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.inCriticalPath">
            <summary>
            Only returned, with a value of true, if the sheet is a project sheet with dependencies</summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.locked">
            <summary>
            Indicates whether the row is locked </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.lockedForUser">
            <summary>
            Indicates whether the row is locked for the requesting user </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.modifiedAt">
            <summary>
            Represents the date and time the row was modified. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.modifiedBy">
            <summary>
            User object containing the name and email of the last user to modify this row.</summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.parentRowNumber">
            <summary>
            Represents the parent row number. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.permalink">
            <summary>
            URL that represents a direct link to the row in Smartsheet
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.rowNumber">
            <summary>
            Represents the row number. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.version">
            <summary>
            The Version number that is incremented every time a sheet is modified. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.parentId">
            <summary>
            Represents the parent row ID. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.siblingId">
            <summary>
            Represents the sibling row ID. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.above">
            <summary>
            Specifies the location for a new or moved row </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.indent">
            <summary>
            Specified the number of levels to indent an existing row </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.outdent">
            <summary>
            Specifies the number of levels to outdent an existing row </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.toBottom">
            <summary>
            Adds or moves the row to the bottom of the sheet </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractRow`2.toTop">
            <summary>
            Adds or moves the row to the top of the sheet </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.SheetId">
            <summary>
            Gets the Id of the sheet.
            </summary>
            <returns> the sheet Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.AccessLevel">
            <summary>
            Gets the user's permissions on the sheet.
            </summary>
            <returns> the access level </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Attachments">
            <summary>
            Gets the Attachments.
            </summary>
            <returns> the Attachments </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Cells">
            <summary>
            Gets the Cells.
            </summary>
            <returns> the Cells </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Columns">
            <summary>
            Gets the Columns.
            </summary>
            <returns> the Columns </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.ConditionalFormat">
            <summary>
            Format descriptor describing this row’s conditional format (see Formatting)
               Only returned if the include query string parameter contains format and this 
               row has a conditional format applied.
            </summary>
            <returns> the conditional format </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.CreatedAt">
            <summary>
            Gets the date and time a row was created.
            </summary>
            <returns> the created at </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.CreatedBy">
            <summary>
            User object containing name and email of the creator of this row
            </summary>
            <returns>User object</returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Discussions">
            <summary>
            Gets the Discussions.
            </summary>
            <returns> the Discussions </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Expanded">
            <summary>
            Checks if the row is Expanded.
            </summary>
            <returns> true, if is Expanded </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.FilteredOut">
            <summary>
            true if this row is filtered out by a column filter (and thus is not displayed in the Smartsheet app), 
            false if the row is not filtered out.
            Only returned if the include query string parameter contains filters.
            </summary>
            <returns> true if row is filtered out </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Format">
            <summary>
            Only returned if the include query string parameter contains format and 
            this row has a non-default format applied.
            </summary>
            <returns> the format </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.InCriticalPath">
            <summary>
            Only returned, with a value of true, 
            if the sheet is a project sheet with dependencies enabled 
            and this row is in the critical path.
            </summary>
            <returns> true if is in critical path </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Locked">
            <summary>
            true if the row is locked by the sheet owner or the admin. 
            Returned if the row is locked.
            </summary>
            <returns> true if row is locked </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.LockedForUser">
            <summary>
            True if the row is locked for the requesting user. 
            Returned if the row is locked.
            </summary>
            <returns> true if row is locked for user </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.ModifiedAt">
            <summary>
            Gets and Sets the date and time a row was last modified.
            </summary>
            <returns> the modified at </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.ModifiedBy">
            <summary>
            User object containing name and email of the last person to modify this row
            </summary>
            <returns>User object</returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.ParentRowNumber">
            <summary>
            Gets the parent row number.
            </summary>
            <returns> the parent row number </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Permalink">
            <summary>
            URL that represents a direct link to the Row in Smartsheet 
            Only returned if the include query string parameter contains rowPermalink.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.RowNumber">
            <summary>
            Gets the row number.
            </summary>
            <returns> the row number </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Version">
            <summary>
            Gets the Version number that is incremented every time a sheet is modified.
            </summary>
            <returns> the Version </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.ParentId">
            <summary>
            If this is a child row, the ID of the parent row, else omitted from response
            </summary>
            <returns> the ParentId </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.SiblingId">
            <summary>
            The ID of the previous sibling row at the same hierarchical level of this row, if any, else omitted from response
            </summary>
            <returns> the SiblingId </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Above">
            <summary>
            Flag used to specify the location at which to create or move a row. 
            Optionally used in conjunction with siblingId with a value of true to 
            indicate that the row should be added above the specified sibling row. 
            This attribute can be specified in a request, but will never be present in a response.
            </summary>
            <returns> true if to be added above sibling row </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Indent">
            <summary>
            integer value specifying the number of levels to indent this row. 
            This attribute can be specified in a request, but will never be present in a response.
            </summary>
            <returns> the number of levels to indent this row </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.Outdent">
            <summary>
            integer value specifying the number of levels to outdent this row. 
            This attribute can be specified in a request, but will never be present in a response.
            </summary>
            <returns> the number of levels to outdent this row </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.ToBottom">
            <summary>
            Flag used to specify the location at which to create or move a row. 
            Indicates that the row should be added to the bottom of the sheet, 
            or, if used in conjunction with parentId, added as the last child of the parent. 
            This attribute can be specified in a request, but will never be present in a response.
            </summary>
            <returns> true if row should be added to bottom </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractRow`2.ToTop">
            <summary>
            Flag used to specify the location at which to create or move a row. 
            Indicates that the row should be added to the top of the sheet. 
            This attribute can be specified in a request, but will never be present in a response.
            </summary>
            <returns> true if row should be added to top </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.AbstractRow`2.GetColumnByIndex(System.Int32)">
            <summary>
            Get a column by it's Index.
            </summary>
            <param name="index"> the column Index </param>
            <returns> the column by Index </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.AbstractRow`2.GetColumnById(System.Int64)">
            <summary>
            Get a column by it's ID.
            </summary>
            <param name="columnId"> the column Id </param>
            <returns> the column by Id </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.AbstractSheet`3">
            <summary>
            Represents the Sheet object.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.fromId">
            <summary>
            Represents the ID of the sheet/template from which the sheet was created.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.ownerId">
            <summary>
            Represents the owner Id of the owner
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.accessLevel">
            <summary>
            Represents the access level for the sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.attachments">
            <summary>
            Represents the attachments for the sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.columns">
            <summary>
            Represents the columns for the sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.createdAt">
            <summary>
            Represents the creation timestamp for the sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.crossSheetReferences">
            <summary>
            Get a list of cross-sheet references used by this sheet
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.contactReferences">
            <summary>
            Get a list of contact references used by MULTI_CONTACT columns in this sheet
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.dependenciesEnabled">
            <summary>
            Represents the dependencies enabled flag. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/765727-using-the-dependencies-functionality">
            Dependencies Functionality</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.discussions">
            <summary>
            Represents the discussions for the sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.effectiveAttachmentOptions">
            <summary>
            Represents the effective attachment options
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.favorite">
            <summary>
            Identifies whether the sheet is marked as a favorite
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.filters">
            <summary>
            List of sheet filters
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.ganttEnabled">
            <summary>
            Represents the Gantt enabled flag.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.modifiedAt">
            <summary>
            Represents the modification timestamp for the sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.owner">
            <summary>
            Represents the owner of the sheet
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.permalink">
            <summary>
            Represents the direct URL to the sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.projectSettings">
            <summary>
            Sheet’s project settings containing the working days, non-working days, and length of day for a project sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.readOnly">
            <summary>
            Represents the read only flag for the sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.resourceManagementEnabled">
            <summary>
            Indicates whether resource management is enabled for a sheet
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.rows">
            <summary>
            Represents the rows for the sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.showParentRowsForFilters">
            <summary>
            Identifies whether it is enabled to show parent rows for filters.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.source">
            <summary>
            Represents the source of the sheet
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.totalRowCount">
            <summary>
            Represents the ID of the sheet/template from which the sheet was created.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.userSettings">
            <summary>
            Represents the user settings
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.version">
            <summary>
            Represents the version for the sheet
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AbstractSheet`3.workspace">
            <summary>
            Represents the workspace for the sheet (Id and name only)
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.FromId">
            <summary>
            Gets the Id of the sheet/template from which the sheet was created.
            </summary>
            <returns> the from Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.OwnerId">
            <summary>
            Represents the Id of the owner
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.AccessLevel">
            <summary>
            Gets the access level for the sheet.
            </summary>
            <returns> the access level </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.Attachments">
            <summary>
            Gets the attachments for the sheet.
            </summary>
            <returns> the attachments </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.Columns">
            <summary>
            Gets the columns for the sheet.
            </summary>
            <returns> the columns </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.CreatedAt">
            <summary>
            Gets the date and time the sheet was created.
            </summary>
            <returns> the created at </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.CrossSheetReferences">
            <summary>
            Gets the list of cross-sheet references used by this sheet
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.ContactReferences">
            <summary>
            Gets the list of contact references for this sheet
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.DependenciesEnabled">
            <summary>
            Gets the dependencies enabled flag.
            </summary>
            <returns> the dependencies enabled </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.Discussions">
            <summary>
            Gets the discussions for the sheet.
            </summary>
            <returns> the discussions </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.EffectiveAttachmentOptions">
            <summary>
            Array of enum strings (see Attachment.attachmentType) indicating the allowable attachment options for the current user and sheet
            </summary>
            <returns> list of attachment types </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.Favorite">
            <summary>
            Returned only if the user has marked this sheet as a favorite in their Home tab (value = “true”).
            </summary>
            <returns> true if marked as favorite, false otherwise </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.Filters">
            <summary>
            Gets the list of sheet filters for this sheet.
            </summary>
            <returns> the list of sheet filters </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.GanttEnabled">
            <summary>
            Gets the Gantt enabled flag.
            </summary>
            <returns> the Gantt enabled flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.ModifiedAt">
            <summary>
            Gets the date and time the sheet was last modified.
            </summary>
            <returns> the modified at </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.Owner">
            <summary>
            Represents the email of the owner
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.Permalink">
            <summary>
            Gets the Permalink for the sheet.
            </summary>
            <returns> the Permalink </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.ProjectSettings">
            <summary>
            Gets sheet’s project settings containing the working days, non-working days, and length of day for a project sheet
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.ReadOnly">
            <summary>
            Gets the read only flag for the sheet.
            </summary>
            <returns> the read only </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.ResourceManagementEnabled">
            <summary>
            Indicates whether resource management is enabled.
            </summary>
            <returns> true if enabled, false otherwise </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.Rows">
            <summary>
            Gets the rows for the sheet.
            </summary>
            <returns> the rows </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.ShowParentRowsForFilters">
            <summary>
            Returned only if there are column filters on the sheet. Value = “true” if “show parent rows” is enabled for the filters.
            </summary>
            <returns> “true” if “show parent rows” is enabled for the filters </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.Source">
            <summary>
            A Source object indicating the sheet or template from which this sheet was created.
            </summary>
            <returns> source of sheet </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.TotalRowCount">
            <summary>
            The total number of rows in the sheet.
            </summary>
            <returns> The total number of rows in the sheet </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.UserSettings">
            <summary>
            A SheetUserSettings object containing the current user’s sheet-specific settings..
            </summary>
            <returns> SheetUserSettings object </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.Version">
            <summary>
            Gets the version for the sheet.
            </summary>
            <returns> the version </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AbstractSheet`3.Workspace">
            <summary>
            Gets the workspace (ID and Name only) for the sheet
            </summary>
            <returns> the workspace </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.AbstractSheet`3.GetColumnByIndex(System.Int32)">
            <summary>
            Gets a column by index.
            </summary>
            <param name="index"> the column index </param>
            <returns> the column by index </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.AbstractSheet`3.GetRowByRowNumber(System.Int32)">
            <summary>
            Get a <seealso cref="T:Smartsheet.Api.Models.Row"/> by row number.
            </summary>
            <param name="rowNumber"> the row number </param>
            <returns> the row by row number </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.CopyRowInclusion">
            <summary>
            Represents the list of row elements to copy in addition to the cell data.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CopyRowInclusion.ATTACHMENTS">
            <summary>
            The attachments.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CopyRowInclusion.DISCUSSIONS">
            <summary>
            The discussions.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CopyRowInclusion.CHILDREN">
            <summary>
            Any child rows of the rows specified in the request will also be copied to the destination sheet,
            and parent-child relationships amongst rows will be preserved within the destination sheet;
            if not specified, only the rows specified in the request will be copied.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Group">
            <summary>
            Represents the Group object. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Group.ownerId">
            <summary>
            Group owner's user id
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Group.createdAt">
            <summary>
            Group creation time
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Group.description">
            <summary>
            Group description
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Group.members">
            <summary>
            Array of GroupMember objects
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Group.modifiedAt">
            <summary>
            Time the group was last modified
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Group.owner">
            <summary>
            The group owners email address
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Group.OwnerId">
            <summary>
            Group owner’s User ID
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Group.CreatedAt">
            <summary>
            Time of creation
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Group.Description">
            <summary>
            Group description
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Group.Members">
            <summary>
            List of GroupMember objects
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Group.ModifiedAt">
            <summary>
            Time of last modification
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Group.Owner">
            <summary>
            Group owner’s email address
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Group.CreateGroupBuilder">
            <summary>
            A convenience class for making a Group object with the appropriate fields for creating the group.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.CreateGroupBuilder.#ctor(System.String,System.String)">
            <summary>
            Sets the required attributes for creating a Group.
            </summary>
            <param name="name"> name of group, must be unique within the organization </param>
            <param name="description">description of group </param>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.CreateGroupBuilder.SetName(System.String)">
            <summary>
            Sets the name of the Group.
            </summary>
            <param name="name">the name of the group</param>
            <returns>the create group builder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.CreateGroupBuilder.SetDescription(System.String)">
            <summary>
            Sets the description of the Group.
            </summary>
            <param name="description">the description of the group</param>
            <returns>the create group builder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.CreateGroupBuilder.SetMembers(System.Collections.Generic.IList{Smartsheet.Api.Models.GroupMember})">
            <summary>
            Sets the members of the Group.
            </summary>
            <param name="members">the members of the group</param>
            <returns>the create group builder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.CreateGroupBuilder.GetName">
            <summary>
            Gets the name of the Group.
            </summary>
            <returns>the name</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.CreateGroupBuilder.getDescription">
            <summary>
            Gets the description of the Group.
            </summary>
            <returns>the description</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.CreateGroupBuilder.getMembers">
            <summary>
            Gets the members of the Group.
            </summary>
            <returns>the members</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.CreateGroupBuilder.Build">
            <summary>
            Builds and returns the Group object
            </summary>
            <returns> the Group object built. </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Group.UpdateGroupBuilder">
            <summary>
            A convenience class for making a Group object with the appropriate fields for updating the group.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.UpdateGroupBuilder.#ctor(System.Nullable{System.Int64})">
            <summary>
            Sets the required properties for updating a group.
            </summary>
            <param name="id"> the group id </param>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.UpdateGroupBuilder.SetName(System.String)">
            <summary>
            Sets the Name of the Group.
            </summary>
            <param name="name">the name of the Group</param>
            <returns>the update group builder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.UpdateGroupBuilder.SetDescription(System.String)">
            <summary>
            Sets the Description of the Group.
            </summary>
            <param name="description">the description of the Group</param>
            <returns>the update group builder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.UpdateGroupBuilder.SetOwnerId(System.Nullable{System.Int64})">
            <summary>
            Sets the Owener ID of the Group.
            </summary>
            <param name="ownerId">the owner ID of the Group</param>
            <returns>the update group builder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.UpdateGroupBuilder.GetName">
            <summary>
            Gets the name of the Group.
            </summary>
            <returns>the name</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.UpdateGroupBuilder.GetDescription">
            <summary>
            Gets the description of the Group.
            </summary>
            <returns>the description</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.UpdateGroupBuilder.GetOwnerId">
            <summary>
            Gets the Owner ID of the Group.
            </summary>
            <returns>the owner ID</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Group.UpdateGroupBuilder.Build">
            <summary>
            Builds and returns the Group object.
            </summary>
            <returns>the Group object</returns>
        </member>
        <member name="T:Smartsheet.Api.Models.GroupMember">
            <summary>
            Represents the GroupMember object. </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.GroupMember.AddGroupMemberBuilder">
            <summary>
            A convenience class for creating a GroupMember object with the appropriate fields to add to a group.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.GroupMember.AddGroupMemberBuilder.#ctor(System.String)">
            <summary>
            Sets the require properties for adding a group member.
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:Smartsheet.Api.Models.GroupMember.AddGroupMemberBuilder.Build">
            <summary>
            Builds and returns the GroupMember object.
            </summary>
            <returns>the GroupMember object</returns>
        </member>
        <member name="T:Smartsheet.Api.Models.MoveRowInclusion">
            <summary>
            Represents the list of row elements to move in addition to the cell data.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetLevelExclusion">
            <summary>
            Represents specific elements that can be excluded in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelExclusion.NONEXISTENT_CELLS">
            <summary>
            Excludes the nonexistent cells.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.RowExclusion">
            <summary>
            Represents specific elements that can be excluded in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowExclusion.NONEXISTENT_CELLS">
            <summary>
            Excludes the nonexistent cells.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.SearchObjectType">
            <summary>
            Represents object types.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Recipient">
            <summary>
            Specifies the recipient of an Email.<br />
            The recipient may be either an individual or a group.<br />
            To specify an individual, set the email attribute; to specify a group, set the groupId attribute.<br />
            Either email and groupId may be set, but not both.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Recipient.email">
            <summary>
            recipient email address (if the recipient is an individual)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Recipient.groupId">
            <summary>
            recipient group id (if the recipient is a group)
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Recipient.Email">
            <summary>
            The email address of an individual recipient. If set, GroupId should not be set.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Recipient.GroupId">
            <summary>
            The ID of a group recipient. If set, Email should not be set.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.ReportInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ReportInclusion.DISCUSSIONS">
            <summary>
            Includes the discussions.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ReportInclusion.ATTACHMENTS">
            <summary>
            Includes the attachments.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ReportInclusion.FORMAT">
            <summary>
            Includes the format.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ReportInclusion.SOURCE_SHEETS">
            <summary>
            Includes the source.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ReportInclusion.SHEET_VERSION">
            <summary>
            Includes the sheet version for any source sheet returned by Report.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.CellInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellInclusion.COLUMN_TYPE">
            <summary>
            The columnType attribute for a cell.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.ColumnInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ColumnInclusion.FILTERS">
            <summary>
            The filter that the user has applied to the column (if any)
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.FolderInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderInclusion.OWNER_INFO">
            <summary>
            Includes the owner’s email address and user ID for each sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderInclusion.SOURCE">
            <summary>
            Includes the source for any sheet that was created from another sheet or template.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FolderInclusion.SHEET_VERSION">
            <summary>
            Includes the sheet version for any sheet returned in this folder.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.HomeInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.HomeInclusion.OWNER_INFO">
            <summary>
            Includes the owner’s email address and user ID for each sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.HomeInclusion.SOURCE">
            <summary>
            Includes the source for any sheet that was created from another sheet or template.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.HomeInclusion.SHEET_VERSION">
            <summary>
            Includes the sheet version for any sheet returned in Home.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.WorkspaceInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceInclusion.OWNER_INFO">
            <summary>
            Includes the owner’s email address and user ID for each sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceInclusion.SOURCE">
            <summary>
            Includes the source for any sheet that was created from another sheet or template.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.WorkspaceInclusion.SHEET_VERSION">
            <summary>
            Includes the sheet version for any sheet returned in this Workspace.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetInclusion.OWNER_INFO">
            <summary>
            Includes the owner’s email address and user ID for each sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetInclusion.SOURCE">
            <summary>
            Includes the source for any sheet that was created from another sheet or template.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetInclusion.SHEET_VERSION">
            <summary>
            Includes the sheet version for any sheet returned in this folder.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.UserModel">
            <summary>
            Represents an UserModel.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.admin">
            <summary>
            Represents the Admin flag which allows managing users and accounts.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.alternateEmails">
            <summary>
            An array of AlternateEmail objects representing the alternate email addresses associated with the user account
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.company">
            <summary>
            Company name from the user's profile
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.customWelcomeScreenViewed">
            <summary>
            Timestamp of viewing an Enterprise Custom Welcome Screen by the current user
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.department">
            <summary>
            Department name from the user's profile
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.email">
            <summary>
            Represents the email address.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.firstName">
            <summary>
            Represents the user's first name.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.groupAdmin">
            <summary>
            Flag indicating whether the user is a group admin (can create and edit groups)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.lastLogin">
            <summary>
            Last login time of the current user
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.lastName">
            <summary>
            Represents the user's last name.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.licensedSheetCreator">
            <summary>
            Represents the licensed sheet creator flag which allows creating and owning sheets.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.mobilePhone">
            <summary>
            User's mobile phone number from the profile
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.profileImage">
            <summary>
            Link to the user's profile image
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.resourceViewer">
            <summary>
            Flag indicating whether the user is a resource viewer (can access resource views)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.role">
            <summary>
            User's role
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.sheetCount">
            <summary>
            The number of sheets owned by the current user within the organization
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.status">
            <summary>
            Represents the user status (active, pending, declined).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.title">
            <summary>
            User's title
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserModel.workPhone">
            <summary>
            Work phone number for the user's profile
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.Admin">
            <summary>
            Gets the Admin flag which allows managing users and accounts.
            </summary>
            <returns> the admin </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.AlternateEmails">
            <summary>
            Get list of alternate email addresses associated with this user account
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.Company">
            <summary>
            Gets the user's company name
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.CustomWelcomeScreenViewed">
            <summary>
            Get the timestamp of the viewing of an Enterprise Custom Welcome Screen by the current user
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.Department">
            <summary>
            Gets the user's department
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.Email">
            <summary>
            Current user’s email address
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.FirstName">
            <summary>
            Current user’s first name
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.LastLogin">
            <summary>
            Get the last login time of the current user
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.LastName">
            <summary>
            Current user’s last name
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.LicensedSheetCreator">
            <summary>
            Gets the licensed sheet creator flag that allows creating and owning sheets.
            </summary>
            <returns> the licensed sheet creator </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.GroupAdmin">
            <summary>
            Flag indicating whether the user is a group admin (can create and edit groups)
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.MobilePhone">
            <summary>
            Gets the user's mobile phone number
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.ProfileImage">
            <summary>
            Gets a link to the user's profile image
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.ResourceViewer">
            <summary>
            Flag indicating whether the user is a resource viewer (can access resource views)
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.Role">
            <summary>
            Gets the user's role
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.SheetCount">
            <summary>
            Get the number of sheets owned by the current user within the organization
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.Status">
            <summary>
            Gets the status of the user (active, pending, declined).
            </summary>
            <returns> the Status </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.Title">
            <summary>
            Get the user's title
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModel.WorkPhone">
            <summary>
            Gets the user's work phone
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.AccessLevel">
            <summary>
            Represents access levels that Users can have. </summary>
            <seealso href="http://www.Smartsheet.com/developers/Api-documentation#h.umfgm4xt25dq">Access Level Help</seealso>
        </member>
        <member name="T:Smartsheet.Api.Models.AccessScope">
            <summary>
            Represents the Type of access that is granted on a given sheet. </summary>
            <seealso href="http://www.Smartsheet.com/developers/Api-documentation#h.89hb3ivv7eum">Access Scopes Help</seealso>
        </member>
        <member name="T:Smartsheet.Api.Models.Account">
            <summary>
            Represents the Account object.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Attachment">
            <summary>
            Represents the Attachment object. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/518408-uploading-Attachments">Help Uploading 
            Attachments</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.Attachment.parentId">
            <summary>
            Represents the parent ID. 
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Attachment.attachmentType">
            <summary>
            Represents the attachment Type.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Attachment.attachmentSubType">
            <summary>
            Represents the attachment sub Type.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Attachment.createdAt">
            <summary>
            Represents the creation timestamp.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Attachment.createdBy">
            <summary>
            User object containing name and email of the creator of this attachment
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Attachment.description">
            <summary>
            attachment description
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Attachment.mimeType">
            <summary>
            Represents the MIME Type. 
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Attachment.parentType">
            <summary>
            Represents the parent Type.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Attachment.sizeInKb">
            <summary>
            Represents the attachment size.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Attachment.url">
            <summary>
            Represents the URL.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Attachment.urlExpiresInMillis">
            <summary>
            Represents the URL expiration time.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Attachment.ParentId">
            <summary>
            Gets the parent Id.
            </summary>
            <returns> the parent Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Attachment.AttachmentType">
            <summary>
            Gets the attachment Type.
            </summary>
            <returns> the attachment Type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Attachment.AttachmentSubType">
            <summary>
            Gets the attachment sub Type.
            </summary>
            <returns> the attachment sub Type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Attachment.CreatedAt">
            <summary>
            Gets the created at.
            </summary>
            <returns> the created at </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Attachment.CreatedBy">
            <summary>
            User object containing name and email of the creator of this attachment
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Attachment.Description">
            <summary>
            Applicable when attaching to sheet or row only
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Attachment.MimeType">
            <summary>
            Gets the mime Type.
            </summary>
            <returns> the mime Type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Attachment.ParentType">
            <summary>
            Gets the parent Type.
            </summary>
            <returns> the parent Type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Attachment.SizeInKb">
            <summary>
            Gets the size in kb.
            </summary>
            <returns> the size in kb </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Attachment.Url">
            <summary>
            Gets the URL.
            </summary>
            <returns> The Url. </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Attachment.UrlExpiresInMillis">
            <summary>
            Gets the Url expires in millis.
            </summary>
            <returns> the Url expires in millis </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Attachment.CreateAttachmentBuilder">
            <summary>
            A convenience class for quickly creating an Attachment to a URL.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Attachment.CreateAttachmentBuilder.#ctor(System.String,System.Nullable{Smartsheet.Api.Models.AttachmentType})">
            <summary>
            Sets the required attributes for creating an Attachment.
            </summary>
            <param name="url">Attachment temporary URL (files only)</param>
            <param name="attachmentType">Attachment type (one of FILE, GOOGLE_DRIVE,
            LINK, BOX_COM, DROPBOX, or EVERNOTE)</param>
        </member>
        <member name="M:Smartsheet.Api.Models.Attachment.CreateAttachmentBuilder.SetName(System.String)">
            <summary>
            Attachment name
            </summary>
            <param name="name">Attachment name</param>
            <returns> the CreateAttachmentBuilder object </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Attachment.CreateAttachmentBuilder.SetDescription(System.String)">
            <summary>
            Applicable when attaching to sheet or row only
            </summary>
            <param name="description"> the description </param>
            <returns> the CreateAttachmentBuilder object </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Attachment.CreateAttachmentBuilder.SetUrl(System.String)">
            <summary>
            Attachment temporary URL (files only)
            </summary>
            <param name="url"> the url </param>
            <returns> the CreateAttachmentBuilder object </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Attachment.CreateAttachmentBuilder.SetAttachmentSubType(System.Nullable{Smartsheet.Api.Models.AttachmentSubType})">
            <summary>
            Attachment sub type, only
            for GOOGLE_DRIVE type attachments; one of
            (DOCUMENT, SPREADSHEET, PRESENTATION, PDF, DRAWING)
            </summary>
            <param name="attachmentSubType"> the attachmentSubType </param>
            <returns> the CreateAttachmentBuilder object </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Attachment.CreateAttachmentBuilder.Build">
            <summary>
            Returns the Attachment.
            </summary>
            <returns> the attachment </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.AttachmentParentType">
            <summary>
            Represents the attachment parent Type.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.AttachmentSubType">
            <summary>
            Represents the attachment sub Type.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.AttachmentType">
            <summary>
            Represents the Type of attachment.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.AutoNumberFormat">
            <summary>
            Represents the AutoNumberFormat object. It describes how the the System Column Type of "AUTO_NUMBER" is auto-generated </summary>
            <seealso href="http://www.Smartsheet.com/developers/Api-documentation#h.xu85ymcuwnmq">Auto Number Format API Documentation</seealso>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/1108408-auto-numbering">Auto Number Format Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.AutoNumberFormat.fill">
            <summary>
            Represents the Fill. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutoNumberFormat.prefix">
            <summary>
            Represents the Prefix. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutoNumberFormat.startingNumber">
            <summary>
            Represents the starting number. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.AutoNumberFormat.suffix">
            <summary>
            Represents the Suffix. </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.AutoNumberFormat.Fill">
            <summary>
            Gets the Fill.
            </summary>
            <returns> the Fill </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutoNumberFormat.Prefix">
            <summary>
            Gets the Prefix.
            </summary>
            <returns> the Prefix </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutoNumberFormat.StartingNumber">
            <summary>
            Gets the starting number.
            </summary>
            <returns> the starting number </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.AutoNumberFormat.Suffix">
            <summary>
            Gets the Suffix.
            </summary>
            <returns> the Suffix </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Cell">
            <summary>
            Represents the Cell object that holds data in a sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.columnId">
            <summary>
            Represents the column Id for this cell.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.columnType">
            <summary>
            Represents the column Type.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.conditionalFormat">
            <summary>
            The format descriptor describing this cell's conditional format. Only returned if the include query 
            string parameter contains format and this cell has a conditional format applied.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.displayValue">
            <summary>
            Represents the display value.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.format">
            <summary>
            The format descriptor. Only returned if the include query string parameter contains format and this cell 
            has a non-default format applied.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.formula">
            <summary>
            The formula for the cell.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.hyperlink">
            <summary>
            Represents a hyperlink to a URL, sheet, or report.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.image">
            <summary>
            The image that the cell contains. Only returned if the cell contains an image
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.linkInFromCell">
            <summary>
            An inbound link from a cell in another sheet. This cell's value mirrors the linked cell's value
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.linksOutToCells">
            <summary>
            An array of CellLink objects. Zero or more outbound links from this cell to cells in other sheets 
            whose values mirror this cell's value
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.objectValue">
            <summary>
            is an object representation of a cell's value and is currently used for adding or updating predecessor cell values
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.overrideValidation">
            <summary>
            (Admin only) Indicates whether the cell value can contain a value outside of the validation limits (value = true). 
            When using this parameter, you must also set strict to false to bypass value type checking. This property is honored 
            for POST or PUT actions that update rows.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.strict">
            <summary>
            Represents the Strict flag.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Cell.value">
            <summary>
            Represents the value.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.ColumnId">
            <summary>
            Gets the column Id for this cell.
            </summary>
            <returns> the column Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.ColumnType">
            <summary>
            Gets the column Type.
            </summary>
            <returns> the Type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.ConditionalFormat">
            <summary>
            The format descriptor describing this cell's conditional format. Only returned if the include query string 
            parameter contains format and this cell has a conditional format applied.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.DisplayValue">
            <summary>
            Gets the display value used on special columns such as "Contact List".
            </summary>
            <returns> the display value </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.Format">
            <summary>
            The format descriptor. Only returned if the include query string parameter contains format and this cell 
            has a non-default format applied.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.Formula">
            <summary>
            Gets the formula for this cell.
            </summary>
            <returns> the formula </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.Hyperlink">
            <summary>
            A hyperlink to a URL, sheet, or report
            </summary>
            <returns> the link </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.Image">
            <summary>
            Gets the Strict value for this cell.
            </summary>
            <seealso href="http://www.Smartsheet.com/developers/Api-documentation#h.lay2yj3x1pp8">Column Types</seealso>
            <returns> the Strict </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.LinkInFromCell">
            <summary>
            An inbound link from a cell in another sheet. This cell's value mirrors the linked cell's value.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.LinksOutToCells">
            <summary>
            An array of CellLink objects. Zero or more outbound links from this cell to cells in other sheets 
            whose values mirror this cell's value.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.ObjectValue">
            <summary>
            An object representation of a cell's value that is currently used for adding or updating predecessor cell values.
            </summary>
            <returns> the ObjectValue </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.OverrideValidation">
            <summary>
            (Admin only) Indicates whether the cell value can contain a value outside of the validation limits (value = true). 
            When using this parameter, you must also set strict to false to bypass value type checking. This property is 
            honored for POST or PUT actions that update rows.
            </summary>
            <returns> the override validation flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.Strict">
            <summary>
            Gets the Strict value for this cell.
            </summary>
            <seealso href="http://www.Smartsheet.com/developers/Api-documentation#h.lay2yj3x1pp8">Column Types</seealso>
            <returns> the Strict </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Cell.Value">
            <summary>
            Gets the value.
            </summary>
            <returns> the value </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Cell.AddCellBuilder">
            <summary>
            A convenience class for adding a cell with the necessary fields for inserting into a list of cells.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.#ctor(System.Nullable{System.Int64},System.Object)">
            <summary>
            Set required properties.
            </summary>
            <param name="columnId">the column Id</param>
            <param name="value">the value of the cell</param>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.SetColumnId(System.Nullable{System.Int64})">
            <summary>
            Sets the column Id
            </summary>
            <param name="columnId">the column Id</param>
            <returns>this AddCellBuilder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.SetValue(System.Object)">
            <summary>
            Sets the cell value
            </summary>
            <param name="value">the value</param>
            <returns>this AddCellBuilder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.SetStrict(System.Nullable{System.Boolean})">
            <summary>
            Sets whether cells is Strict or not.
            </summary>
            <param name="strict">the Strict option</param>
            <returns>this AddCellBuilder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.SetFormat(System.String)">
            <summary>
            Sets the format.
            </summary>
            <param name="format">the format</param>
            <returns>this AddCellBuilder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.SetHyperlink(Smartsheet.Api.Models.Hyperlink)">
            <summary>
            Sets the hyperlink.
            </summary>
            <param name="hyperlink">the hyperlink</param>
            <returns> this AddCellBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.GetColumnId">
            <summary>
            Gets the column Id.
            </summary>
            <returns>the column Id</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.GetStrict">
            <summary>
            Gets the Strict option.
            </summary>
            <returns>the Strict option</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.GetFormat">
            <summary>
            Gets the format.
            </summary>
            <returns>the format</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.GetHyperlink">
            <summary>
            Gets the hyperlink.
            </summary>
            <returns>the hyperlink</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.AddCellBuilder.Build">
            <summary>
            Builds and returns the Cell object.
            </summary>
            <returns>Cell object</returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Cell.UpdateCellBuilder">
            <summary>
            A convenience class for updating a cell with the necessary fields for inserting into a list of cells.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.#ctor(System.Nullable{System.Int64},System.Object)">
            <summary>
            Set required properties.
            </summary>
            <param name="columnId">required</param>
            <param name="value">required</param>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.SetColumnId(System.Nullable{System.Int64})">
            <summary>
            Sets the column Id
            </summary>
            <param name="columnId">columnId</param>
            <returns>this UpdateCellBuilder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.SetValue(System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">(required)</param>
            <returns>this UpdateCellBuilder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.SetStrict(System.Nullable{System.Boolean})">
            <summary>
            Sets the strict.
            </summary>
            <param name="strict">(optional)</param>
            <returns>this UpdateCellBuilder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.SetFormat(System.String)">
            <summary>
            Sets the format.
            </summary>
            <param name="format">(optional)</param>
            <returns>this UpdateCellBuilder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.SetHyperlink(Smartsheet.Api.Models.Hyperlink)">
            <summary>
            (optional) with exactly one of the following attributes set:
            <list type="bullet">
            <item>url</item>
            <item>sheetId</item>
            <item>reportId</item>
            </list>
            </summary>
            <param name="hyperlink"> Link object </param>
            <returns> this UpdateCellBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.SetLinkInFromCell(Smartsheet.Api.Models.CellLink)">
            <summary>
            (optional) with all of the following attributes set:
            <list type="bullet">
            <item>sheetId</item>
            <item>rowId</item>
            <item>columnId</item>
            </list>
            </summary>
            <param name="linkInFromCell"> CellLink object </param>
            <returns> this UpdateCellBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.GetColumnId">
            <summary>
            Gets the column Id.
            </summary>
            <returns>the column Id.</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>the value.</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.GetStrict">
            <summary>
            Gets the Strict.
            </summary>
            <returns>
            the strict.
            </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.GetFormat">
            <summary>
            Gets the format.
            </summary>
            <returns>the format</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.GetHyperlink">
            <summary>
            Gets the hyperLink
            </summary>
            <returns>the hyperlink</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.GetLinkInFromCell">
            <summary>
            Gets link in from cell.
            </summary>
            <returns>the link in from cell</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Cell.UpdateCellBuilder.Build">
            <summary>
            Builds and returns the Cell object.
            </summary>
            <returns>Cell object</returns>
        </member>
        <member name="T:Smartsheet.Api.Models.CellHistory">
            <summary>
            Represents CellHistory object. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/518314-viewing-cell-history">Cell History Documentation </seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.CellHistory.modifiedAt">
            <summary>
            The date the cell was modified. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellHistory.modifiedBy">
            <summary>
            Represents the user that modified the cell.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CellHistory.ModifiedAt">
            <summary>
            Gets the date the cell was modified.
            </summary>
            <returns> the modified at </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.CellHistory.ModifiedBy">
            <summary>
            Gets the user that modified the cell.
            </summary>
            <returns> the modified by </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.CellLink">
            <summary>
            Represents a link to a cell in a different sheet.
            <remarks>If status is not “OK” (i.e., there is a problem with the link),
            any or all of the following attributes may be null: sheetId, rowId, columnId</remarks>
            <para>You can create and modify cell links by using any API operation that creates or updates cell data.
            Creating or updating cell links via the cell.linkInFromCell attribute is a special operation.
            A given row or cell update operation may contain only link updates, or no link updates.
            Attempting to mix row/cell updates with cell link updates will result in error code 1115.</para>
            <para>When creating a cell link, cell.value must be null (the data will be pulled from the linked cell).</para>
            <para>A cell may not contain both a hyperlink and a cell link, so hyperlink and linkInFromCell may never both be non-null at the same time.</para>
            <para>A cell link can only be added to an existing cell, so the cell.linkInFromCell attribute is not allowed when POSTing a new row to a sheet.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellLink.columnId">
            <summary>
            The column Id of the linked cell
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellLink.rowId">
            <summary>
            The row Id of the linked cell
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellLink.sheetId">
            <summary>
            The sheet Id of the sheet that the linked cell belongs to
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellLink.sheetName">
            <summary>
            The sheet name of the linked cell
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellLink.status">
            <summary>
            One of the following values:
            OK: the link is in a good state
            BROKEN: the row or sheet linked to was deleted
            INACCESSIBLE: the sheet linked to cannot be viewed by this user
            Several other values indicating unusual error conditions: BLOCKED, CIRCULAR, DISABLED, INVALID, and NOT_SHARED. */
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.CellLink.isNull">
            <summary>
            If true, update will serialize a null to reset the linkInFromCell
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CellLink.ColumnId">
            <summary>
            Column Id of the linked cell
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CellLink.RowId">
            <summary>
            Row Id of the linked cell
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CellLink.SheetId">
            <summary>
            Sheet Id of the sheet that the linked cell belongs to
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CellLink.SheetName">
            <summary>
            Sheet name of the linked cell
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CellLink.Status">
            <summary>
            One of the following values:
            <list type="bullet">
            <item><term>OK:</term><description>the link is in a good state</description></item>
            <item><term>BROKEN:</term><description>the row or sheet linked to was deleted</description></item>
            <item><term>INACCESSIBLE:</term><description>the sheet linked to cannot be viewed by this user</description></item>
            <item><description>Several other values indicating unusual error conditions: 
            BLOCKED, CIRCULAR, DISABLED, INVALID, and NOT_SHARED.</description></item>
            </list>
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Column">
            <summary>
            Represents the Column object.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.systemColumnType">
            <summary>
            Represents the system column Type.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.type">
            <summary>
            Represents the column Type.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.autoNumberFormat">
            <summary>
            Represents the format for the auto-generated numbers (if the SystemColumnType is an AUTO_NUMBER).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.contactOptions">
            <summary>
            List containing contact options
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.format">
            <summary>
            The format descriptor. Only returned if the include query string parameter contains format and this column 
            has a non-default format applied to it.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.hidden">
            <summary>
            Represents the hidden flag for the column.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.index">
            <summary>
            Represents the position, (zero-based).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.locked">
            <summary>
            Indicates whether the column is locked. In a response, a value of true indicates that the column has 
            been locked by the sheet owner or the admin.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.lockedForUser">
            <summary>
            Indicates whether the column is locked for the requesting user. This attribute may be present in a 
            response, but cannot be specified in a request.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.options">
            <summary>
            Represents the list of options for the column.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.primary">
            <summary>
            Represents the primary flag.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.symbol">
            <summary>
            Represents the symbol used for the column.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.tags">
            <summary>
            Represents the tags to indicate a special Type of column.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.title">
            <summary>
            Represents the title.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.validation">
            <summary>
            Indicates whether validation has been enabled for the column (value = true)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.version">
            <summary>
            Determines the compatibility level of this client, 0 for existing types, 1 for multi-assign,
            greather than 1 for future types.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.width">
            <summary>
            Display width of the column in pixels
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.SystemColumnType">
            <summary>
            Gets the system column Type.
            </summary>
            <returns> the system column Type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Type">
            <summary>
            Gets the column Type.
            </summary>
            <returns> the Type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.AutoNumberFormat">
            <summary>
            Gets the format for the auto-generated numbers.
            </summary>
            <returns> the auto number format </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.ContactOptions">
            <summary>
            Gets array of ContactOption objects to specify a pre-defined list of values for the column. 
            Column type must be CONTACT_LIST
            </summary>
            <returns> the contact options list </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Format">
            <summary>
            <para>The format descriptor.</para>
            Only returned if the include query string parameter contains format and this
            column has a non-default format applied to it.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Hidden">
            <summary>
            Gets the hidden flag.
            </summary>
            <returns> the hidden flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Index">
            <summary>
            Gets or sets the position of the column (zero-based).
            </summary>
            <returns> the index </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Locked">
            <summary>
            Flag indicating whether the column is locked. In a response,
            a value of true indicates that the column has been locked by the sheet owner or the admin.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.LockedForUser">
            <summary>
            Flag indicating whether the column is locked for the requesting user.
            This attribute may be present in a response, but cannot be specified in a request.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Options">
            <summary>
            Gets the list of options for the column.
            </summary>
            <returns> the options </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Primary">
            <summary>
            Gets the primary flag for the column.
            </summary>
            <returns> the primary flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Symbol">
            <summary>
            Gets the symbol for the column.
            </summary>
            <returns> the symbol </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Tags">
            <summary>
            Gets the tags that indicate a special Type of column.
            </summary>
            <returns> the tags </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Title">
            <summary>
            Gets the title for the column.
            </summary>
            <returns> the title </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Validation">
            <summary>
            Indicates whether validation has been enabled for the column (value = true)
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Version">
            <summary>
            Gets the column compatiblity version, 0 for existing types, 1 for multi-assign, > 1 future use
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Column.Width">
            <summary>
            Display width of the column in pixels
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Column.AddColumnBuilder">
            <summary>
            A convenience class to help create a column object with the appropriate fields for adding to a sheet.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{Smartsheet.Api.Models.ColumnType})">
            <summary>
            Sets the required properties for adding a column to a sheet.
            </summary>
            <param name="title"> the column title </param>
            <param name="index"> the column index (zero-based) </param>
            <param name="type"> the column type </param>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.AddColumnBuilder.index">
            <summary>
            The position of the column. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.AddColumnBuilder.title">
            <summary>
            The title. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.AddColumnBuilder.type">
            <summary>
            The type. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.AddColumnBuilder.options">
            <summary>
            The options. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.AddColumnBuilder.symbol">
            <summary>
            The symbol. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.AddColumnBuilder.systemColumnType">
            <summary>
            The system column type. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.AddColumnBuilder.autoNumberFormat">
            <summary>
            The auto number format. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.AddColumnBuilder.width">
            <summary>
            Display width of the column in pixels
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.AddColumnBuilder.locked">
            <summary>
            Indicates whether the column is locked. In a response, a value of true indicates that the column has been locked 
            by the sheet owner or the admin.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.SetIndex(System.Int32)">
            <summary>
            Sets the position for the column.
            </summary>
            <param name="index"> the position </param>
            <returns> the add column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.SetWidth(System.Nullable{System.Int64})">
            <summary>
            Sets the primary flag for the column.
            </summary>
            <param name="width"> the width </param>
            <returns> the add column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.SetTitle(System.String)">
            <summary>
            Sets the title for the column.
            </summary>
            <param name="title"> the title </param>
            <returns> the adds the column to sheet builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.SetType(System.Nullable{Smartsheet.Api.Models.ColumnType})">
            <summary>
            Sets the type for the column.
            </summary>
            <param name="type"> the type </param>
            <returns> the adds the column to sheet builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.SetOptions(System.Collections.Generic.IList{System.String})">
            <summary>
            Sets the options for the column.
            </summary>
            <param name="options"> the options </param>
            <returns> the adds the column to sheet builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.SetSystemColumnType(System.Nullable{Smartsheet.Api.Models.SystemColumnType})">
            <summary>
            Sets the system column type.
            </summary>
            <param name="systemColumnType"> the system column type </param>
            <returns> the adds the column to sheet builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.SetAutoNumberFormat(Smartsheet.Api.Models.AutoNumberFormat)">
            <summary>
            Sets the format for an auto number column.
            </summary>
            <param name="autoNumberFormat"> the auto number format </param>
            <returns> the adds the column to sheet builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.SetLocked(System.Boolean)">
            <summary>
            Sets whether the column is locked.
            </summary>
            <param name="locked"> the flag </param>
            <returns> the add column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.GetIndex">
            <summary>
            Gets the index.
            </summary>
            <returns> the index </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.GetTitle">
            <summary>
            Gets the title. </summary>
            <returns> the title </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.GetType">
            <summary>
            Gets the type for the column. </summary>
            <returns> the type </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.GetOptions">
            <summary>
            Gets the option for the column. </summary>
            <returns> the option </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.SetSymbol(System.Nullable{Smartsheet.Api.Models.Symbol})">
            <summary>
            Sets the symbol for the column.
            </summary>
            <param name="symbol"> the symbol </param>
            <returns> the adds the column to sheet builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.GetSymbol">
            <summary>
            Gets the symbol for the column. </summary>
            <returns> the symbol </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.GetSystemColumnType">
            <summary>
            Gets the system column type. </summary>
            <returns> the system column type </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.GetAutoNumberFormat">
            <summary>
            Gets the format for an auto number column. </summary>
            <returns> the format for an auto number column </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.GetWidth">
            <summary>
            Gets the display width. </summary>
            <returns> the display width </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.GetLocked">
            <summary>
            Gets the flag whether column is locked or not. </summary>
            <returns> the locked flag </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.AddColumnBuilder.Build">
            <summary>
            Builds the column.
            </summary>
            <returns> the column </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder">
            <summary>
            A convenience class to help create a column object with the appropriate fields for adding to a sheet being created.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{Smartsheet.Api.Models.ColumnType})">
            <summary>
            Sets the required properties for a column.
            </summary>
            <param name="title"> must be unique within the sheet </param>
            <param name="primary"> one and only one column may be a primary column </param>
            <param name="type"> must be set to TEXT_NUMBER if column is primary </param>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.title">
            <summary>
            The title. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.type">
            <summary>
            The type. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.options">
            <summary>
            The options. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.symbol">
            <summary>
            The symbol. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.systemColumnType">
            <summary>
            The system column type. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.autoNumberFormat">
            <summary>
            The auto number format. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.width">
            <summary>
            Display width of the column in pixels
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.primary">
            <summary>
            Returned only if the column is the primary column (value = true)
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.SetPrimary(System.Nullable{System.Boolean})">
            <summary>
            Sets whether the column is the primary column.
            </summary>
            <param name="primary"> the primary </param>
            <returns> the CreateSheetColumnBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.SetWidth(System.Nullable{System.Int64})">
            <summary>
            Sets the primary flag for the column.
            </summary>
            <param name="width"> the width </param>
            <returns> the CreateSheetColumnBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.SetTitle(System.String)">
            <summary>
            Sets the title for the column.
            </summary>
            <param name="title"> the title </param>
            <returns> the adds the column to sheet builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.SetType(System.Nullable{Smartsheet.Api.Models.ColumnType})">
            <summary>
            Sets the type for the column.
            </summary>
            <param name="type"> the type </param>
            <returns> the CreateSheetColumnBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.SetOptions(System.Collections.Generic.IList{System.String})">
            <summary>
            Sets the options for the column.
            </summary>
            <param name="options"> the options </param>
            <returns> the CreateSheetColumnBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.SetSystemColumnType(System.Nullable{Smartsheet.Api.Models.SystemColumnType})">
            <summary>
            Sets the system column type.
            </summary>
            <param name="systemColumnType"> the system column type </param>
            <returns> the CreateSheetColumnBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.SetAutoNumberFormat(Smartsheet.Api.Models.AutoNumberFormat)">
            <summary>
            Sets the format for an auto number column.
            </summary>
            <param name="autoNumberFormat"> the auto number format </param>
            <returns> the CreateSheetColumnBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.GetPrimary">
            <summary>
            Gets the whether the column is the primary column.
            </summary>
            <returns> the primary </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.GetTitle">
            <summary>
            Gets the title. </summary>
            <returns> the title </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.GetType">
            <summary>
            Gets the type for the column. </summary>
            <returns> the type </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.GetOptions">
            <summary>
            Gets the option for the column. </summary>
            <returns> the option </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.SetSymbol(System.Nullable{Smartsheet.Api.Models.Symbol})">
            <summary>
            Sets the symbol for the column.
            </summary>
            <param name="symbol"> the symbol </param>
            <returns> the CreateSheetColumnBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.GetSymbol">
            <summary>
            Gets the symbol for the column. </summary>
            <returns> the symbol </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.GetSystemColumnType">
            <summary>
            Gets the system column type. </summary>
            <returns> the system column type </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.GetAutoNumberFormat">
            <summary>
            Gets the format for an auto number column. </summary>
            <returns> the format for an auto number column </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.GetWidth">
            <summary>
            Gets the display width. </summary>
            <returns> the display width </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.CreateSheetColumnBuilder.Build">
            <summary>
            Builds the column.
            </summary>
            <returns> the column </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Column.UpdateColumnBuilder">
            <summary>
            The convenience class UpdateColumnBuilder to build a Column object to be updated, moved, and/or renamed.
            The column's index and title properties must be set.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.UpdateColumnBuilder.index">
            <summary>
            The position of the column. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.UpdateColumnBuilder.title">
            <summary>
            The title for the column. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.UpdateColumnBuilder.type">
            <summary>
            The type of the column. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.UpdateColumnBuilder.options">
            <summary>
            The options for the column. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.UpdateColumnBuilder.symbol">
            <summary>
            The symbol for the column. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.UpdateColumnBuilder.systemColumnType">
            <summary>
            The system column type. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.UpdateColumnBuilder.autoNumberFormat">
            <summary>
            The format for an auto number column. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.UpdateColumnBuilder.width">
            <summary>
            The display width of the column in pixels. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.UpdateColumnBuilder.format">
            <summary>
            The format descriptor. Only returned if the include query string parameter contains format and this column 
            has a non-default format applied to it.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Column.UpdateColumnBuilder.locked">
            <summary>
            Indicates whether the column is locked. In a response, a value of true indicates that the column has been locked 
            by the sheet owner or the admin.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.#ctor(System.Int64,System.String,System.Int32)">
            <summary>
            Sets the required properties for updating a column.
            </summary>
            <param name="id"> the id of the column </param>
            <param name="title"> the new column title </param>
            <param name="index"> the new column index (zero-based) </param>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.SetIndex(System.Int32)">
            <summary>
            Sets the position for the column.
            </summary>
            <param name="index"> the position </param>
            <returns> the modify column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.SetFormat(System.String)">
            <summary>
            Sets the format descriptor.
            </summary>
            <param name="format"> the format </param>
            <returns> the modify column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.SetTitle(System.String)">
            <summary>
            Sets the title for the column.
            </summary>
            <param name="title"> the title </param>
            <returns> the modify column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.SetType(System.Nullable{Smartsheet.Api.Models.ColumnType})">
            <summary>
            Sets the type for the column.
            </summary>
            <param name="type"> the type </param>
            <returns> the modify column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.SetOptions(System.Collections.Generic.IList{System.String})">
            <summary>
            Sets the options for the column.
            </summary>
            <param name="options"> the options </param>
            <returns> the modify column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.SetSymbol(Smartsheet.Api.Models.Symbol)">
            <summary>
            Sets the symbol for the column.
            </summary>
            <param name="symbol"> the symbol </param>
            <returns> the modify column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.SetSystemColumnType(Smartsheet.Api.Models.SystemColumnType)">
            <summary>
            Sets the system column type for the column.
            </summary>
            <param name="systemColumnType"> the system column type </param>
            <returns> the modify column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.SetAutoNumberFormat(Smartsheet.Api.Models.AutoNumberFormat)">
            <summary>
            Sets the format for an auto number column.
            </summary>
            <param name="autoNumberFormat"> the auto number format </param>
            <returns> the modify column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.SetWidth(System.Int64)">
            <summary>
            Sets the display width.
            </summary>
            <param name="width">the width</param>
            <returns>the updated column builder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.SetLocked(System.Boolean)">
            <summary>
            Sets whether the column is locked.
            </summary>
            <param name="locked"> the flag </param>
            <returns> the modify column builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.GetFormat">
            <summary>
            Gets the format.
            </summary>
            <returns> the index </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.GetIndex">
            <summary>
            Gets the index.
            </summary>
            <returns> the index </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.GetTitle">
            <summary>
            Gets the title.
            </summary>
            <returns> the title </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.GetType">
            <summary>
            Gets the type.
            </summary>
            <returns> the type </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.GetOptions">
            <summary>
            Gets the options.
            </summary>
            <returns> the options </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.GetSymbol">
            <summary>
            Gets the symbol.
            </summary>
            <returns> the symbol </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.GetSystemColumnType">
            <summary>
            Gets the system column type.
            </summary>
            <returns> the system column type </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.GetAutoNumberFormat">
            <summary>
            Gets the auto number format.
            </summary>
            <returns> the auto number format </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Column.UpdateColumnBuilder.Build">
            <summary>
            Builds the column.
            </summary>
            <returns> the column </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.ColumnTag">
            <summary>
            Represents the Tags to indicate a special column.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.ColumnType">
            <summary>
            Represents column types.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ColumnType.TEXT_NUMBER">
            <summary>
            Represents the TEXT_NUMBER column Type. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ColumnType.DATE">
            <summary>
            Represents the DATE column Type. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ColumnType.DATETIME">
            <summary>
            Represents the DATETIME (auto number) column Type </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ColumnType.CONTACT_LIST">
            <summary>
            Represents the CONTACT_LIST column Type. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ColumnType.CHECKBOX">
            <summary>
            Represents the CHECKBOX column Type. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ColumnType.PICKLIST">
            <summary>
            Represents the PICKLIST column Type. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ColumnType.DURATION">
            <summary>
            Only for dependency-enabled project sheets
            The API does not support setting a Column to this type. (This can only be done through the Smartsheet web application when configuring a project sheet.)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ColumnType.PREDECESSOR">
            <summary>
            Only for dependency-enabled project sheets
            The API does not support setting a Column to this type, or updating data in a column of this type. 
            (This can only be done through the Smartsheet web application when configuring a project sheet.)</summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ColumnType.ABSTRACT_DATETIME">
            <summary>
            Represents a project sheet’s Start and End dates.
            Only for dependency-enabled project sheets
            The API does not support setting a Column to this type. (This can only be done through the Smartsheet 
            web application when configuring a project sheet.) Additionally, the API does not support updating data 
            in the End Date column under any circumstance, and does not support updating data in the Start Date column
            if Predecessor is set for that row. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.ColumnType.MULTI_CONTACT_LIST">
            <summary>
            Represents the MULTI_CONTACT_LIST (multi-assign) column type. </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Comment">
            <summary>
            Represents the Comment object.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Comment.discussionId">
            <summary>
            Represents the discussion ID. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Comment.attachments">
            <summary>
            Represents the Attachments for the Comment. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Comment.createdAt">
            <summary>
            The date the Comment was created. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Comment.createdBy">
            <summary>
            Represents the user that created the Comment. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Comment.modifiedAt">
            <summary>
            The date the Comment was last modified. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Comment.text">
            <summary>
            Represents the Text for the Comment. </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Comment.DiscussionId">
            <summary>
            Gets the discussion Id.
            </summary>
            <returns> the discussion Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Comment.Attachments">
            <summary>
            Gets the Comment Attachments.
            </summary>
            <returns> the Attachments </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Comment.CreatedAt">
            <summary>
            Gets the date the Comment was created.
            </summary>
            <returns> the created at </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Comment.CreatedBy">
            <summary>
            Gets user that created the Comment.
            </summary>
            <returns> the created by </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Comment.ModifiedAt">
            <summary>
            Gets the date the Comment was modified.
            </summary>
            <returns> the modified at </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Comment.Text">
            <summary>
            Gets the Text for the Comment.
            </summary>
            <returns> the Text </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Comment.AddCommentBuilder">
            <summary>
            A convenience class to generate a Comment with the appropriate fields for adding it to a sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Comment.AddCommentBuilder.text">
            <summary>
            The Text. </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Comment.AddCommentBuilder.SetText(System.String)">
            <summary>
            The Text for the Comment.
            </summary>
            <param name="text"> the Text </param>
            <returns> the adds the Comment builder </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Comment.AddCommentBuilder.Text">
            <summary>
            Gets the Text for the Comment. </summary>
            <returns> the Text </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Comment.AddCommentBuilder.Build">
            <summary>
            Builds the Comment.
            </summary>
            <returns> the Comment </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.CopyOrMoveRowDestination">
            <summary>
            Information on the destination of the rows that were copied or moved.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CopyOrMoveRowDestination.SheetId">
            <summary>
            ID of the destination sheet
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.CopyOrMoveRowDirective">
            <summary>
            A CopyOrMoveRowDirective object that holds information on the direction of the rows being copied or moved to.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CopyOrMoveRowDirective.RowIds">
            <summary>
            The IDs of the rows to move or copy from the source sheet
            </summary>
            <remarks>
            Up to 5,000 row IDs can be specified in the request,
            but if the total number of rows in the destination sheet after the copy exceeds the Smartsheet row limit,
            an error response will be returned.
            </remarks>
        </member>
        <member name="P:Smartsheet.Api.Models.CopyOrMoveRowDirective.To">
            <summary>
            A CopyOrMoveRowDestination object that identifies the destination sheet
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.CopyOrMoveRowResult">
            <summary>
            Result of rows moved or copies.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CopyOrMoveRowResult.DestinationSheetId">
            <summary>
            ID of the destination sheet
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.CopyOrMoveRowResult.RowMappings">
            <summary>
            List of RowMapping objects
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Criteria">
            <summary>
            Represents the Criteria object.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Criteria.columnId">
            <summary>
            column ID
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Criteria.operatorCriteria">
            <summary>
            Represents the Text for the Comment. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Criteria.target">
            <summary>
            The target for the filter query (currently only ROW for row filters)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Criteria.values">
            <summary>
            Present if a custom filter criteria's operator has one or more arguments
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Criteria.ColumnId">
            <summary>
            Gets the column ID
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Criteria.Operator">
            <summary>
            The Criteria Operator
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Criteria.Target">
            <summary>
            Gets the criteria target
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Criteria.Values">
            <summary>
            Gets the values if this criteria's operator has arguments
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Currency">
            <summary>
            The Currency info
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Currency.Code">
            <summary>
            The ISO 4217 currency code (e.g. “EUR”)
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Currency.Symbol">
            <summary>
            The currency symbol (e.g. “€”)
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.PaginatedResult`1">
            <summary>
            <para>Object returned for all GET operations against index endpoints.</para>
            This object provides metadata which can be used to perform paging on potentially
            large data sets.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.PaginatedResult`1.pageNumber">
            <summary>
            the current page in the full result set
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.PaginatedResult`1.pageSize">
            <summary>
             the number of elements in the current page
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.PaginatedResult`1.totalCount">
            <summary>
            the total number of elements in the result set
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.PaginatedResult`1.totalPages">
            <summary>
            the total number of pages in the result set
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.PaginatedResult`1.data">
            <summary>
            the result set (array)
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.PaginatedResult`1.PageNumber">
            <summary>
            The current page in the full result set that the data array represents.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.PaginatedResult`1.PageSize">
            <summary>
            The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included).
            Unless otherwise specified, this defaults to 100 for most endpoints.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.PaginatedResult`1.TotalCount">
            <summary>
            The total number of items in the full result set.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.PaginatedResult`1.TotalPages">
            <summary>
            The total number of pages in the full result set.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.PaginatedResult`1.Data">
            <summary>
            A list of objects representing the current page of data in the result set.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Discussion">
            <summary>
            Represents the Discussion object. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/504767-using-Discussions">Help Using Discussions</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.parentId">
            <summary>
            Represents the Id of the directly associated row or sheet </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.parentType">
            <summary>
            Represents the "SHEET" or "ROW": present only when the direct association is not clear </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.accessLevel">
            <summary>
            Users permission on the discussion </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.comment">
            <summary>
            Represents the comment for the discussion (outbound only - singular "comment") </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.commentAttachments">
            <summary>
            Represents the comment attachments. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.commentCount">
            <summary>
            The number of comments in the discussion
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.comments">
            <summary>
            Represents the comments for the discussion. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.createdBy">
            <summary>
            Represents the User object containing name and email of the creator of the discussion </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.lastCommentedAt">
            <summary>
            Represents the date a comment was last added to a discussion. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.lastCommentedUser">
            <summary>
            Represents the last user that left a comment in the discussion. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.readOnly">
            <summary>
            Represents the read only status of the discussion </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Discussion.title">
            <summary>
            Represents the title for the discussion. </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.ParentId">
            <summary>
            Id of the directly associated row or sheet: present only when the direct association is not clear (see Get All Discussions)
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.ParentType">
            <summary>
            "SHEET" or "ROW": present only when the direct association is not clear (see Get All Discussions)
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.AccessLevel">
            <summary>
            User's permissions on the discussion
            </summary>
            <returns> the access level </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.Comment">
            <summary>
            The comment for the discussion.
            </summary>
            <returns> the comment </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.CommentAttachments">
            <summary>
            The comment attachments.
            </summary>
            <returns> the comment attachments </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.CommentCount">
            <summary>
            Get the number of comments in the discussion
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.Comments">
            <summary>
            The comments for the discussion.
            </summary>
            <returns> the comments </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.CreatedBy">
            <summary>
            User object containing name and email of the creator of the discussion
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.LastCommentedAt">
            <summary>
            Time of most recent comment
            </summary>
            <returns> the last commented at </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.LastCommentedUser">
            <summary>
            User object containing name and email of the author of the most recent comment
            </summary>
            <returns> the last commented user </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.ReadOnly">
            <summary>
            Indicates whether the user can modify the discussion
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Discussion.Title">
            <summary>
            the title for the discussion.
            </summary>
            <returns> the title </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Discussion.CreateDiscussionBuilder">
            <summary>
            A convenience class to help generate discussion object with the appropriate fields for adding a discussion to 
            a sheet or row.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Discussion.CreateDiscussionBuilder.#ctor(System.String,Smartsheet.Api.Models.Comment)">
            <summary>
            Sets the required properties for creating a discussion.
            </summary>
            <param name="title"> the discussion title </param>
            <param name="comment"> the comment of the discussion </param>
        </member>
        <member name="M:Smartsheet.Api.Models.Discussion.CreateDiscussionBuilder.SetTitle(System.String)">
            <summary>
            Sets the title for the discussion.
            </summary>
            <param name="title"> the title </param>
            <returns> the creates the discussion builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Discussion.CreateDiscussionBuilder.SetComment(Smartsheet.Api.Models.Comment)">
            <summary>
            Sets the comments for the discussion.
            </summary>
            <param name="comment"> the comments </param>
            <returns> the creates the discussion builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Discussion.CreateDiscussionBuilder.GetTitle">
            <summary>
            Gets the title.
            </summary>
            <returns> the title </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Discussion.CreateDiscussionBuilder.GetComment">
            <summary>
            Gets the comments.
            </summary>
            <returns> the comments </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Discussion.CreateDiscussionBuilder.Build">
            <summary>
            Builds the.
            </summary>
            <returns> the discussion </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.DiscussionInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.DiscussionInclusion.COMMENTS">
            <summary>
            Includes the comments of the discussion
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.DiscussionInclusion.ATTACHMENTS">
            <summary>
            <para>Includes the attachments of the discussion.</para>
            <para>Effective only if comments is present, otherwise ignored</para>
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.DiscussionParentType">
            <summary>
            Represents the discussion parent Type.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Email">
            <summary>
            Represents an Email object.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Email.ccMe">
            <summary>
            Represents the CC me flag.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Email.message">
            <summary>
            Represents the Message.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Email.sendTo">
            <summary>
            Represents the Email recipient(s).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Email.subject">
            <summary>
            Represents the Subject.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Email.CcMe">
            <summary>
            Gets the carbon copy me flag.
            </summary>
            <returns> the cc me </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Email.Message">
            <summary>
            Gets the Message.
            </summary>
            <returns> the Message </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Email.SendTo">
            <summary>
            Gets the list of Recipients
            </summary>
            <returns> the list of Recipients </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Email.Subject">
            <summary>
            Gets the Subject.
            </summary>
            <returns> the Subject </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Error">
            <summary>
            Represents Error object.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Error.detail">
            <summary>
            Additional error detail if it is available
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Error.errorCode">
            <summary>
            Represents the error code.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Error.message">
            <summary>
            Represents the message.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Error.refId">
            <summary>
            Reference Id of the specific error occurrence. 
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Error.Detail">
            <summary>
            Gets additional error detail if available
            </summary>
            <returns> error detail </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Error.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <returns> the error code </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Error.Message">
            <summary>
            Gets the message.
            </summary>
            <returns> the message </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Error.RefId">
            <summary>
            Gets the refId
            </summary>
            <returns> the refId </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.FilterType">
            <summary>
            Filter Type
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Favorite">
            <summary>
            Represents a Favorite object.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Favorite.ObjectId">
            <summary>
            ID of the favorited item. If type is "template", only private sheet-type template ID is allowed.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Favorite.Type">
            <summary>
            One of: workspace, folder, sheet, report, template, sight
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Favorite.AddFavoriteBuilder">
            <summary>
            A convenience class for making a Favorite object with the appropriate fields for adding the user.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Favorite.AddFavoriteBuilder.#ctor(System.Nullable{Smartsheet.Api.Models.ObjectType},System.Nullable{System.Int64})">
            <summary>
            Sets the required propeties for createing a Favorite.
            </summary>
            <param name="type"> the object type </param>
            <param name="objectId"> ID of the favorited item. If type is "template", only private sheet-type template ID is allowed.</param>
        </member>
        <member name="M:Smartsheet.Api.Models.Favorite.AddFavoriteBuilder.Build">
            <summary>
            Builds and returns the Favorite object.
            </summary>
            <returns> the Favorite object </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.FeatureInfo">
            <summary>
            Information on server information.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FeatureInfo.SymbolsVersion">
            <summary>
            The Symbols version
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Folder">
            <summary>
            Represents a folder.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Folder.favorite">
            <summary>
            Represents whether a folder is marked as a favorite in the Home folder
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Folder.folders">
            <summary>
            Represents the child folders contained in the folder.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Folder.permalink">
            <summary>
            Direct URL to folder
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Folder.reports">
            <summary>
            Represents the reports contained in the folder.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Folder.sheets">
            <summary>
            Represents the sheets contained in the folder.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Folder.sights">
            <summary>
            Represents the Sights contained in the folder.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Folder.templates">
            <summary>
            Represents the templates contained in the folder.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Folder.Favorite">
            <summary>
            Gets and sets whether this folder is favorited.
            </summary>
            <returns> the sheets </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Folder.Folders">
            <summary>
            Gets the folders contained in this folder.
            </summary>
            <returns> the folders </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Folder.Permalink">
            <summary>
            Gets and sets the permalink of this folder.
            </summary>
            <returns> the sheets </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Folder.Reports">
            <summary>
            Gets the reports in the folder.
            </summary>
            <returns> the sheets </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Folder.Sheets">
            <summary>
            Gets the sheets in the folder.
            </summary>
            <returns> the sheets </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Folder.Sights">
            <summary>
            Gets the Sights contained in this folder.
            </summary>
            <returns> the Sights </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Folder.Templates">
            <summary>
            Gets the templates contained in this folder.
            </summary>
            <returns> the templates </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Folder.UpdateFolderBuilder">
            <summary>
            A convenience class for setting up a folder with the appropriate fields for updating the folder.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Folder.UpdateFolderBuilder.#ctor(System.Nullable{System.Int64},System.String)">
            <summary>
            Sets the required fields for updating a folder.
            </summary>
            <param name="id">the Id of the folder to update</param>
            <param name="name"> the name of the folder, need not be unique </param>
        </member>
        <member name="M:Smartsheet.Api.Models.Folder.UpdateFolderBuilder.Build">
            <summary>
            Builds the folder.
            </summary>
            <returns> the folder </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Folder.CreateFolderBuilder">
            <summary>
            A convenience class for setting up a folder with the appropriate fields for creation.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Folder.CreateFolderBuilder.#ctor(System.String)">
            <summary>
            Sets the required the fields for creating a folder.
            </summary>
            <param name="name"> the name of the folder, need not be unique </param>
        </member>
        <member name="M:Smartsheet.Api.Models.Folder.CreateFolderBuilder.SetName(System.String)">
            <summary>
            Sets the name of the folder.
            </summary>
            <param name="name"> the name </param>
            <returns> the update folder builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Folder.CreateFolderBuilder.GetName">
            <summary>
            Gets the name.
            </summary>
            <returns> the name </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Folder.CreateFolderBuilder.Build">
            <summary>
            Builds the folder.
            </summary>
            <returns> the folder </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.FontFamily">
            <summary>
            FontFamily object.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FontFamily.Name">
            <summary>
            Name of the font family (e.g. “Arial”)
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FontFamily.Traits">
            <summary>
            Platform-independent traits of the font family. One of the following values: serif, sans-serif.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.FormatDetails">
            <summary>
            Represents the Format details when generating a digital copy (PDF/EXCEL) of a sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.FormatDetails.paperSize">
            <summary>
            Represents the paper size.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatDetails.PaperSize">
            <summary>
            Gets the paper size.
            </summary>
            <returns> the paper size </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.FormatTables">
            <summary>
            The FormatTables object is retrieved via the GET /serverinfo operation and contains all of the lookup tables
            that the Format Descriptor indexes refer to, as well as a property called defaults, which is
            a Format Descriptor that describes which formats the Smartsheet web application displays for unset formats.</summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.Defaults">
            <summary>
            A format descriptor where each element describes the formats
            the Smartsheet web application displays for format values that have not been set.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.Bold">
            <summary>
            Possible values: none, on.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.Color">
            <summary>
            Color hex values. 
            <para>Note: “none” is the default value for all colors. Applications will need
            to handle this value and use app-defined colors (typically this is Black for
            text color and White for background color)</para>
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.Currency">
            <summary>
            Currency codes and symbols
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.DecimalCount">
            <summary>
            All allowed decimal count values
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.FontFamily">
            <summary>
            Font families with additional font information
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.FontSize">
            <summary>
            Font sizes in points
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.HorizontalAlign">
            <summary>
            Possible values: none, on.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.Italic">
            <summary>
            Possible values: none, on.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.NumberFormat">
            <summary>
            Possible values: none, NUMBER, CURRENCY, PERCENT.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.Strikethrough">
            <summary>
            Possible values: none, on.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.TextWrap">
            <summary>
            Possible values: none, on
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.ThousandsSeparator">
            <summary>
            Possible values: none, on
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.Underline">
            <summary>
            Possible values: none, on.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.FormatTables.VerticalAlign">
            <summary>
            Vertical alignment, possible values:
            none, middle, bottom.
            Note: “default” is the default value, which is equivalent to “top”.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Home">
            <summary>
            Represents the Home object. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/522237-the-home-tab">Home Tab Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.Home.folders">
            <summary>
            Represents the Folders in the home location.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Home.reports">
            <summary>
            Represents the Reports in the home location.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Home.sheets">
            <summary>
            Represents the Sheets in the home location.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Home.sights">
            <summary>
            Represents the Sights in the home location
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Home.templates">
            <summary>
            Represents the Templates in the home location.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Home.workspaces">
            <summary>
            Represents the Workspaces in the home location.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Home.Folders">
            <summary>
            Gets the Folders in the home location.
            </summary>
            <returns> the Folders </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Home.Reports">
            <summary>
            Gets the Reports in the home location.
            </summary>
            <returns> the Templates </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Home.Sheets">
            <summary>
            Gets the Sheets in the home location.
            </summary>
            <returns> the Sheets </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Home.Sights">
            <summary>
            Gets the Sight in the home location.
            </summary>
            <returns> the Sight </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Home.Templates">
            <summary>
            Gets the Templates in the home location.
            </summary>
            <returns> the Templates </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Home.Workspaces">
            <summary>
            Gets the Workspaces in the home location.
            </summary>
            <returns> the Workspaces </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.IdentifiableModel">
            <summary>
            Represents an object with an ID.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.IdentifiableModel.id">
            <summary>
            Represents the ID. </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.IdentifiableModel.Id">
            <summary>
            Gets the Id.
            </summary>
            <returns> the Id </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.IdentifiableModel.Equals(System.Object)">
            <summary>
            Check if the given object equals to this object.
            </summary>
            <param name="object"> the object to compare </param>
            <returns> true if given object equals to this object, false otherwise </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.IdentifiableModel.GetHashCode">
            <summary>
            Return the hash Code of this object.
            </summary>
            <returns> the hash Code </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Hyperlink">
            <summary>
            Represents a hyperlink to a URL, a sheet, or a report. 
            <remarks>If the sheet or report that is linked to was deleted, this object may be empty (i.e., all values null).</remarks>
            <para>You can create and modify hyperlinks by using any API operation that creates or updates cell data.
            When creating or updating a hyperlink, cell.value may be set to a string value or null.
            If null, the cell’s value will be derived from the hyperlink:
            <list type="bullet">
            <item>If the hyperlink is a URL link, the cell’s value will be set to the URL itself.</item>
            <item>If the hyperlink is a sheet or report link, the cell’s value will be set to the sheet or report’s name.</item>
            </list></para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Hyperlink.reportId">
            <summary>
            If non-null, this hyperlink is a link to the report with this Id.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Hyperlink.sheetId">
            <summary>
            Represents the sheet Id.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Hyperlink.sightId">
            <summary>
            If non-null, this hyperlink is a link to the Sight with this Id.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Hyperlink.url">
            <summary>
            Represents the URL.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Hyperlink.isNull">
            <summary>
            If true, update will serialize a null to reset the hyperlink
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Hyperlink.ReportId">
            <summary>
            If non-null, this hyperlink is a link to the report with this Id.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Hyperlink.SheetId">
            <summary>
            If non-null, this hyperlink is a link to the sheet with this Id.
            </summary>
            <returns> the sheet Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Hyperlink.SightId">
            <summary>
            If non-null, this hyperlink is a link to the Sight with this Id.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Hyperlink.Url">
            <summary>
            <para>When the hyperlink is a URL link, this property will contain the URL value.</para>
            <para>When the hyperlink is a sheet/report link (i.e., sheetId or reportId is non-null), 
            this property will contain the permalink to the sheet or report.</para>
            </summary>
            <returns> the Url </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Hyperlink.IsNull">
            <summary>
            Get the value of the isNull flag
            </summary>
            <returns> value of the isNull flag </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.MultiShare">
            <summary>
            Represents the MultiShare object. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/520104-sharing-Sheets">Help Sharing Sheets</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.MultiShare.users">
            <summary>
            The list of Users that will be shared with. The Email address must be defined for each user. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.MultiShare.accessLevel">
            <summary>
            Represents the access level for this share. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.MultiShare.subject">
            <summary>
            The Subject of the Email that sent to notify the Users. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.MultiShare.message">
            <summary>
            The Message to be included in the body of the Email that will be sent to the user. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.MultiShare.ccMe">
            <summary>
            A flag to indicate whether or not to carbon copy the user sharing the sheet. </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiShare.Users">
            <summary>
            Gets the Users.
            </summary>
            <returns> the Users </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiShare.AccessLevel">
            <summary>
            Gets the access level.
            </summary>
            <returns> the access level </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiShare.Subject">
            <summary>
            Gets the Subject of the Email that sent to notify the Users.
            </summary>
            <returns> the Subject </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiShare.Message">
            <summary>
            Gets the Message to be included in the body of the Email that will be sent to the use.
            </summary>
            <returns> the Message </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiShare.CCMe">
            <summary>
            Gets the flag to indicate whether or not to carbon copy the user sharing the sheet.
            </summary>
            <returns> the carbon copy me flag </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder">
            <summary>
            A convenience class for creating a MultiShare object with the necessary fields for sharing a sheet with
            many Users.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder.SetUsers(System.Collections.Generic.IList{Smartsheet.Api.Models.User})">
            <summary>
            Sets the Users that will be shared with. The Email address must be defined for each user.
            </summary>
            <param name="users"> the Users </param>
            <returns> the share to many builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder.SetAccessLevel(System.Nullable{Smartsheet.Api.Models.AccessLevel})">
            <summary>
            Sets the access level.
            </summary>
            <param name="accessLevel"> the access level </param>
            <returns> the share to many builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder.SetSubject(System.String)">
            <summary>
            Sets the Subject of the Email that sent to notify the Users.
            </summary>
            <param name="subject"> the Subject </param>
            <returns> the share to many builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder.SetMessage(System.String)">
            <summary>
            Sets the Message to be included in the body of the Email that will be sent to the use.
            </summary>
            <param name="message"> the Message </param>
            <returns> the share to many builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder.SetCCMe(System.Nullable{System.Boolean})">
            <summary>
            Set the carbon copy me flag.
            </summary>
            <param name="ccMe"> the carbon copy me flag. </param>
            <returns> the share to many builder </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder.Users">
            <summary>
            Gets the Users.
            </summary>
            <returns> the Users </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder.AccessLevel">
            <summary>
            Gets the access level.
            </summary>
            <returns> the access level </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder.Subject">
            <summary>
            Gets the Subject.
            </summary>
            <returns> the Subject </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder.Message">
            <summary>
            Gets the Message.
            </summary>
            <returns> the Message </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder.CCMe">
            <summary>
            Gets the cc me.
            </summary>
            <returns> the cc me </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.MultiShare.ShareToManyBuilder.Build">
            <summary>
            Builds the Multishare object with the set fields.
            </summary>
            <returns> the multi share </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.NamedModel">
            <summary>
            Represents an object with a Name and an Id.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.NamedModel.name">
            <summary>
            Represents the Name.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.NamedModel.Name">
            <summary>
            Gets the Name.
            </summary>
            <returns> the Name </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.CriteriaOperator">
            <summary>
            Represents operator.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.ObjectType">
            <summary>
            Represents object types.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.PaginationParameters">
            <summary>
            Builds optional query string parameters for pagination.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.PaginationParameters.includeAll">
            <summary>
            if true, include all elements in the result set
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.PaginationParameters.pageSize">
            <summary>
            the desired page size
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.PaginationParameters.page">
            <summary>
            the desired page
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.PaginationParameters.#ctor(System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Builds optional query string parameters for pagination.
            <remarks>Most index endpoints default to a page size of 100 results. If you need all results at once, 
            you should specify the includeAll=true query string parameter.</remarks>
            </summary>
            <param name="includeAll">If true, include all results (i.e. do not paginate). 
            Mutually exclusive with pageSize and page (they are ignored if includeAll=true is specified)</param>
            <param name="pageSize">The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, 
            defaults to 100 if not specified.</param>
            <param name="page">Which page to return. Defaults to 1 if not specified.</param>
        </member>
        <member name="P:Smartsheet.Api.Models.PaginationParameters.IncludeAll">
            <summary>
            If true, include all results (i.e. do not paginate). 
            Mutually exclusive with pageSize and page (they are ignored if includeAll=true is specified).
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.PaginationParameters.PageSize">
            <summary>
            The maximum number of items to return per page. 
            Unless otherwise stated for a specific endpoint, defaults to 100 if not specified.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.PaginationParameters.Page">
            <summary>
            Which page to return. Defaults to 1 if not specified.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.PaginationParameters.ToQueryString">
            <summary>
            Returns a formatted string of query string parameters.
            </summary>
            <returns>the query string</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.PaginationParameters.toDictionary">
            <summary>
            Returns a dictionary of query string parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smartsheet.Api.Models.PaperSize">
            <summary>
            Represents page dimensions in the Smartsheet REST API.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Report">
            <summary>
            Represents the Report object.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Report.SourceSheet">
            <summary>
            Array of Sheet objects (without rows), representing the sheets that rows in the report originated from.
            Only included in the Get Report response if the include parameter specifies “sourceSheets”.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Report.GetColumnById(System.Int64)">
            <summary>
            Get a <seealso cref="T:Smartsheet.Api.Models.Column"/> by ID.
            </summary>
            <param name="columnId"> the column Id </param>
            <returns> the column by Id </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.ReportCell">
            <summary>
            The Cell object of a Report.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ReportCell.VirtualColumnId">
            <summary>
            The virtualId of this cell's column.  virtualColumnId refers to this cell's parent column in this report, 
            while columnId refers to the cell's parent column in its originating source sheet.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.ReportColumn">
            <summary>
            A report column is a "virtual" column, in that it appears identical to source sheet column(s), but is in fact a different column belonging to the report.  
            Cells in the report refer to this column via their virtualColumnId attribute, and their actual column from their source sheet via their columnId attribute.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ReportColumn.VirtualId">
            <summary>
            The virtual ID of this report column
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ReportColumn.SheetNameColumn">
            <summary>
            Only included for the special "Sheet Name" report column
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.ReportRow">
            <summary>
            The <seealso cref="T:Smartsheet.Api.Models.Row"/> of a Report.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.RequestResult`1">
            <summary>
            RequestResult object to contain information about a PUT or POST request.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RequestResult`1.resultCode">
            <summary>
            Represents the RequestResult Code from the request. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RequestResult`1.message">
            <summary>
            Represents the Message from the request. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RequestResult`1.result">
            <summary>
            Represents the object that was created or updated. </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RequestResult`1.version">
            <summary>
            Represents the new Version of the sheet. It is only available on some operations. </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.RequestResult`1.ResultCode">
            <summary>
            Gets the RequestResult Code from the request.
            </summary>
            <value>
            The result code.
            </value>
            <returns> the RequestResult Code </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RequestResult`1.Message">
            <summary>
            Gets the Message from the request.
            </summary>
            <value>
            The message.
            </value>
            <returns> the Message </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RequestResult`1.Result">
            <summary>
            Gets the RequestResult from the request.
            </summary>
            <value>
            The result object.
            </value>
            <returns> the RequestResult </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RequestResult`1.Version">
            <summary>
            Gets the new Version of the sheet. It is only available on some operations..
            </summary>
            <value>
            The version.
            </value>
            <returns> the Version </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Row">
            <summary>
            A Row is a component of a Sheet or Report. Each Row is composed of a collection of Cells, and may optionally contain Discussions and/or Attachments.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Row.AddRowBuilder">
            <summary>
            A convenience class for creating a Row with the necessary fields for inserting into a list of Rows.
            </summary>
            <remarks>
            If multiple rows are specified in the request,
            all rows must be inserted at the same location
            (i.e. the toTop, toBottom, parentId, siblingId,
            and above attributes must be the same for all rows in the request).
            </remarks>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Sets the required property/properties for Adding a Row
            </summary>
            <remarks>
            If multiple rows are specified in the request,
            all rows must be inserted at the same location
            (i.e. the toTop, toBottom, parentId, siblingId,
            and above attributes must be the same for all rows in the request).
            </remarks>
            <param name="toTop"> Indicates that the row should be added to the top of the sheet. </param>
            <param name="toBottom"> Indicates that the row should be added to the bottom of the sheet, or, if used in conjunction with parentId, added as the last child of the parent. </param>
            <param name="parentId"> Indicates that the row should be added as the first child of this row. </param>
            <param name="siblingId"> Indicates that the row should be added as the next row at the same hierarchical level of this row. </param>
            <param name="above"> Optionally used in conjunction with siblingId with a value of true to indicate that the row should be added above the specified sibling row. </param>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.SetToTop(System.Nullable{System.Boolean})">
            <summary>
            Sets the to top flag that puts the row at the top of the sheet.
            </summary>
            <param name="toTop"> the to top flag </param>
            <returns> the add row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.SetToBottom(System.Nullable{System.Boolean})">
            <summary>
            Sets the to bottom flag that puts the row at the bottom of the sheet.
            </summary>
            <param name="toBottom"> the to bottom </param>
            <returns> the add row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.SetParentId(System.Nullable{System.Int64})">
            <summary>
            Sets the parent Id that puts the row as the first child of the specified Id.
            </summary>
            <param name="parentId"> the parent Id </param>
            <returns> the add row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.SetSiblingId(System.Nullable{System.Int64})">
            <summary>
            Sets the sibling Id that puts the row as the next row at the same hierarchical level of this row.
            </summary>
            <param name="siblingId"> the sibling Id </param>
            <returns> the add row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.SetAbove(System.Nullable{System.Boolean})">
            <summary>
            Sets the flag which which is used in conjunction with siblingId with a value of true to
            indicate that the row should be added above the specified sibling row.
            </summary>
            <param name="above"> the above flag </param>
            <returns> the add row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.SetCells(System.Collections.Generic.IList{Smartsheet.Api.Models.Cell})">
            <summary>
            Sets the cells of the row.
            </summary>
            <param name="cells"> the cells </param>
            <returns> the add row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.SetFormat(System.String)">
            <summary>
            Sets the Format.
            </summary>
            <param name="format"> the format </param>
            <returns> the add row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.SetExpanded(System.Nullable{System.Boolean})">
            <summary>
            Sets if expanded.
            </summary>
            <param name="expanded"> the expanded </param>
            <returns> the add row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.GetToTop">
            <summary>
            Gets the to top.
            </summary>
            <returns> the to top </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.GetToBottom">
            <summary>
            Gets the to bottom.
            </summary>
            <returns> the to bottom </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.GetParentId">
            <summary>
            Gets the parent Id.
            </summary>
            <returns> the parent Id </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.GetSiblingId">
            <summary>
            Gets the sibling Id.
            </summary>
            <returns> the sibling Id </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.GetCells">
            <summary>
            Gets the cells.
            </summary>
            <returns> the cells </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.GetAbove">
            <summary>
            Gets the above flag.
            </summary>
            <returns>the above flag</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.GetFormat">
            <summary>
            Gets the format
            </summary>
            <returns>the format</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.GetExpanded">
            <summary>
            Gets the expanded flag.
            </summary>
            <returns>the expanded flag</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.AddRowBuilder.Build">
            <summary>
            Builds the Row.
            </summary>
            <returns>the row</returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Row.UpdateRowBuilder">
            <summary>
            A convenience class for updating a Row with the necessary fields for inserting into a list of Rows.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.#ctor(System.Nullable{System.Int64})">
            <summary>
            Sets the required parameters to updating a row.
            </summary>
            <param name="rowId">the row ID</param>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.SetToTop(System.Nullable{System.Boolean})">
            <summary>
            Sets the to top flag that puts the row at the top of the sheet.
            </summary>
            <param name="toTop"> the to top flag </param>
            <returns> the update row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.SetToBottom(System.Nullable{System.Boolean})">
            <summary>
            Sets the to bottom flag that puts the row at the bottom of the sheet.
            </summary>
            <param name="toBottom"> the to bottom </param>
            <returns> the update row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.SetParentId(System.Nullable{System.Int64})">
            <summary>
            Sets the parent Id that puts the row as the first child of the specified Id.
            </summary>
            <param name="parentId"> the parent Id </param>
            <returns> the update row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.SetSiblingId(System.Nullable{System.Int64})">
            <summary>
            Sets the sibling Id that puts the row as the next row at the same hierarchical level of this row.
            </summary>
            <param name="siblingId"> the sibling Id </param>
            <returns> the update row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.SetAbove(System.Nullable{System.Boolean})">
            <summary>
            Sets the above flag two move the Row directly above the specified sibling Row (at the same hierarchical level).
            </summary>
            <param name="above"> the above flag </param>
            <returns> the update row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.SetIndent(System.Nullable{System.Int32})">
            <summary>
            Sets the number of times to indent this row
            </summary>
            <param name="indent"></param>
            <returns></returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.SetOutdent(System.Nullable{System.Int32})">
            <summary>
            Sets the number of times to outdent this row
            </summary>
            <param name="outdent"></param>
            <returns></returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.SetCells(System.Collections.Generic.IList{Smartsheet.Api.Models.Cell})">
            <summary>
            Sets the list of cells.
            </summary>
            <param name="cells"> the list of cells </param>
            <returns> the update row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.SetFormat(System.String)">
            <summary>
            Sets the Format.
            </summary>
            <param name="format"> the format </param>
            <returns> the update row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.SetExpanded(System.Nullable{System.Boolean})">
            <summary>
            Sets if expanded.
            </summary>
            <param name="expanded"> the expanded </param>
            <returns> the update row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.SetLocked(System.Nullable{System.Boolean})">
            <summary>
            Sets whether row is locked (true) or not (false).
            </summary>
            <param name="locked"> row locked </param>
            <returns> the update row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.GetToTop">
            <summary>
            Gets the to top.
            </summary>
            <returns> the to top </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.GetToBottom">
            <summary>
            Gets the to bottom.
            </summary>
            <returns> the to bottom </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.GetParentId">
            <summary>
            Gets the parent Id.
            </summary>
            <returns> the parent Id </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.GetSiblingId">
            <summary>
            Gets the sibling Id.
            </summary>
            <returns> the sibling Id </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.GetCells">
            <summary>
            Gets the cells.
            </summary>
            <returns> the cells </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.GetFormat">
            <summary>
            Gets the format.
            </summary>
            <returns>the format</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.GetExpanded">
            <summary>
            Gets the expanded flag.
            </summary>
            <returns>the expanded flag</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.GetLocked">
            <summary>
            Gets whether row is locked.
            </summary>
            <returns> the locked </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.GetId">
            <summary>
            Gets the row id.
            </summary>
            <returns> the row id </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Row.UpdateRowBuilder.Build">
            <summary>
            Builds anad returns the Row.
            </summary>
            <returns> the row </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.RowEmail">
            <summary>
            Represents RowEmail object. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/504773-sending-Sheets-Rows-via-Email">Help Sending 
            Sheets &amp; Rows via Email</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.RowEmail.columnIds">
            <summary>
            IDs of the columns to be included.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowEmail.includeAttachments">
            <summary>
            A flag to indicate if Attachments should be included in the Email.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowEmail.includeDiscussions">
            <summary>
            A flag to indicate if Discussions should be included in the Email.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowEmail.layout">
            <summary>
            One of the following values: HORIZONTAL, VERTICAL.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.RowEmail.ColumnIds">
            <summary>
            IDs of the columns to be included.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.RowEmail.IncludeAttachments">
            <summary>
            Gets the flag that indicates if Attachments should be included in the Email.
            </summary>
            <returns> the include Attachments </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowEmail.IncludeDiscussions">
            <summary>
            Gets the flag that indicates if Discussions should be included in the Email.
            </summary>
            <returns> the include Discussions </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowEmail.Layout">
            <summary>
            Gets the layout value: HORIZONTAL, VERTICAL.
            </summary>
            <returns> the layout </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.RowInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowInclusion.DISCUSSIONS">
            <summary>
            <para>Includes row discussions array.</para>
            <para>To include discussion attachments, both attachments and discussions must be present in the include list.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowInclusion.ATTACHMENTS">
            <summary>
            <para>Includes row attachments array.</para>
            <para>To include discussion attachments, both attachments and discussions must be present in the include list.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowInclusion.FORMAT">
            <summary>
            <para>Includes format attribute on the row and its cells.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowInclusion.FILTERS">
            <summary>
            <para>Includes filteredOut attribute indicating if the row should be displayed or hidden according to the sheet’s filters.</para>
            <para>May be used in conjunction with columns to include the user’s column filters with the columns.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowInclusion.COLUMN_TYPE">
            <summary>
            <para>Includes columnType attribute in the row’s cells indicating the type of the column the cell resides in.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowInclusion.COLUMNS">
            <summary>
            Includes a columns list that specifies all of the columns for the sheet. 
            <para>May be used in conjunction with filters to include the user’s column filters with the columns.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowInclusion.ROW_PERMALINK">
            <summary>
            Includes a permalink attribute for each Row. A Row permalink represents a direct link to the Row in the Smartsheet application.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowInclusion.ROW_WRITER_INFO">
            <summary>
            Includes createdBy and modifiedBy attributes on the row, indicating the row’s creator, and last modifier.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowInclusion.OBJECT_VALUE">
            <summary>
            Includes objectValue attribute on cells containing values.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.RowMapping">
            <summary>
            Information between the source and destination sheet of rows that were copied or moved.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.RowMapping.From">
            <summary>
            Row ID in the source sheet
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.RowMapping.To">
            <summary>
            Row ID in the source sheet
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.RowWrapper">
            <summary>
            Represents the RowWrapper object that is used to specify the location for a <seealso cref="T:Smartsheet.Api.Models.Row"/> or set of Rows.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowWrapper.toTop">
            <summary>
            Represents to-top flag that puts the row at the top of the sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowWrapper.toBottom">
            <summary>
            Represents to-bottom flag that puts the row at the bottom of the sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowWrapper.parentId">
            <summary>
            Represents the parent ID that puts the row as the first child of the specified Id.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowWrapper.siblingId">
            <summary>
            Represents the sibling ID that puts the row as the next row at the same hierarchical level of this row.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.RowWrapper.rows">
            <summary>
            Represents the Rows.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.ToTop">
            <summary>
            Gets the to top flag that puts the row at the top of the sheet.
            </summary>
            <returns> the to top </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.ToBottom">
            <summary>
            Gets the to bottom flag that puts the row at the bottom of the sheet.
            </summary>
            <returns> the to bottom </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.ParentId">
            <summary>
            Gets the parent Id that puts the row as the first child of the specified Id.
            </summary>
            <returns> the parent Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.SiblingId">
            <summary>
            Gets the sibling Id that puts the row as the next row at the same hierarchical level of this row.
            </summary>
            <returns> the sibling Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.Rows">
            <summary>
            Gets the Rows.
            </summary>
            <returns> the Rows </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder">
            <summary>
            A convenience class for creating a <seealso cref="T:Smartsheet.Api.Models.RowWrapper"/> with the necessary fields for inserting a <seealso cref="T:Smartsheet.Api.Models.Row"/> or 
            set of Rows.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder.SetToTop(System.Nullable{System.Boolean})">
            <summary>
            Sets the to top flag that puts the row at the top of the sheet.
            </summary>
            <param name="toTop"> the to top flag </param>
            <returns> the insert Rows builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder.SetToBottom(System.Nullable{System.Boolean})">
            <summary>
            Sets the to bottom flag that puts the row at the bottom of the sheet.
            </summary>
            <param name="toBottom"> the to bottom </param>
            <returns> the insert Rows builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder.SetParentId(System.Nullable{System.Int64})">
            <summary>
            Sets the parent Id that puts the row as the first child of the specified Id.
            </summary>
            <param name="parentId"> the parent Id </param>
            <returns> the insert Rows builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder.SetSiblingId(System.Nullable{System.Int64})">
            <summary>
            Sets the sibling Id that puts the row as the next row at the same hierarchical level of this row.
            </summary>
            <param name="siblingId"> the sibling Id </param>
            <returns> the insert Rows builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder.SetRows(System.Collections.Generic.IList{Smartsheet.Api.Models.Row})">
            <summary>
            Sets the Rows.
            </summary>
            <param name="rows"> the Rows </param>
            <returns> the insert Rows builder </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder.ToTop">
            <summary>
            Gets the to top.
            </summary>
            <returns> the to top </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder.ToBottom">
            <summary>
            Gets the to bottom.
            </summary>
            <returns> the to bottom </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder.ParentId">
            <summary>
            Gets the parent Id.
            </summary>
            <returns> the parent Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder.SiblingId">
            <summary>
            Gets the sibling Id.
            </summary>
            <returns> the sibling Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder.Rows">
            <summary>
            Gets the Rows.
            </summary>
            <returns> the Rows </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.RowWrapper.InsertRowsBuilder.Build">
            <summary>
            Builds the RowWrapper.
            </summary>
            <returns> the row wrapper </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.RowWrapper.MoveRowBuilder">
            <summary>
            A convenience class for creating a <seealso cref="T:Smartsheet.Api.Models.RowWrapper"/> with the necessary fields for moving a <seealso cref="T:Smartsheet.Api.Models.Row"/> or set 
            of Rows.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.RowWrapper.MoveRowBuilder.SetToTop(System.Nullable{System.Boolean})">
            <summary>
            Sets the to top flag that puts the row at the top of the sheet.
            </summary>
            <param name="toTop"> the to top </param>
            <returns> the move row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.RowWrapper.MoveRowBuilder.SetToBottom(System.Nullable{System.Boolean})">
            <summary>
            Sets the to bottom flag that puts the row at the bottom of the sheet.
            </summary>
            <param name="toBottom"> the to bottom </param>
            <returns> the move row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.RowWrapper.MoveRowBuilder.SetParentId(System.Nullable{System.Int64})">
            <summary>
            Sets the parent Id that puts the row as the first child of the specified Id.
            </summary>
            <param name="parentId"> the parent Id </param>
            <returns> the move row builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.RowWrapper.MoveRowBuilder.SetSiblingId(System.Nullable{System.Int64})">
            <summary>
            Sets the sibling Id that puts the row as the next row at the same hierarchical level of this row.
            </summary>
            <param name="siblingId"> the sibling Id </param>
            <returns> the move row builder </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.MoveRowBuilder.ToTop">
            <summary>
            Gets the to top.
            </summary>
            <returns> the to top </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.MoveRowBuilder.ToBottom">
            <summary>
            Gets the to bottom.
            </summary>
            <returns> the to bottom </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.MoveRowBuilder.ParentId">
            <summary>
            Gets the parent Id.
            </summary>
            <returns> the parent Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.RowWrapper.MoveRowBuilder.SiblingId">
            <summary>
            Gets the sibling Id.
            </summary>
            <returns> the sibling Id </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.RowWrapper.MoveRowBuilder.Build">
            <summary>
            Builds the RowWrapper.
            </summary>
            <returns> the row wrapper </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.SearchResult">
            <summary>
            Represents the Results of a search. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/522231-searching-in-Smartsheet">Help Searching in 
            Smartsheet</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResult.results">
            <summary>
            A list of items returned from the search Results.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResult.totalCount">
            <summary>
            Represents total count of Results.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResult.Results">
            <summary>
            Gets the list of Results from the search.
            </summary>
            <returns> the Results </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResult.TotalCount">
            <summary>
            Gets the total count of Results.
            </summary>
            <returns> the total count </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.SearchResultItem">
            <summary>
            Represents one specific RequestResult of a search.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResultItem.objectId">
            <summary>
            Represents the object Id for this specific search RequestResult.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResultItem.parentObjectId">
            <summary>
            Represents the parent object Id for this specific search RequestResult.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResultItem.objectType">
            <summary>
            Represents the object type (row, discussion, attach) for this specific search RequestResult.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResultItem.parentObjectType">
            <summary>
            Represents the parent object type for this specific search RequestResult.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResultItem.attachmentType">
            <summary>
            Represents the attachment type if the search result item is an attachment
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResultItem.contextData">
            <summary>
            Represents the context data for this specific search RequestResult.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResultItem.favorite">
            <summary>
            If the search result item is a favorite
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResultItem.mimeType">
            <summary>
            Represents the MIME type
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResultItem.parentObjectFavorite">
            <summary>
            If the parent object of the search item is a favorite
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResultItem.parentObjectName">
            <summary>
            Represents the parent object name for this specific search RequestResult.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SearchResultItem.text">
            <summary>
            Represents the text for this specific search RequestResult.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResultItem.ObjectId">
            <summary>
            Gets the object Id for this specific search RequestResult.
            </summary>
            <returns> the object Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResultItem.ParentObjectId">
            <summary>
            Gets the parent object Id for this specific search RequestResult.
            </summary>
            <returns> the parent object Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResultItem.ObjectType">
            <summary>
            Gets the object type for this specific search RequestResult.
            </summary>
            <returns> the object type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResultItem.ParentObjectType">
            <summary>
            Gets the parent object type for this specific search RequestResult.
            </summary>
            <returns> the parent object type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResultItem.AttachmentType">
            <summary>
            Gets the attachment type if the search result item is an attachment
            </summary>
            <returns> the attachment type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResultItem.ContextData">
            <summary>
            Gets the context data for this specific search RequestResult.
            </summary>
            <returns> the context data </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResultItem.Favorite">
            <summary>
            Indicates whether the search result item is a favorite
            </summary>
            <returns> the favorite flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResultItem.MimeType">
            <summary>
            Gets the MIME type
            </summary>
            <returns> the MIME type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResultItem.ParentObjectFavorite">
            <summary>
            Indicates whether the search result item parent is a favorite
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResultItem.ParentObjectName">
            <summary>
            Gets the parent object name for this specific search RequestResult.
            </summary>
            <returns> the parent object name </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SearchResultItem.Text">
            <summary>
            Gets the text for this specific search RequestResult.
            </summary>
            <returns> the text </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.ServerInfo">
            <summary>
            Represents a Server Infromation Object. </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ServerInfo.FeatureInfo">
            <summary>
            Feature Information.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ServerInfo.Formats">
            <summary>
            Definition of format tables that are used in
            Column, Row, and Cell format property. For more information, see Formatting.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.ServerInfo.SupportedLocales">
            <summary>
            Array of strings representing all Smartsheet-supported locales.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Share">
            <summary>
            Represents a Share Object. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/520104-sharing-Sheets">Sharing Sheets</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.Share.groupId">
            <summary>
            Represents the groupId if the share is of type GROUP
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Share.userId">
            <summary>
            Represents the userId if the share is of type USER
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Share.type">
            <summary>
            Indicates what type of share this is
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Share.accessLevel">
            <summary>
            Represents the access level for this specific share.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Share.ccMe">
            <summary>
            Represents the flag to indicate whether or not to send a copy of the email to the sharer
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Share.createdAt">
            <summary>
            Time that the share was created.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Share.email">
            <summary>
            Represents the Email for this specific share.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Share.message">
            <summary>
            Represents the message to be included in the body of the email
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Share.modifiedAt">
            <summary>
            Time that the share was modified.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Share.scope">
            <summary>
            The scope of this share. One of the following values:
                   ITEM: an item-level share (i.e., the specific object to which the Share applies is shared with the user or group)
                   WORKSPACE: a workspace-level share (i.e., the workspace that contains the object to which the Share applies is shared with the user or group)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Share.subject">
            <summary>
            Represents the subject of the email that will optionally be sent to notify the recipient
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.Id">
            <summary>
            Share ID, unlike other Smartsheet object ids, this id is an alphanumeric string.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.GroupId">
            <summary>
            Group ID if the share is a group share, else null.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.UserId">
            <summary>
            User ID if the share is a user share, else null.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.Type">
            <summary>
            The type of this share. One of USER or GROUP.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.AccessLevel">
            <summary>
            Gets the access level for this specific share.
            </summary>
            <returns> the access level </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.CcMe">
            <summary>
            Flag to indicate whether or not to send a copy of the email to the sharer of the sheet.
            This attribute can be specified in a request, but will never be present in a response.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.CreatedAt">
            <summary>
            Gets the Time that the share was created.
            </summary>
            <returns> the DateTime </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.Email">
            <summary>
            Gets the Email for this specific share.
            </summary>
            <returns> the Email </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.Message">
            <summary>
            The message to be included in the body of the email that will optionally be sent to the recipient.
            This attribute can be specified in a request, but will never be present in a response.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.ModifiedAt">
            <summary>
            Gets the time that the share was modified.
            </summary>
            <returns> the DateTime </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.Scope">
            <summary>
            The scop of this share. One of ITEM or WORKSPACE.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Share.Subject">
            <summary>
            The subject of the email that will optionally be sent to notify the recipient.
            This attribute can be specified in a request, but will never be present in a response.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Share.CreateShareBuilder">
            <summary>
            A convenience class for creating a <seealso cref="T:Smartsheet.Api.Models.Share"/> with the necessary fields for sharing the sheet to one user.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.#ctor(System.String,System.Nullable{Smartsheet.Api.Models.AccessLevel})">
            <summary>
            Sets the required properties for sharing to a User.
            </summary>
            <param name="email">the email of the User</param>
            <param name="accessLevel">the Access Level</param>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.#ctor(System.Nullable{System.Int64},System.Nullable{Smartsheet.Api.Models.AccessLevel})">
            <summary>
            Sets the required properties for sharing to a Group.
            </summary>
            <param name="groupId">the group ID</param>
            <param name="accessLevel">the Access Level</param>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.SetAccessLevel(System.Nullable{Smartsheet.Api.Models.AccessLevel})">
            <summary>
            (required) Access level for this specific share.
            </summary>
            <param name="accessLevel"> the access level </param>
            <returns> the share to one builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.SetEmail(System.String)">
            <summary>
             (optional) Email address for this specific share.
             NOTE: One of email or groupId must be specified, but not both.
            </summary>
            <param name="email"> the Email </param>
            <returns> the share to one builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.SetGroupId(System.Nullable{System.Int64})">
            <summary>
            the group share recipient’s group ID.
            NOTE: One of email or groupId must be specified, but not both.
            </summary>
            <param name="groupId"> the groupId </param>
            <returns> the share to one builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.SetSubject(System.String)">
            <summary>
            (optional): The subject of the email that will optionally be sent to notify the recipient.
            </summary>
            <param name="subject"> the subject </param>
            <returns> the share to one builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.SetAccessLevel(System.String)">
            <summary>
            (optional): The message to be included in the body of the email that will optionally be sent to the recipient.
            </summary>
            <param name="message"> the message </param>
            <returns> the share to one builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.SetCcMe(System.Nullable{System.Boolean})">
            <summary>
            (optional): Boolean flag to indicate whether or not to CC the user sharing the sheet.
            </summary>
            <param name="ccMe"> the ccMe </param>
            <returns> the share to one builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.GetAccessLevel">
            <summary>
            Gets the access level.
            </summary>
            <returns> the access level </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.GetEmail">
            <summary>
            Gets the Email.
            </summary>
            <returns> the Email </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.GetGroupId">
            <summary>
            Gets the GroupId.
            </summary>
            <returns> the GroupId </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.GetSubject">
            <summary>
            Gets the Subject.
            </summary>
            <returns> the Subject </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.GetMessage">
            <summary>
            Gets the Message.
            </summary>
            <returns> the Message </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.GetCcMe">
            <summary>
            Gets the CcMe.
            </summary>
            <returns> the CcMe </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.CreateShareBuilder.Build">
            <summary>
            Builds the <seealso cref="T:Smartsheet.Api.Models.Share"/> object.
            </summary>
            <returns> the share </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Share.UpdateShareBuilder">
            <summary>
            A convenience class for creating a <seealso cref="T:Smartsheet.Api.Models.Share"/> with the necessary fields to update a specific share.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.UpdateShareBuilder.#ctor(System.String,System.Nullable{Smartsheet.Api.Models.AccessLevel})">
            <summary>
            Sets the required properties for updating a share object.
            </summary>
            <param name="shareId">the share Id</param>
            <param name="accessLevel">the Access Level</param>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.UpdateShareBuilder.SetAccessLevel(System.Nullable{Smartsheet.Api.Models.AccessLevel})">
            <summary>
            Access level for the share.
            </summary>
            <param name="accessLevel"> the access level </param>
            <returns> the update share builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.UpdateShareBuilder.GetAccessLevel">
            <summary>
            Gets the access level.
            </summary>
            <returns> the access level </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Share.UpdateShareBuilder.Build">
            <summary>
            Builds the <seealso cref="T:Smartsheet.Api.Models.Share"/> object.
            </summary>
            <returns> the share </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.ShareType">
            <summary>
            The type of the share. 
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.GetColumnById(System.Int64)">
            <summary>
            Get a <seealso cref="T:Smartsheet.Api.Models.Column"/> by ID.
            </summary>
            <param name="columnId"> the column Id </param>
            <returns> the column by Id </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Sheet.CreateSheetBuilder">
            <summary>
            A convenience class to make a <seealso cref="T:Smartsheet.Api.Models.Sheet"/> object with the necessary fields to create the sheet by posting it 
            to Smartsheet.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetBuilder.#ctor(System.String,System.Collections.Generic.IList{Smartsheet.Api.Models.Column})">
            <summary>
            Sets the required properties for creating a Sheet.
            </summary>
            <param name="name"> the name of the Sheet, need not be unique </param>
            <param name="columns"> list of columns </param>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetBuilder.SetColumns(System.Collections.Generic.IList{Smartsheet.Api.Models.Column})">
            <summary>
            Sets the Columns for the sheet being created.
            </summary>
            <param name="columns"> The Columns to create with this sheet. </param>
            <returns> the creates the builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetBuilder.SetName(System.String)">
            <summary>
            Sets the Name for the sheet being created.
            </summary>
            <param name="name"> The Name for the sheet being created. </param>
            <returns> the creates the builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetBuilder.GetColumns">
            <summary>
            Returns the list of Columns.
            </summary>
            <returns> the Columns </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetBuilder.GetName">
            <summary>
            Returns the Name for the sheet.
            </summary>
            <returns> the Name </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetBuilder.Build">
            <summary>
            Creates a sheet by using the values from setters in this builder.
            </summary>
            <returns> the sheet </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Sheet.CreateSheetFromTemplateBuilder">
            <summary>
            A class to simplify the creation of a Sheet from another Sheet or another Template.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetFromTemplateBuilder.#ctor(System.String,System.Nullable{System.Int64})">
            <summary>
            Sets the required propeties for creating a Sheet from a Sheet or Template.
            </summary>
            <param name="fromId">the ID of the Sheet or Template from which to create the Sheet</param>
            <param name="name"> the name of the Sheet, need not be unique </param>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetFromTemplateBuilder.SetName(System.String)">
            <summary>
            Sets the Name for the sheet being created.
            </summary>
            <param name="name"> The Name for the sheet being created. </param>
            <returns> the creates the from template or sheet builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetFromTemplateBuilder.GetName">
            <summary>
            Returns the Name for the sheet.
            </summary>
            <returns> the Name </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetFromTemplateBuilder.SetFromId(System.Nullable{System.Int64})">
            <summary>
            Set the from Id.
            </summary>
            <param name="id"> the Id </param>
            <returns> the creates the from template or sheet builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetFromTemplateBuilder.GetFromId">
            <summary>
            Gets the from Id.
            </summary>
            <returns> the from Id </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.CreateSheetFromTemplateBuilder.Build">
            <summary>
            Creates a sheet by using the values from setters in this builder.
            </summary>
            <returns> the sheet </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Sheet.UpdateSheetBuilder">
            <summary>
            The Class UpdateSheetBuilder.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.UpdateSheetBuilder.#ctor(System.Nullable{System.Int64})">
            <summary>
            Sets the required properties for updating a sheet.
            </summary>
            <param name="id">the sheet id</param>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.UpdateSheetBuilder.SetName(System.String)">
            <summary>
            Sets the Sheet Name.
            </summary>
            <param name="name"> the Name </param>
            <returns> the update sheet builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.UpdateSheetBuilder.GetName">
            <summary>
            Gets the sheet Name.
            </summary>
            <returns> the sheet Name </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.UpdateSheetBuilder.SetUserSettings(Smartsheet.Api.Models.SheetUserSettings)">
            <summary>
            Sets the Sheet's user settings.
            </summary>
            <param name="userSettings"> the userSettings </param>
            <returns> the update sheet builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.UpdateSheetBuilder.GetUserSettings">
            <summary>
            Gets the sheet's user settings.
            </summary>
            <returns> the sheet's user settings </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.UpdateSheetBuilder.SetProjectSettings(Smartsheet.Api.Models.ProjectSettings)">
            <summary>
            Sets the Sheet's project settings
            </summary>
            <param name="projectSettings"></param>
            <returns>the update sheet builder</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.UpdateSheetBuilder.GetProjectSettings">
            <summary>
            Gets the sheet's project settings.
            </summary>
            <returns> the sheet's project settings</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.Sheet.UpdateSheetBuilder.Build">
            <summary>
            Builds the Sheet.
            </summary>
            <returns> the sheet </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetEmail">
            <summary>
            Represents Sheet Email object used for sending a sheet by Email. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/504773-sending-Sheets-Rows-via-Email">Help Sending
            Sheets &amp; Rows via Email</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetEmail.format">
            <summary>
            Represents the sheet Email Format (PDF or Excel).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetEmail.formatDetails">
            <summary>
            Represents the Format details (paper dimensions).
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetEmail.Format">
            <summary>
            Gets the sheet Email Format (PDF or Excel).
            </summary>
            <returns> the Format </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetEmail.FormatDetails">
            <summary>
            Gets the Format details (paper dimensions).
            </summary>
            <returns> the Format details </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail">
            <summary>
            A convenience class for creating a SheetEmail object with the necessary fields.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.format">
            <summary>
            Represents the sheet Email Format (PDF or Excel).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.formatDetails">
            <summary>
            Represents the Format details (paper dimensions).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.sendTo">
            <summary>
            Represents the Email recipient(s).
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.subject">
            <summary>
            Represents the Subject.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.message">
            <summary>
            Represents the Message.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.ccMe">
            <summary>
            Represents the CC me flag.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.#ctor(System.Collections.Generic.IList{Smartsheet.Api.Models.Recipient},System.Nullable{Smartsheet.Api.Models.SheetEmailFormat})">
            <summary>
            Sets the required properties for creating a SheetEmail.
            </summary>
            <param name="sendTo"></param>
            <param name="format"></param>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.SetSubject(System.String)">
            <summary>
            Sets the subject of the SheetEmail.
            </summary>
            <param name="subject">the subject</param>
            <returns>this CreateSheetEmail object</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.SetMessage(System.String)">
            <summary>
            Sets the message of the SheetEmail.
            </summary>
            <param name="message">the message</param>
            <returns>this CreateSheetEmail object</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.SetCcMe(System.Nullable{System.Boolean})">
            <summary>
            Sets whether to ccMe.
            </summary>
            <param name="ccMe">the ccMe option</param>
            <returns>this CreateSheetEmail object</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.SetFormatDetails(Smartsheet.Api.Models.FormatDetails)">
            <summary>
            Sets the format details of the SheetEmail.
            </summary>
            <param name="formatDetails">the format details</param>
            <returns>this CreateSheetEmail object</returns>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetEmail.CreateSheetEmail.Build">
            <summary>
            Creates and returns the SheetEmail object.
            </summary>
            <returns>the SheetEmail object</returns>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetEmailFormat">
            <summary>
            Represents the Sheet Email Format.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetLevelInclusion">
            <summary>
            Represents specific elements to include in a response.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.DISCUSSIONS">
            <summary>
            Includes sheet-level and row-level discussions.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.ATTACHMENTS">
            <summary>
            Includes sheet-level and row-level attachments.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.FORMAT">
            <summary>
            Includes column, row, and cell formatting.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.FILTERS">
            <summary>
            Includes column filters and row.filteredOut attribute.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.FILTER_DEFINITIONS">
            <summary>
            Includes column filter definitions
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.OWNER_INFO">
            <summary>
            Includes the owner’s email address and user Id for each sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.SOURCE">
            <summary>
            Includes the source object indicating which sheet or template the sheet was created from, if any.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.ROW_PERMALINK">
            <summary>
            Includes a permalink attribute for each row. A row permalink represents a direct link to the row in the Smartsheet application.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.COLUMN_TYPE">
            <summary>
            Includes columnType attribute in the row’s cells indicating the type of the column the cell resides in.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.ROW_WRITER_INFO">
            <summary>
            Includes createdBy and modifiedBy attributes on the row, indicating the row’s creator and last modifier.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.OBJECT_VALUE">
            <summary>
            object representation of cell value
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.CROSS_SHEET_REFERENCES">
            <summary>
            cross sheet references
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetLevelInclusion.CONTACT_REFERENCES">
            <summary>
            contact references
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetPublish">
            <summary>
            Represents the publish Status of a sheet. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/522078-publishing-Sheets">Help Publishing 
            Sheets</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.icalEnabled">
            <summary>
            Represents the iCal enabled flag.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.icalUrl">
            <summary>
            Represents the iCal URL.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readOnlyFullAccessibleBy">
            <summary>
            Flag to indicate who can access the 'Read-Only Full’ view of the published sheet:
                   If “ALL”, it is available to anyone who has the link.
                   If “ORG”, it is available only to members of the sheet owner’s Smartsheet organization.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readOnlyFullDefaultView">
            <summary>
            Default view for read only published sheet. (GRID, CARDS, CALENDAR)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readOnlyFullEnabled">
            <summary>
            Represents the read-only full (fancy UI) flag.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readOnlyFullShowToolbar">
            <summary>
            Flag to show or hide the left nav toolbar for the read only sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readOnlyFullUrl">
            <summary>
            Represents the read-only full URL.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readOnlyLiteEnabled">
            <summary>
            Represents the read-only lite (static HTML UI) flag.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readOnlyLiteUrl">
            <summary>
            Represents the read-only lite (static HTML UI) URL.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readWriteAccessibleBy">
            <summary>
            Flag to indicate who can access the 'Edit by Anyone’ view of the published sheet:
                   If “ALL”, it is available to anyone who has the link.
                   If “ORG”, it is available only to members of the sheet owner’s Smartsheet organization.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readWriteDefaultView">
            <summary>
            Default view for read write published sheet. (GRID, CARDS, CALENDAR)
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readWriteEnabled">
            <summary>
            Represents the read-write enabled flag.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readWriteShowToolbar">
            <summary>
            Flag to show or hide the left nav toolbar for the read/write sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetPublish.readWriteUrl">
            <summary>
            Represents the read-write URL.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.IcalEnabled">
            <summary>
            Gets the ical enabled flag.
            </summary>
            <returns> the ical enabled flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.IcalUrl">
            <summary>
            Gets the ical Url.
            </summary>
            <returns> the ical Url </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadOnlyFullAccessibleBy">
            <summary>
            Flag to indicate who can access the 'Read-Only Full’ view of the published sheet.
            </summary>
            <returns> the access flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadOnlyFullDefaultView">
            <summary>
            Get the read only full default view
            </summary>
            <returns> Valid options are "GRID", "CARDS", "CALENDAR" </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadOnlyFullEnabled">
            <summary>
            Gets the read only full (fancy UI) enabled flag.
            </summary>
            <returns> the read only full enabled flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadOnlyFullShowToolbar">
            <summary>
            Get the read only full show toolbar flag
            </summary>
            <returns> the flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadOnlyFullUrl">
            <summary>
            Gets the read only full (fancy UI) Url.
            </summary>
            <returns> the read only full Url </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadOnlyLiteEnabled">
            <summary>
            Gets the read only lite enabled flag.
            </summary>
            <returns> the read only lite enabled flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadOnlyLiteUrl">
            <summary>
            Gets the read only lite Url flag.
            </summary>
            <returns> the read only lite Url flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadWriteAccessibleBy">
            <summary>
            Flag to indicate who can access the 'Edit by Anyone’ view of the published sheet.
            </summary>
            <returns> the access flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadWriteDefaultView">
            <summary>
            Get the read write default view
            </summary>
            <returns> Valid options are "GRID", "CARDS", "CALENDAR" </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadWriteEnabled">
            <summary>
            Gets the read write enabled flag.
            </summary>
            <returns> the read write enabled flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadWriteShowToolbar">
            <summary>
            Get the read/write show toolbar flag
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.ReadWriteUrl">
            <summary>
            Gets the read write Url.
            </summary>
            <returns> the read write Url </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetPublish.PublishStatusBuilder">
            <summary>
            A convenience class for making a <seealso cref="T:Smartsheet.Api.Models.SheetPublish"/> object with the necessary fields to publish a sheet.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetPublish.PublishStatusBuilder.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Sets the required properties to publish a Sheet
            </summary>
            <param name="readOnlyLiteEnabled"> Status of Read-Only HTML </param>
            <param name="readOnlyFullEnabled"> Status of Read-Only Full </param>
            <param name="readWriteEnabled"> Status of Edit by Anyone </param>
            <param name="icalEnabled"> Status of iCal </param>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetPublish.PublishStatusBuilder.SetReadOnlyLiteEnabled(System.Nullable{System.Boolean})">
            <summary>
            Read only lite enabled.
            </summary>
            <param name="readOnlyLiteEnabled"> the read only lite (static html UI) enabled </param>
            <returns> the publish Status builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetPublish.PublishStatusBuilder.SetReadOnlyFullEnabled(System.Nullable{System.Boolean})">
            <summary>
            Read only full (fancy UI) enabled.
            </summary>
            <param name="readOnlyFullEnabled"> the read only full enabled </param>
            <returns> the publish Status builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetPublish.PublishStatusBuilder.SetReadWriteEnabled(System.Nullable{System.Boolean})">
            <summary>
            Read write enabled.
            </summary>
            <param name="readWriteEnabled"> the read write enabled </param>
            <returns> the publish Status builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetPublish.PublishStatusBuilder.SetIcalEnabled(System.Nullable{System.Boolean})">
            <summary>
            Ical enabled.
            </summary>
            <param name="icalEnabled"> the ical enabled </param>
            <returns> the publish Status builder </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.PublishStatusBuilder.ReadOnlyLiteEnabled">
            <summary>
            Gets the read only lite enabled.
            </summary>
            <returns> the read only lite enabled </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.PublishStatusBuilder.ReadOnlyFullEnabled">
            <summary>
            Gets the read only full enabled.
            </summary>
            <returns> the read only full enabled </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.PublishStatusBuilder.ReadWriteEnabled">
            <summary>
            Gets the read write enabled.
            </summary>
            <returns> the read write enabled </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetPublish.PublishStatusBuilder.IcalEnabled">
            <summary>
            Gets the ical enabled.
            </summary>
            <returns> the ical enabled </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.SheetPublish.PublishStatusBuilder.Build">
            <summary>
            Builds the.
            </summary>
            <returns> the sheet publish </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.SheetUserSettings">
            <summary>
            Represents individual user settings for a specific sheet. 
            User settings may be updated even on sheets where the current user only has read access (e.g., viewer permissions or a read-only sheet). </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetUserSettings.appliedSheetFilterId">
            <summary>
            The Id of the filter currently applied to the sheet
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetUserSettings.criticalPathEnabled">
            <summary>
            Does this user have “Show Critical Path” turned on for this sheet? Note this setting only has an effect on project sheets with dependencies enabled.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.SheetUserSettings.displaySummaryTasks">
            <summary>
            Does this user have “Display Summary Tasks” turned on for this sheet? Applies only to sheets where Calendar View has been configured.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetUserSettings.AppliedSheetFilterId">
            <summary>
            Get the Id of the sheet filter currently applied to this sheet
            </summary>
            <returns> the sheet filter Id </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetUserSettings.CriticalPathEnabled">
            <summary>
            Does this user have “Show Critical Path” turned on for this sheet? 
            Note this setting only has an effect on project sheets with dependencies enabled.
            </summary>
            <returns> true if this user has “Show Critical Path” turned on, false otherwise </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.SheetUserSettings.DisplaySummaryTasks">
            <summary>
            Does this user have “Display Summary Tasks” turned on for this sheet? 
            Applies only to sheets where Calendar View has been configured.
            </summary>
            <returns> true if this user has “Display Summary Tasks” turned on, false otherwise </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Source">
            <summary>
            Represents individual user settings for a specific sheet. 
            User settings may be updated even on sheets where the current user only has read access (e.g. viewer permissions or a read-only sheet). </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Source.Type">
            <summary>
            Type of this source. "sheet" or "template"
            </summary>
            <returns> "sheet" or "template" </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Symbol">
            <summary>
            Represents the column symbols. </summary>
            <see href="http://help.Smartsheet.com/customer/portal/articles/504619-column-types#symbols">Symbols Help</see>
        </member>
        <member name="T:Smartsheet.Api.Models.SystemColumnType">
            <summary>
            Represents the system column types. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/504619-column-types">Column Types Help</seealso>
        </member>
        <member name="T:Smartsheet.Api.Models.Template">
            <summary>
            A template object that is a default layout for future Sheets. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/522123-using-Templates">Using Templates Help</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.Template.type">
            <summary>
            Type of the template. One of “sheet” or “report”
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Template.accessLevel">
            <summary>
            Represents the access level for the template.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Template.blank">
            <summary>
            Flag indicating whether the template is blank
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Template.categories">
            <summary>
            List of categories this template belongs to
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Template.description">
            <summary>
            Represents the Description for the template.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Template.globalTemplate">
            <summary>
            Type of global template. One of: “BLANK_SHEET”, “TASK_LIST”, or “PROJECT_SHEET”
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Template.image">
            <summary>
            URL to the small preview image for this template.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Template.largeImage">
            <summary>
            URL to the large preview image for this template
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Template.locale">
            <summary>
            Locale of the template
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.Template.tags">
            <summary>
            List of search tags for this template
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Template.Type">
            <summary>
            Gets the type of the template. One of “sheet” or “report”.
            </summary>
            <returns> "sheet" or "report" </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Template.AccessLevel">
            <summary>
            Gets the access level of the template.
            </summary>
            <returns> the access level </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Template.Blank">
            <summary>
            Gets the flag indicating whether the template is blank.
            </summary>
            <returns> blank flag </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Template.Categories">
            <summary>
            Gets the list of categories this template belongs to.
            </summary>
            <returns> list of categories </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Template.Description">
            <summary>
            Gets the Description of the template.
            </summary>
            <returns> the Description </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Template.GlobalTemplate">
            <summary>
            Gets the type of global template.
            </summary>
            <returns> template type </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Template.Image">
            <summary>
            Gets the URL to the small preview image for this template.
            </summary>
            <returns> the URL </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Template.LargeImage">
            <summary>
            Gets the URL to the large preview image for this template.
            </summary>
            <returns> the URL </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Template.Locale">
            <summary>
            Gets the locale of the template.
            </summary>
            <returns> the locale </returns>
        </member>
        <member name="P:Smartsheet.Api.Models.Template.Tags">
            <summary>
            Gets the list of search tags for this template.
            </summary>
            <returns> list of tags </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.TemplateInclusion">
            <summary>
            Represents specific elements that can be copied from a Template or Sheet into a new Sheet.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.TemplateInclusion.DATA">
            <summary>
            Includes the data.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.TemplateInclusion.ATTACHMENTS">
            <summary>
            Includes the attachments.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.TemplateInclusion.DISCUSSIONS">
            <summary>
            Includes the discussions.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.TemplateInclusion.CELL_LINKS">
            <summary>
            Includes the cell links.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.TemplateInclusion.FORMS">
            <summary>
            Includes the forms.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.User">
            <summary>
            Represents the User object. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/795920-managing-Users-team-enterprise-only-">Help
            Managing Users</seealso>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/520100-user-types">User Types Help</seealso>
        </member>
        <member name="T:Smartsheet.Api.Models.User.AddUserBuilder">
            <summary>
            A convenience class for making a <seealso cref="T:Smartsheet.Api.Models.User"/> object with the appropriate fields for adding the user.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            User object with required attributes
            </summary>
            <param name="email">email (required)</param>
            <param name="admin">admin (required)</param>
            <param name="licensedSheetCreator">licensedSheetCreator (required)</param>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.SetAdmin(System.Nullable{System.Boolean})">
            <summary>
            Sets the Admin flag which allows managing Users and accounts.
            </summary>
            <param name="admin"> the Admin </param>
            <returns> the adds the user builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.SetLicensedSheetCreator(System.Nullable{System.Boolean})">
            <summary>
            Sets the licensed sheet creator flag that allows creating and owning Sheets.
            </summary>
            <param name="licensedSheetCreator"> the licensed sheet creator </param>
            <returns> the adds the user builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.SetEmail(System.String)">
            <summary>
            Sets the Email for the user.
            </summary>
            <param name="email"> the Email </param>
            <returns> the adds the user builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.SetFirstName(System.String)">
            <summary>
            Sets the user's first name.
            </summary>
            <param name="firstName"> the firstName </param>
            <returns> the adds the user builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.SetLastName(System.String)">
            <summary>
            Sets the user's last name.
            </summary>
            <param name="lastName"> the lastName </param>
            <returns> the adds the user builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.SetResourceViewer(System.Nullable{System.Boolean})">
            <summary>
            Sets the Flag indicating whether the user is a resource viewer (can access resource views)
            </summary>
            <param name="resourceViewer"> the resourceViewer </param>
            <returns> the adds the user builder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.GetAdmin">
            <summary>
            Gets the Admin.
            </summary>
            <returns> the Admin </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.GetEmailAddress">
            <summary>
            Gets the Email address.
            </summary>
            <returns> the Email address </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.GetLicensedSheetCreator">
            <summary>
            Gets the licensed sheet creator.
            </summary>
            <returns> the licensed sheet creator </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.GetFirstName">
            <summary>
            Gets the user's first name.
            </summary>
            <returns> the firstName </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.GetLastName">
            <summary>
            Gets the user's last name.
            </summary>
            <returns> the lastName </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.GetResourceViewer">
            <summary>
            Gets the Flag indicating whether the user is a resource viewer (can access resource views).
            </summary>
            <returns> the resourceViewer </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.AddUserBuilder.Build">
            <summary>
            Builds the <seealso cref="T:Smartsheet.Api.Models.User"/> object using the required fields.
            </summary>
            <returns> the user </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.User.UpdateUserBuilder">
            <summary>
            A convenience class for making a <seealso cref="T:Smartsheet.Api.Models.User"/> object with the appropriate fields for updating a user.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.#ctor(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            User object containing the required attributes:
            </summary>
            <param name="id">the user id</param>
            <param name="admin">admin (required)</param>
            <param name="licensedSheetCreator">licensedSheetCreator (required)</param>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.SetAdmin(System.Nullable{System.Boolean})">
            <summary>
            Sets the Admin flag which allows managing Users and accounts.
            </summary>
            <param name="admin"> the Admin </param>
            <returns> the UpdateUserBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.SetLicensedSheetCreator(System.Nullable{System.Boolean})">
            <summary>
            Sets the licensed sheet creator flag that allows creating and owning Sheets.
            </summary>
            <param name="licensedSheetCreator"> the licensed sheet creator </param>
            <returns> the UpdateUserBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.SetFirstName(System.String)">
            <summary>
            Sets the user's first name.
            </summary>
            <param name="firstName"> the firstName </param>
            <returns> the UpdateUserBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.SetLastName(System.String)">
            <summary>
            Sets the user's last name.
            </summary>
            <param name="lastName"> the lastName </param>
            <returns> the UpdateUserBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.SetResourceViewer(System.Nullable{System.Boolean})">
            <summary>
            Sets the Flag indicating whether the user is a resource viewer (can access resource views)
            </summary>
            <param name="resourceViewer"> the resourceViewer </param>
            <returns> the UpdateUserBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.GetAdmin">
            <summary>
            Gets the Admin.
            </summary>
            <returns> the Admin </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.GetLicensedSheetCreator">
            <summary>
            Gets the licensed sheet creator.
            </summary>
            <returns> the licensed sheet creator </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.GetFirstName">
            <summary>
            Gets the user's first name.
            </summary>
            <returns> the firstName </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.GetLastName">
            <summary>
            Gets the user's last name.
            </summary>
            <returns> the lastName </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.GetResourceViewer">
            <summary>
            Gets the Flag indicating whether the user is a resource viewer (can access resource views).
            </summary>
            <returns> the resourceViewer </returns>
        </member>
        <member name="M:Smartsheet.Api.Models.User.UpdateUserBuilder.Build">
            <summary>
            Builds the <seealso cref="T:Smartsheet.Api.Models.User"/> object using the required fields.
            </summary>
            <returns> the user </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.UserModelWithName">
            <summary>
            Represents an UserModelWithName.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserModelWithName.Name">
            <summary>
            Represents the name of the user
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.UserProfile">
            <summary>
            A user profile object.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserProfile.account">
            <summary>
            account details
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserProfile.groups">
            <summary>
            groups this user belongs to
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserProfile.locale">
            <summary>
            the user's locale
            </summary>
        </member>
        <member name="F:Smartsheet.Api.Models.UserProfile.timeZone">
            <summary>
            user's current timezone id
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserProfile.Account">
            <summary>
            Account object representing the current user’s customer account
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserProfile.Groups">
            <summary>
            List of groups this user belongs to
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserProfile.Locale">
            <summary>
            Current user’s locale (see Server Information)
            </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.UserProfile.TimeZone">
            <summary>
            Current user’s time zone ID
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.UserStatus">
            <summary>
            Represents the user Status.
            </summary>
        </member>
        <member name="T:Smartsheet.Api.Models.Workspace">
            <summary>
            Represents the Workspace object which is an area in which Sheets, reports, Templates and sub-Folders can be 
            organized, similar to a folder. </summary>
            <seealso href="http://help.Smartsheet.com/customer/portal/articles/506687-creating-a-workspace">Help Creating a 
            Workspace</seealso>
        </member>
        <member name="F:Smartsheet.Api.Models.Workspace.accessLevel">
            <summary>
            Represents the user's permissions on a workspace. </summary>
        </member>
        <member name="P:Smartsheet.Api.Models.Workspace.AccessLevel">
            <summary>
            Gets the user's permissions on a workspace.
            </summary>
            <returns> the access level </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Workspace.UpdateWorkspaceBuilder">
            <summary>
            A convenience class for creating a <seealso cref="T:Smartsheet.Api.Models.Workspace"/> object with the appropriate fields for updating a workspace.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Workspace.UpdateWorkspaceBuilder.#ctor(System.Nullable{System.Int64},System.String)">
            <summary>
            Build workspace with required parameter name.
            </summary>
            <param name="id">the id of the workspace</param>
            <param name="name">the name of the workspace</param>
        </member>
        <member name="M:Smartsheet.Api.Models.Workspace.UpdateWorkspaceBuilder.Build">
            <summary>
            Builds the <seealso cref="T:Smartsheet.Api.Models.Workspace"/>.
            </summary>
            <returns> the workspace </returns>
        </member>
        <member name="T:Smartsheet.Api.Models.Workspace.CreateWorkspaceBuilder">
            <summary>
            A convenience class for creating a <seealso cref="T:Smartsheet.Api.Models.Workspace"/> object with the appropriate fields for creating a workspace.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.Models.Workspace.CreateWorkspaceBuilder.#ctor(System.String)">
            <summary>
            Sets the required parameters to create a Workspace.
            </summary>
            <param name="name">the name of the workspace</param>
        </member>
        <member name="M:Smartsheet.Api.Models.Workspace.CreateWorkspaceBuilder.Build">
            <summary>
            Builds the <seealso cref="T:Smartsheet.Api.Models.Workspace"/>.
            </summary>
            <returns> the workspace </returns>
        </member>
        <member name="M:Smartsheet.Api.PassthroughResources.GetRequest(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            <para>Issue an HTTP GET request</para>
            </summary>
            <param name="endpoint"> the API endpoint </param>
            <param name="parameters"> optional list of resource parameters </param>
            <returns> a JSON response string </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.PassthroughResources.PostRequest(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            <para>Issue an HTTP POST request</para>
            </summary>
            <param name="endpoint"> the API endpoint </param>
            <param name="payload"> a JSON payload string </param>
            <param name="parameters"> optional list of resource parameters </param>
            <returns> a JSON response string </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.PassthroughResources.PutRequest(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            <para>Issue an HTTP PUT request</para>
            </summary>
            <param name="endpoint"> the API endpoint </param>
            <param name="payload"> a JSON payload string </param>
            <param name="parameters"> optional list of resource parameters </param>
            <returns> a JSON response string </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.PassthroughResources.DeleteRequest(System.String)">
            <summary>
            <para>Issue an HTTP DELETE request</para>
            </summary>
            <param name="endpoint"> the API endpoint </param>
            <returns> a JSON response string </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.SheetAutomationRuleResources">
            <summary>
            <para>This interface provides methods to access AutomationRule resources that are associated to a sheet object.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SheetAutomationRuleResources.ListAutomationRules(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets all automation rules for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/automationrules</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="paging"> the pagination parameters </param>
            <returns> a list of automation rules </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetAutomationRuleResources.GetAutomationRule(System.Int64,System.Int64)">
            <summary>
            <para>Gets an automation rule for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/automationrules/{automationRuleId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="automationRuleId"> the automation rule Id </param>
            <returns> the automation rule </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetAutomationRuleResources.UpdateAutomationRule(System.Int64,Smartsheet.Api.Models.AutomationRule)">
            <summary>
            <para>Updates an automation rule for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/automationrules/{automationRuleId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="automationRule"> the automation rule </param>
            <returns> the automation rule </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetAutomationRuleResources.DeleteAutomationRule(System.Int64,System.Int64)">
            <summary>
            <para>Deletes an automation rule for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/automationrules/{automationRuleId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="automationRuleId"> the automation rule Id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetCrossSheetReferenceResources.ListCrossSheetReferences(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets all cross-sheet references for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/crosssheetreferences</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="paging"> the pagination parameters </param>
            <returns> a list of cross-sheet references </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetCrossSheetReferenceResources.GetCrossSheetReference(System.Int64,System.Int64)">
            <summary>
            <para>Gets a cross-sheet reference for this sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: 
            GET /sheets/{sheetId}/crosssheetreferences/{crosssheetreferenceId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="crossSheetReferenceId"> the cross-sheet reference Id </param>
            <returns> the cross-sheet reference </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetCrossSheetReferenceResources.CreateCrossSheetReference(System.Int64,Smartsheet.Api.Models.CrossSheetReference)">
            <summary>
            <para>Creates a cross-sheet reference in the given sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/crosssheetreferences</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="crossSheetReference"> the cross-sheet reference </param>
            <returns> the cross-sheet reference </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.SheetFilterResources">
            <summary>
            <para>This interface provides methods to access sheet filter resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SheetFilterResources.ListFilters(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets the list of all sheet filters.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/filters</para>
            </summary>
            <param name="sheetId">the sheet Id</param>
            <param name="paging">the pagination</param>
            <returns> A list of all sheet filters (note that an empty list will be returned if there are none) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetFilterResources.GetFilter(System.Int64,System.Int64)">
            <summary>
            <para>Gets a filter.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/filters/{filterId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="filterId"> the filter Id </param>
            <returns> the sheet filter (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetFilterResources.DeleteFilter(System.Int64,System.Int64)">
            <summary>
            <para>Deletes a filter.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/filters/{filterId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="filterId"> the filter Id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetUpdateRequestResources.ListUpdateRequests(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Update Requests that have future schedules associated with the specified Sheet.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/updaterequests</para>
            </summary>
            <returns> A list of all UpdateRequests (note that an empty list will be returned if there are none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetUpdateRequestResources.GetUpdateRequest(System.Int64,System.Int64)">
            <summary>
            <para>Gets the specified Update Request for the Sheet that has a future schedule.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/updaterequests/{updateRequestId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="updateRequestId"> the update request Id </param>
            <returns> the update request resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetUpdateRequestResources.CreateUpdateRequest(System.Int64,Smartsheet.Api.Models.UpdateRequest)">
            <summary>
            <para>Creates an Update Request for the specified Row(s) within the Sheet. An email notification
            (containing a link to the update request) will be asynchronously sent to the specified recipient(s).</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/updaterequests</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="updateRequest"> the UpdateRequest object </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetUpdateRequestResources.DeleteUpdateRequest(System.Int64,System.Int64)">
            <summary>
            <para>Terminates the future scheduled delivery of the Update Request specified in the URL.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/updaterequests/{updateRequestId}</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="updateRequestId"> the updateRequestId </param>,
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetUpdateRequestResources.UpdateUpdateRequest(System.Int64,Smartsheet.Api.Models.UpdateRequest)">
            <summary>
            <para>Changes the specified Update Request for the Sheet.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/updaterequests/{updateRequestId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="updateRequest"> the UpdateRequest to update</param>
            <returns> the updated updateRequest </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetUpdateRequestResources.ListSentUpdateRequests(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Sent Update Requests that have future schedules associated with the specified Sheet.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/sentupdaterequests</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="paging">paging parameters for the list</param>
            <returns> A list of all SentUpdateRequests (note that an empty list will be returned if there are none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetUpdateRequestResources.GetSentUpdateRequest(System.Int64,System.Int64)">
            <summary>
            <para>Gets the specified sent update request on the Sheet.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/sentupdaterequests/{updateRequestId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="sentUpdateRequestId"> the sent update request Id </param>
            <returns> the sent update request resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetUpdateRequestResources.DeleteSentUpdateRequest(System.Int64,System.Int64)">
            <summary>
            <para>Deletes the specified sent update request.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/sentupdaterequests/{sentUpdateRequestId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="sentUpdateRequestId"> the sent update request Id </param>,
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SightResources.ListSights(Smartsheet.Api.Models.PaginationParameters,System.Nullable{System.DateTime})">
            <summary>
            <para>Gets the list of all Sights that the User has access to.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sights</para>
            </summary>
            <returns>IndexResult object containing an array of Sight objects limited to the following attributes:
                   id, name, accessLevel, permalink, createdAt, modifiedAt 
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SightResources.GetSight(System.Int64)">
            <summary>
            <para>Get a specified Sight.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sights/{sightId}</para>
            </summary>
            <param name="sightId"> the Id of the sight </param>
            <returns> the sight resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SightResources.GetSight(System.Int64,System.Nullable{System.Int32})">
            <summary>
            <para>Get a specified Sight.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sights/{sightId}</para>
            </summary>
            <param name="sightId"> the Id of the sight </param>
            <param name="level"> compatibility level </param>
            <returns> the sight resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SightResources.UpdateSight(Smartsheet.Api.Models.Sight)">
            <summary>
            <para>Updates (renames) the specified Sight.</para>
            <para>The request body is limited to the name attribute.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /sights/{sightId}</para>
            </summary>
            <param name="sight"> the sight to update </param>
            <returns> the updated sight </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SightResources.DeleteSight(System.Int64)">
            <summary>
            <para>Delete a sight.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sights/{sightId}</para>
            </summary>
            <param name="sightId"> the sightId </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SightResources.CopySight(System.Int64,Smartsheet.Api.Models.ContainerDestination)">
            <summary>
            <para>Creates a copy of the specified Sight.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /sights/{sightId}/copy</para>
            </summary>
            <param name="sightId"> the sightId </param>
            <param name="destination"> the destination to copy to </param>
            <returns>Result object containing a Sight for the newly created Sight, limited to the following attributes:
                   id, name, accessLevel, permalink.</returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SightResources.MoveSight(System.Int64,Smartsheet.Api.Models.ContainerDestination)">
            <summary>
            <para>Moves the specified Sight to a new location.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /sights/{sightId}/move</para>
            </summary>
            <param name="sightId"> the sightId </param>
            <param name="destination"> the destination to copy to </param>
            <returns> the moved sight </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SightResources.GetPublishStatus(System.Int64)">
            <summary>
            <para>Get the publish status of a sight.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sights/{id}/publish</para>
            </summary>
            <param name="sightId"> the sightId </param>
            <returns>
            The sight publish status (note that if there is no such resource, this method will 
            throw ResourceNotFoundException rather than returning null).
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SightResources.SetPublishStatus(System.Int64,Smartsheet.Api.Models.SightPublish)">
            <summary>
            <para>
            Sets the publish status of a sight and returns the new status, including the URLs of any enabled publishing.
            </para>
            
            <para>It mirrors to the following Smartsheet REST API method: PUT /sights/{id}/publish</para>
            </summary>
            <param name="sightId"> the sightId </param>
            <param name="sightPublish"> the SightPublish object</param>
            <returns>
            The sight publish status (note that if there is no such resource, this method will 
            throw ResourceNotFoundException rather than returning null).
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.SightResources.ShareResources">
            <summary>
            <para>Returns the ShareResources object that provides access to Share resources associated with Sight resources.</para>
            </summary>
            <returns> the share resources object </returns>
        </member>
        <member name="T:Smartsheet.Api.TokenResources">
            <summary>
            <para>This interface provides methods to access Token resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.TokenResources.GetAccessToken">
            <summary>
            <para>Please use OAuthFlowBuilder class to build an instance of an OAuthFlow class.</para>
            <para>Will throw a NotSupportedException.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /token</para>
            </summary>
            <exception cref="T:System.NotSupportedException"> 
            This exception is always thrown since this operation is not supported by the Token Resources.
            Instead, see OAuthFlow.
            </exception>
        </member>
        <member name="M:Smartsheet.Api.TokenResources.RefreshAccessToken">
            <summary>
            <para>Please use OAuthFlowBuilder class to build an instance of an OAuthFlow class.</para>
            <para>Will throw a NotSupportedException.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /token</para>
            </summary>
            <exception cref="T:System.NotSupportedException"> 
            This exception is always thrown since this operation is not supported by the Token Resources.
            Instead, see OAuthFlow.
            </exception>
        </member>
        <member name="M:Smartsheet.Api.TokenResources.RevokeAccessToken">
            <summary>
            <para>Revokes the access token used to make this request. The access token will no longer be valid, and subsequent API calls made using the token will fail.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            DELETE /token</para>
            </summary>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.TokenResources.RevokeAccessToken(System.Nullable{System.Boolean})">
            <summary>
            <para>Revokes the access token used to make this request. The access token will no longer be valid, and subsequent API calls made using the token will fail.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            DELETE /token</para>
            </summary>
            
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.FolderResources">
            <summary>
            <para>This interface provides methods to access Folder resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.FolderResources.GetFolder(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.FolderInclusion})">
            <summary>
            <para>Gets the specified Folder (and lists its contents).</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /folders/{folderId}</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="include"> (optional) – comma-separated list of elements to include in the respons</param>
            <returns> the folder (note that if there is no such resource, this method will throw ResourceNotFoundException 
            rather than returning null) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.FolderResources.UpdateFolder(Smartsheet.Api.Models.Folder)">
            <summary>
            <para>Updates a folder.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /folders/{folderId}</para>
            </summary>
            <param name="folder"> the folder to update </param>
            <returns> the updated folder (note that if there is no such folder, this method will throw Resource Not Found 
            Exception rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.FolderResources.DeleteFolder(System.Int64)">
            <summary>
            <para>Deletes a folder.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            DELETE /folders/{folderId}</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.FolderResources.ListFolders(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of the top-level child Folders within the specified Folder.</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            <para>It mirrors to the following Smartsheet REST API method:<br /> GET /folders/{folderId}/folders</para>
            </summary>
            <param name="folderId"> the folderId</param>
            <param name="paging">the pagination information</param>
            <returns>the child Folders (note that an empty list will be returned if no child folder is found), limited to the following attributes:
            <list type="bullet">
            <item><description>id</description></item>
            <item><description>name</description></item>
            <item><description>permalink</description></item>
            </list>
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.FolderResources.CreateFolder(System.Int64,Smartsheet.Api.Models.Folder)">
            <summary>
            <para>Creates a Folder in the specified Folder.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /folders/{folderId}/folders</para>
            </summary>
            <param name="folderId"> the parent folder Id </param>
            <param name="folder"> the folder to create </param>
            <returns> the created folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.FolderResources.CopyFolder(System.Int64,Smartsheet.Api.Models.ContainerDestination,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.FolderCopyInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.FolderRemapExclusion})">
            <summary>
            <para>Creates a copy of the specified Folder.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /folders/{folderId}/copy</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="destination"> the destination to copy to </param>
            <param name="include"> the elements to copy. Note: Cell history will not be copied, regardless of which include parameter values are specified.</param>
            <param name="skipRemap"> the references to NOT re-map for the newly created folder
            <para>
            If "cellLinks" is specified in the skipRemap parameter value, the cell links within the newly created folder will continue to point to the original source sheets.
            If "reports" is specified in the skipRemap parameter value, the reports within the newly created folder will continue to point to the original source sheets.
            </para>
            </param>
            <returns> the created folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.FolderResources.MoveFolder(System.Int64,Smartsheet.Api.Models.ContainerDestination)">
            <summary>
            <para>Moves the specified Folder to another location.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /folders/{folderId}/move</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="destination"> the destination to copy to </param>
            <returns> the moved folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.FolderResources.SheetResources">
            <summary>
            <para>Return the SheetResources object that provides access to Sheet resources associated with Folder resources.</para>
            </summary>
            <returns> the SheetResources object </returns>
        </member>
        <member name="T:Smartsheet.Api.GroupResources">
            <summary>
            <para>This interface provides methods to access Group resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.GroupResources.ListGroups(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>List all Users.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /groups</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <param name="paging"> the pagination</param>
            <returns> the list of all Users </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.GroupResources.CreateGroup(Smartsheet.Api.Models.Group)">
            <summary>
            <para>Creates a new Group.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /groups</para>
            <remarks>This operation is only available to group administrators and system administrators.</remarks>
            </summary>
            <param name="group"> the group object </param>
            <returns> the created group </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.GroupResources.GetGroup(System.Int64)">
            <summary>
            <para>Gets the Group specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /groups/{groupId}</para>
            </summary>
            <returns> Group object that includes the list of GroupMembers </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.GroupResources.UpdateGroup(Smartsheet.Api.Models.Group)">
            <summary>
            <para>Updates the Group specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /groups/{groupId}</para>
            <remarks>This operation is only available to group administrators and system administrators.</remarks>
            </summary>
            <param name="group"> the group to update </param>
            <returns> the updated user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.GroupResources.DeleteGroup(System.Int64)">
            <summary>
            <para>Deletes the Group specified in the URL.</para>
            <remarks>This operation is only available to system administrators.</remarks>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /groups/{groupId}</para>
            </summary>
            <param name="groupId"> the Id of the group </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.GroupResources.AddGroupMembers(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.GroupMember})">
            <summary>
            <para>Adds one or more members to a Group.</para>
            <remarks><para>If called with a single GroupMember object, and that group member already exists, error code 1129 will be returned.
            If called with an array of GroupMember objects any users specified in the array that are already group members will be ignored and omitted from the response.</para>
            <para>This operation is only available to group administrators and system administrators.</para>
            <para>This operation is asynchronous, meaning the users may not yet have sharing access to sheets for a period of time after this operation returns.
            For small groups with limited sharing, the operation should complete quickly (within a few seconds).
            For large groups with many shares, this operation could possibly take more than a minute to complete.</para></remarks>
            <para>It mirrors to the following Smartsheet REST API method: POST /groups/{groupId}/members</para>
            </summary>
            <param name="groupId"> the Id of the group </param>
            <param name="groupMembers"> array of Group Member objects </param>
            <returns> the members added to the group </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.GroupResources.RemoveGroupMember(System.Int64,System.Int64)">
            <summary>
            <para>Removes a member from a Group.</para>
            <remarks><para>This operation is only available to group administrators and system administrators.</para>
            <para>This operation is asynchronous, meaning group members may retain their sharing access for a brief period of time after the call returns.
            For small groups with limited sharing, the operation should complete quickly (within a few seconds).
            For large groups with many shares, this operation could possibly take more than a minute to complete.</para></remarks>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /groups/{groupId}/members/{userId}</para>
            </summary>
            <param name="groupId"> the Id of the group </param>
            <param name="userId"> the Id of the user </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.HomeFolderResources">
            <summary>
            <para>This interface provides methods to access Folder resources under home.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.HomeFolderResources.ListFolders(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>List Folders under home.</para>
            
            <para>It mirrors to the following Smartsheet REST API method:<br />
            GET /home/Folders</para>
            </summary>
            <returns>the list of Folders (note that an empty list will be returned if no child folder is found), limited to the following attributes:
            <list type="bullet">
            <item><description>id</description></item>
            <item><description>name</description></item>
            <item><description>permalink</description></item>
            </list>
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.HomeFolderResources.CreateFolder(Smartsheet.Api.Models.Folder)">
            <summary>
            <para>Create a folder in home.</para>
            
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /home/Folders</para>
            </summary>
            <param name="folder"> the folder to create </param>
            <returns> the folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.HomeResources">
            <summary>
            <para>This interface provides methods to access Home resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.HomeResources.GetHome(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.HomeInclusion})">
            <summary>
            <para>
            Gets a nested list of all Home objects, including folders, reports, sheets, templates, and workspaces as shown on the Home tab.
            </para>
            <para>
            Mirrors to the following Smartsheet REST API method: GET /home
            </para>
            </summary>
            <param name="includes"> used to specify the optional objects to include, currently TEMPLATES is supported. </param>
            <exception cref="T:Smartsheet.Api.InvalidRequestException">if there is any problem with the REST API request</exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException">if there is any problem with the REST API authorization (access token)</exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException">if the resource cannot be found</exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException">if the REST API service is not available (possibly due to rate limiting)</exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException">if any other REST API related error occurred during the operation</exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException">if any other error occurred during the operation</exception>
            <returns> the resource (note that if there is no such resource, this method will throw ResourceNotFoundException
            rather than returning null). </returns>
        </member>
        <member name="M:Smartsheet.Api.HomeResources.GetHome(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.HomeInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.HomeExclusion})">
            <summary>
            <para>
            Gets a nested list of all Home objects, including folders, reports, sheets, templates, and workspaces as shown on the Home tab.
            </para>
            <para>
            Mirrors to the following Smartsheet REST API method: GET /home
            </para>
            </summary>
            <param name="includes"> used to specify the optional objects to include, currently TEMPLATES is supported. </param>
            <param name="excludes"> used to specify the optional object to exclude </param>
            <exception cref="T:Smartsheet.Api.InvalidRequestException">if there is any problem with the REST API request</exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException">if there is any problem with the REST API authorization (access token)</exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException">if the resource cannot be found</exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException">if the REST API service is not available (possibly due to rate limiting)</exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException">if any other REST API related error occurred during the operation</exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException">if any other error occurred during the operation</exception>
            <returns> the resource (note that if there is no such resource, this method will throw ResourceNotFoundException
            rather than returning null). </returns>
        </member>
        <member name="P:Smartsheet.Api.HomeResources.FolderResources">
            <summary>
            <para>Returns the HomeFolderResources object that provides access to folder resources under home.</para>
            </summary>
            <returns> the home folder resources </returns>
        </member>
        <member name="T:Smartsheet.Api.InvalidRequestException">
            <summary>
            <para>This is the exception to indicate invalid request error returned from Smartsheet REST API.</para>
            
            <para>Basically this exception will be thrown when the Smartsheet REST API responds with "400 BAD REQUEST".</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.InvalidRequestException.#ctor(Smartsheet.Api.Models.Error)">
            <summary>
            Constructor.
            </summary>
            <param name="error"> the Error object from Smartsheet REST API </param>
        </member>
        <member name="T:Smartsheet.Api.OAuth.AccessDeniedException">
            <summary>
            <para>This is the exception thrown by <seealso cref="T:Smartsheet.Api.OAuth.OAuthFlow"/> To indicate "access_denied" error when obtaining an authorization Code.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.AccessDeniedException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
        </member>
        <member name="T:Smartsheet.Api.OAuth.AccessScope">
            <summary>
            Represents the access scope. These are the scopes that are required to access an end user's Smartsheet data and 
            specifies the Type of operations that are permitted.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.READ_SHEETS">
            <summary>
            Read all sheet data, including comments, attachments and cell data
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.WRITE_SHEETS">
            <summary>
            Insert and modify sheet data, including comments, attachments and cell data
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.SHARE_SHEETS">
            <summary>
            Share sheets, including sending sheets as attachments
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.DELETE_SHEETS">
            <summary>
            Delete sheets
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.CREATE_SHEETS">
            <summary>
            Create new sheets
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.CREATE_SIGHTS">
            <summary>
            Create new sights
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.READ_SIGHTS">
            <summary>
            Read all sight data
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.DELETE_SIGHTS">
            <summary>
            Delete sight
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.SHARE_SIGHTS">
            <summary>
            Share sight
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.READ_USERS">
            <summary>
            Retrieve users and groups for your Smartsheet organization
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.READ_CONTACTS">
            <summary>
            Retrieve contacts
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.ADMIN_USERS">
            <summary>
            Add and remove users from your Smartsheet organization; create groups and manage membership
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.ADMIN_SHEETS">
            <summary>
            Modify sheet structure, including column definition, publish state, etc.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AccessScope.ADMIN_WORKSPACES">
            <summary>
            Create and manage workspaces and folders, including sharing
            </summary>
        </member>
        <member name="T:Smartsheet.Api.OAuth.AuthorizationResult">
            <summary>
            Represents an OAuth authorization RequestResult.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AuthorizationResult.code">
            <summary>
            Represents the authorization Code which is required to obtain an access token. </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AuthorizationResult.expiresInSeconds">
            <summary>
            Represents the total number of seconds that the authorization token is valid. This is always 4 minutes. </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.AuthorizationResult.state">
            <summary>
            Represents the State string which is returned to the redirect URL for a registered application. </summary>
        </member>
        <member name="P:Smartsheet.Api.OAuth.AuthorizationResult.Code">
            <summary>
            Gets the authorization Code which is required to obtain an access token.
            </summary>
            <returns> the authorization Code </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.AuthorizationResult.ExpiresInSeconds">
            <summary>
            Gets the total number of seconds that the authorization token is valid. This is always 4 minutes.
            </summary>
            <returns> the expires in seconds </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.AuthorizationResult.State">
            <summary>
            Gets the State string which is returned to the redirect URL for a registered application
            </summary>
            <returns> the State </returns>
        </member>
        <member name="M:Smartsheet.Api.OAuth.AuthorizationResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Smartsheet.Api.OAuth.InvalidOAuthClientException">
            <summary>
            <para>This is the exception thrown by <seealso cref="T:Smartsheet.Api.OAuth.OAuthFlow"/> To indicate an "invalid_client" error occurred when obtaining 
            OAuth tokens.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.InvalidOAuthClientException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
        </member>
        <member name="T:Smartsheet.Api.OAuth.InvalidOAuthGrantException">
            <summary>
            <para>This is the exception thrown by <seealso cref="T:Smartsheet.Api.OAuth.OAuthFlow"/> To indicate an "invalid_grant" error occurred when obtaining 
            OAuth tokens.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.InvalidOAuthGrantException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
        </member>
        <member name="T:Smartsheet.Api.OAuth.InvalidScopeException">
            <summary>
            <para>This is the exception thrown by <seealso cref="T:Smartsheet.Api.OAuth.OAuthFlow"/> To indicate an "invalid_scope" error occurred when obtaining an 
            authorization Code.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.InvalidScopeException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
        </member>
        <member name="T:Smartsheet.Api.OAuth.InvalidTokenRequestException">
            <summary>
            <para>This is the exception thrown by <seealso cref="T:Smartsheet.Api.OAuth.OAuthFlow"/> To indicate an "invalid_request" error occurred when obtaining OAuth 
            tokens.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.InvalidTokenRequestException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
        </member>
        <member name="T:Smartsheet.Api.OAuth.OAuthAuthorizationCodeException">
            <summary>
            <para>This is the exception thrown by <seealso cref="T:Smartsheet.Api.OAuth.OAuthFlow"/> To indicate errors occurred when obtaining authorization Code.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthAuthorizationCodeException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthAuthorizationCodeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
            <param name="cause"> the cause </param>
        </member>
        <member name="T:Smartsheet.Api.OAuth.OAuthFlow">
            <summary>
            <para>OAuthFlow interface provides methods to do the OAuth2 authorization.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlow.NewAuthorizationURL(System.Collections.Generic.IEnumerable{Smartsheet.Api.OAuth.AccessScope},System.String)">
            <summary>
            <para>Generate a new authorization URL.</para>
            </summary>
            <param name="scopes"> the requested scopes </param>
            <param name="state"> an arbitrary string that will be returned to your app; intended to be used by you to ensure that 
            this redirect is indeed from an OAuth flow that you initiated. </param>
            <returns> the authorization URL </returns>
            <exception cref="T:System.InvalidOperationException"> if scopes is null or empty </exception>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlow.ExtractAuthorizationResult(System.String)">
            <summary>
            Extract AuthorizationResult from the authorization response URL (i.e. the RedirectURL with the response
            parameters from Smartsheet OAuth server).
            </summary>
            <param name="authorizationResponseURL"> the authorization response Url </param>
            <returns> the authorization RequestResult </returns>
            <exception cref="T:System.UriFormatException"> the URI syntax exception </exception>
            <exception cref="T:Smartsheet.Api.OAuth.AccessDeniedException"> the access denied exception </exception>
            <exception cref="T:Smartsheet.Api.OAuth.UnsupportedResponseTypeException"> the unsupported response Type exception </exception>
            <exception cref="T:Smartsheet.Api.OAuth.InvalidScopeException"> the invalid scope exception </exception>
            <exception cref="T:Smartsheet.Api.OAuth.OAuthAuthorizationCodeException"> the o auth authorization Code exception </exception>
            <exception cref="T:System.InvalidOperationException"> if any other error occurred during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlow.ObtainNewToken(Smartsheet.Api.OAuth.AuthorizationResult)">
            <summary>
            Obtain a new token using AuthorizationResult.
            </summary>
            <param name="authorizationResult"> the authorization RequestResult </param>
            <returns> the token </returns>
            <exception cref="T:Smartsheet.Api.OAuth.OAuthTokenException"> the o auth token exception </exception>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
            <exception cref="T:System.UriFormatException"> the URI syntax exception </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> the invalid request exception </exception>
            <exception cref="T:System.InvalidOperationException"> if any other error occurred during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlow.RefreshToken(Smartsheet.Api.OAuth.Token)">
            <summary>
            Refresh token.
            </summary>
            <param name="token"> the token to refresh </param>
            <returns> the refreshed token </returns>
            <exception cref="T:Smartsheet.Api.OAuth.OAuthTokenException"> the o auth token exception </exception>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
            <exception cref="T:System.UriFormatException"> the URI syntax exception </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> the invalid request exception </exception>
            <exception cref="T:System.InvalidOperationException"> if any other error occurred during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlow.RevokeToken(Smartsheet.Api.OAuth.Token)">
            <summary>
            Revoke token.
            </summary>
            <param name="token"> the  token </param>
            <exception cref="T:Smartsheet.Api.OAuth.OAuthTokenException"> the o auth token exception </exception>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
            <exception cref="T:System.UriFormatException"> the URI syntax exception </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> the invalid request exception </exception>
            <exception cref="T:System.InvalidOperationException"> if any other error occurred during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlow.RevokeAllForApiClient(Smartsheet.Api.OAuth.Token)">
            <summary>
            Revoke token.
            </summary>
            <param name="token"> the  token </param>
            <exception cref="T:Smartsheet.Api.OAuth.OAuthTokenException"> the o auth token exception </exception>
            <exception cref="T:Smartsheet.Api.Internal.Json.JsonSerializationException"> the JSON serializer exception </exception>
            <exception cref="T:System.UriFormatException"> the URI syntax exception </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> the invalid request exception </exception>
            <exception cref="T:System.InvalidOperationException"> if any other error occurred during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.OAuth.OAuthFlowBuilder">
            <summary>
            <para>This is the builder that is used to build <seealso cref="T:Smartsheet.Api.OAuth.OAuthFlow"/> instances.</para>
            
            <para>Thread Safety: This class is not thread safe since it's mutable, one builder instance is NOT expected to be used in
            multiple threads.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.OAuthFlowBuilder.DEFAULT_AUTHORIZATION_URL">
            <summary>
            <para>Represents the default OAuth authorization URL</para>
            
            <para>It is a constant with Value "https://www.Smartsheet.com/b/authorize".</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.OAuthFlowBuilder.DEFAULT_TOKEN_URL">
            <summary>
            <para>Represents the default token URL</para>
            
            <para>It is a constant with Value "https://Api.Smartsheet.com/2.0/token".</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.OAuthFlowBuilder.httpClient">
            <summary>
            <para>Represents the HttpClient.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.OAuthFlowBuilder.jsonSerializer">
            <summary>
            <para>Represents the JsonSerializer.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.OAuthFlowBuilder.clientId">
            <summary>
            <para>Represents the client ID.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.OAuthFlowBuilder.clientSecret">
            <summary>
            <para>Represents the client secret.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.OAuthFlowBuilder.redirectURL">
            <summary>
            <para>Represents the redirect URL.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.OAuthFlowBuilder.authorizationURL">
            <summary>
            <para>Represents the authorization URL.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.OAuthFlowBuilder.tokenURL">
            <summary>
            <para>Represents the token URL.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlowBuilder.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlowBuilder.SetHttpClient(Smartsheet.Api.Internal.Http.HttpClient)">
            <summary>
            Set the HttpClient.
            </summary>
            <param name="httpClient"> the HttpClient </param>
            <returns> the OAuthFlowBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlowBuilder.SetJsonSerializer(Smartsheet.Api.Internal.Json.JsonSerializer)">
            <summary>
            <para>Set the JsonSerializer.</para>
            </summary>
            <param name="jsonSerializer"> the JsonSerializer </param>
            <returns> the oAuthFlowBuilder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null/empty string </exception>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlowBuilder.SetClientId(System.String)">
            <summary>
            Set the client ID
            </summary>
            <param name="clientId"> the Value to set </param>
            <returns> the OAuthFlowBuilder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null/empty string </exception>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlowBuilder.SetClientSecret(System.String)">
            <summary>
            Set the client secret.
            </summary>
            <param name="clientSecret"> the client secret </param>
            <returns> the OAuthFlowBuilder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null/empty string </exception>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlowBuilder.SetRedirectURL(System.String)">
            <summary>
            Set the redirect URL
            </summary>
            <param name="redirectURL"> the redirect Url </param>
            <returns> the OAuthFlowBuilder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null/empty string </exception>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlowBuilder.SetAuthorizationURL(System.String)">
            <summary>
            Set the authorization URL.
            </summary>
            <param name="authorizationURL"> the authorization URL </param>
            <returns> the OAuthFlowBuilder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null/empty string </exception>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlowBuilder.SetTokenURL(System.String)">
            <summary>
            Set the token URL.
            </summary>
            <param name="tokenURL"> the token Url </param>
            <returns> the OAuthFlowBuilder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null/empty string </exception>
        </member>
        <member name="P:Smartsheet.Api.OAuth.OAuthFlowBuilder.DefaultAuthorizationUrl">
            <summary>
            Gets the default authorization Url.
            </summary>
            <returns> the default authorization Url </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.OAuthFlowBuilder.DefaultTokenUrl">
            <summary>
            Gets the default token Url.
            </summary>
            <returns> the default token Url </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.OAuthFlowBuilder.HttpClient">
            <summary>
            Gets the http client.
            </summary>
            <returns> the http client </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.OAuthFlowBuilder.JsonSerializer">
            <summary>
            Gets the Json serializer.
            </summary>
            <returns> the Json serializer </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.OAuthFlowBuilder.ClientId">
            <summary>
            Gets the client Id.
            </summary>
            <returns> the client Id </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.OAuthFlowBuilder.ClientSecret">
            <summary>
            Gets the client secret.
            </summary>
            <returns> the client secret </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.OAuthFlowBuilder.RedirectURL">
            <summary>
            Gets the redirect Url.
            </summary>
            <returns> the redirect Url </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.OAuthFlowBuilder.AuthorizationURL">
            <summary>
            Gets the authorization Url.
            </summary>
            <returns> the authorization Url </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.OAuthFlowBuilder.TokenURL">
            <summary>
            Gets the token Url.
            </summary>
            <returns> the token Url </returns>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthFlowBuilder.Build">
            <summary>
            Build the OAuthFlow instance.
            </summary>
            <returns> the OAuthFlow instance </returns>
            <exception cref="T:System.InvalidOperationException"> if ClientId, ClientSecret or RedirectURL isn't set yet. </exception>
        </member>
        <member name="T:Smartsheet.Api.OAuth.OAuthTokenException">
            <summary>
            <para>This is the exception thrown by <seealso cref="T:Smartsheet.Api.OAuth.OAuthFlow"/> To indicate errors occurred during obtaining OAuth tokens.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthTokenException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
        </member>
        <member name="M:Smartsheet.Api.OAuth.OAuthTokenException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
            <param name="cause"> the cause </param>
        </member>
        <member name="T:Smartsheet.Api.OAuth.Token">
            <summary>
            Represents OAuth token.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.Token.accessToken">
            <summary>
            Represents the access token.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.Token.tokenType">
            <summary>
            Represents the token Type.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.Token.refreshToken">
            <summary>
            Represents the refresh token.
            </summary>
        </member>
        <member name="F:Smartsheet.Api.OAuth.Token.expiresInSeconds">
            <summary>
            Represents the expiration time in seconds.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.OAuth.Token.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <returns> the access token </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.Token.TokenType">
            <summary>
            Gets the token Type.
            </summary>
            <returns> the token Type </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.Token.RefreshToken">
            <summary>
            Gets the refresh token.
            </summary>
            <returns> the refresh token </returns>
        </member>
        <member name="P:Smartsheet.Api.OAuth.Token.ExpiresInSeconds">
            <summary>
            Gets the expires in seconds.
            </summary>
            <returns> the expires in seconds </returns>
        </member>
        <member name="T:Smartsheet.Api.OAuth.UnsupportedOAuthGrantTypeException">
            <summary>
            <para>This is the exception thrown by <seealso cref="T:Smartsheet.Api.OAuth.OAuthFlow"/> To indicate "unsupported_grant_type" error occurred during obtaining OAuth
            tokens.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.UnsupportedOAuthGrantTypeException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
        </member>
        <member name="T:Smartsheet.Api.OAuth.UnsupportedResponseTypeException">
            <summary>
            <para>This is the exception thrown by <seealso cref="T:Smartsheet.Api.OAuth.OAuthFlow"/> To indicate "unsupported_response_type" error occurred when obtaining
            an authorization Code.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.OAuth.UnsupportedResponseTypeException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"> the Message </param>
        </member>
        <member name="T:Smartsheet.Api.ReportResources">
            <summary>
            <para>This interface provides methods to access Report resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.ReportResources.GetReport(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.ReportInclusion},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Gets the Report, including one page of Rows, and optionally populated with Discussions, Attachments, and source Sheets.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /reports/{reportId}</para>
            </summary>
            <remarks>This method returns the top 100 rows. To get more or less rows please use the other overloaded versions of this method</remarks>
            <param name="reportId"> the Id of the report </param>
            <param name="include"> used to specify the optional objects to include. </param>
            <param name="pageSize">(optional): Number of rows per page. If not specified, the default value is 100.
            This operation can return a maximum of 500 rows per page.</param>
            <param name="page">(optional): Which page number (1-based) to return. 
            If not specified, the default value is 1. If a page number is specified that is greater than the number of total pages, the last page will be returned.</param>
            <returns> the report resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smartsheet.Api.ReportResources.GetReport(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.ReportInclusion},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})" -->
        <member name="M:Smartsheet.Api.ReportResources.ListReports(Smartsheet.Api.Models.PaginationParameters,System.Nullable{System.DateTime})">
            <summary>
            <para>Gets the list of all Reports that the User has access to, in alphabetical order, by name.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /reports</para>
            </summary>
            <param name="paging">the pagination</param>
            <param name="modifiedSince">restrict results to reports modified on or after the specified date</param>
            <returns>A list of Report objects limited to the following attributes:
            <list type="bullet">
            <item><description>id</description></item>
            <item><description>name</description></item>
            <item><description>accessLevel</description></item>
            <item><description>permalink</description></item>
            </list></returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.ReportResources.GetReportAsExcel(System.Int64,System.IO.BinaryWriter)">
            <summary>
            <para>Gets the Report in the format specified, based on the Report ID.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            GET /reports/{reportId} with "application/vnd.ms-excel" Accept HTTP header</para>
            </summary>
            <param name="reportId"> the Id of the report </param>
            <param name="outputStream"> the output stream to which the Excel file will be written. </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.ReportResources.GetReportAsCSV(System.Int64,System.IO.BinaryWriter)">
            <summary>
            <para>Get a report as a CSV file.</para>
            
            <para>It mirrors to the following Smartsheet REST API method:<br />
            GET /reports/{reportId} with "text/csv" Accept HTTP header</para>
            </summary>
            <param name="reportId"> the Id of the report </param>
            <param name="outputStream"> the output stream to which the Excel file will be written. </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.ReportResources.SendReport(System.Int64,Smartsheet.Api.Models.SheetEmail)">
            <summary>
            <para>Send a report as a PDF attachment via Email to the designated recipients.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: POST /reports/{reportId}/emails</para>
            </summary>
            <param name="reportId"> the reportId </param>
            <param name="email"> the Email </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.ReportResources.GetPublishStatus(System.Int64)">
            <summary>
            <para>Get the publish status of a report.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /reports/{id}/publish</para>
            </summary>
            <param name="reportId"> the reportId </param>
            <returns>
            The report publish status (note that if there is no such resource, this method will 
            throw ResourceNotFoundException rather than returning null).
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.ReportResources.UpdatePublishStatus(System.Int64,Smartsheet.Api.Models.ReportPublish)">
            <summary>
            <para>
            Sets the publish status of a report and returns the new status, including the URLs of any enabled publishing.
            </para>
            
            <para>It mirrors to the following Smartsheet REST API method: PUT /reports/{id}/publish</para>
            </summary>
            <param name="reportId"> the reportId </param>
            <param name="reportPublish"> the ReportPublish object</param>
            <returns>
            The report publish status (note that if there is no such resource, this method will 
            throw ResourceNotFoundException rather than returning null).
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.ReportResources.ShareResources">
            <summary>
            <para>Return the ShareResources object that provides access to Share resources associated with Report resources.</para>
            </summary>
            <returns> the share resources object </returns>
        </member>
        <member name="T:Smartsheet.Api.ResourceNotFoundException">
            <summary>
            This is the exception to indicate a resource can not be found.
            
            Basically this exception will be thrown when the Smartsheet REST API responds with "404 NOT FOUND".
            
            Thread safety: Exceptions are not thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.ResourceNotFoundException.#ctor(Smartsheet.Api.Models.Error)">
            <summary>
            Constructor.
            </summary>
            <param name="error"> the Error object from Smartsheet REST API </param>
        </member>
        <member name="T:Smartsheet.Api.RowAttachmentResources">
            <summary>
            <para>This interface provides methods to access Attachment resources associated to a row resource.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.RowAttachmentResources.ListAttachments(System.Int64,System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Attachments that are on the Row, including Row and Discussion level Attachments.</para>
            <para>It mirrors to the following Smartsheet REST API method: <br />
            GET /sheets/{sheetId}/rows/{rowId}/attachments</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="rowId"> the row Id </param>
            <param name="paging"> the paging </param>
            <returns> list of all Attachments that are in the Discussion. </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.RowAttachmentResources.AttachFile(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            <para>Attaches a file to the Row.</para>
            <para>This operation will always create a new attachment.
            To upload a new version of the same attachment, use the Attach New Version operation.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST /sheets/{sheetId}/rows/{rowId}/attachments</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="rowId"> the row Id </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type, can be null </param>
            <returns> the newly created Attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.RowAttachmentResources.AttachUrl(System.Int64,System.Int64,Smartsheet.Api.Models.Attachment)">
            <summary>
            <para>Attaches a URL to the Row.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST /sheets/{sheetId}/rows/{rowId}/attachments</para>
            <remarks><para>attachmentSubType is valid only for GOOGLE_DRIVE attachments which are Google Docs.
            It can optionally be included to indicate the type of a file.
            The following attachmentSubTypes are valid for GOOGLE_DRIVE attachments "DOCUMENT", "SPREADSHEET", "PRESENTATION", "PDF", "DRAWING".</para>
            <para>When the attachment type is BOX_COM, DROPBOX, or GOOGLE_DRIVE (without an attachmentSubType specified),
            the mimeType will be derived by the file extension specified on the “name”.</para>
            </remarks>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="rowId"> the row Id </param>
            <param name="attachment"> the attachment object </param>
            <returns> the newly created Attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.RowColumnResources">
            <summary>
            This interface provides methods to access cell resources that are associated to a row and column.
            
            Thread Safety: Implementation of this interface must be thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.RowColumnResources.GetCellHistory(System.Int64,System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.CellInclusion},Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets the cell modification history.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/history</para>
            <remarks><para>This operation supports pagination of results. For more information, see Paging.</para>
            <para>This is a resource-intensive operation and incurs 10 additional requests against the rate limit.</para></remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rowId"> the row Id </param>
            <param name="columnId"> the column Id</param>
            <param name="include"> the elements to include in the response </param>
            <param name="paging"> the pagination </param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.RowColumnResources.GetCellHistory(System.Int64,System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.CellInclusion},Smartsheet.Api.Models.PaginationParameters,System.Nullable{System.Int32})">
            <summary>
            <para>Gets the cell modification history.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/history</para>
            <remarks><para>This operation supports pagination of results. For more information, see Paging.</para>
            <para>This is a resource-intensive operation and incurs 10 additional requests against the rate limit.</para></remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rowId"> the row Id </param>
            <param name="columnId"> the column Id</param>
            <param name="include"> the elements to include in the response </param>
            <param name="paging"> the pagination </param>
            <param name="level"> compatibility level </param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.RowColumnResources.AddImageToCell(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            <para>Uploads an image to the specified cell within a sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/cellimages</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rowId"> the row Id </param>
            <param name="columnId"> the column Id</param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type </param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.RowColumnResources.AddImageToCell(System.Int64,System.Int64,System.Int64,System.String,System.String,System.Boolean,System.String)">
            <summary>
            <para>Uploads an image to the specified cell within a sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/cellimages</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rowId"> the row Id </param>
            <param name="columnId"> the column Id</param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type </param>
            <param name="overrideValidation"> override column type validation </param>
            <param name="altText"> image alternate text </param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.RowDiscussionResources">
            <summary>
            <para>This interface provides methods to access Discussion resources associated to a row resource.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.RowDiscussionResources.CreateDiscussion(System.Int64,System.Int64,Smartsheet.Api.Models.Discussion)">
            <summary>
            <para>Creates a new Discussion on a Row.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /sheets/{sheetId}/rows/{rowId}/discussions</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="rowId"> the id of the row </param>
            <param name="discussion"> the discussion to add </param>
            <returns> the created discussion </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.RowDiscussionResources.CreateDiscussionWithAttachment(System.Int64,System.Int64,Smartsheet.Api.Models.Discussion,System.String,System.String)">
            <summary>
            <para>Creates a new Discussion attached with an Attachment on a Row.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /sheets/{sheetId}/rows/{rowId}/discussions</para>
            </summary>
            <param name="sheetId"> the id of the sheet </param>
            <param name="rowId"> the id of the row </param>
            <param name="discussion"> the discussion to add </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type, can be null </param>
            <returns> the created discussion </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.RowDiscussionResources.ListDiscussions(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.DiscussionInclusion},Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Discussions associated with the specified Row.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/rows/{rowId}/discussions</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rowId"> the row Id </param>
            <param name="include">elements to include in response</param>
            <param name="paging">the pagination</param>
            <returns> list of all Discussions </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.SearchResources">
            <summary>
            This interface provides methods to access search resources.
            
            Thread Safety: Implementation of this interface must be thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SearchResources.Search(System.String)">
            <summary>
            <para>Searches all sheets that the user can access, for the specified text.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /search</para>
            </summary>
            <param name="query"> (required): Text with which to perform the search. </param>
            <returns> SearchResult object that contains a maximum of 100 SearchResultems </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SearchResources.Search(System.String,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SearchInclusion},System.Nullable{Smartsheet.Api.Models.SearchLocation},System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SearchScope})">
            <summary>
            <para>Searches all sheets that the user can access, for the specified text.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /search</para>
            </summary>
            <param name="query"> (required): Text with which to perform the search. </param>
            <param name="includes">includes enum set of inclusions</param>
            <param name="location">location when specified with a value of "personalWorkspace limits response to only those
            items in the user's workspace</param>
            <param name="modifiedSince">only return items modified since this date</param>
            <param name="scopes">scopes enum set of search filters</param>
            <returns> SearchResult object that contains a maximum of 100 SearchResultems </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SearchResources.SearchSheet(System.Int64,System.String)">
            <summary>
            <para>Searches a sheet for the specified text.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /search/sheets/{sheetId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="query"> the query text </param>
            <returns> SearchResult object that contains a maximum of 100 SearchResultems </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.ServerInfoResources">
            <summary>
            <para>This interface provides methods to access Sheet resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.ServerInfoResources.GetServerInfo">
            <summary>
            Gets application constants.
            </summary>
            <returns>ServerInfo oject</returns>
        </member>
        <member name="T:Smartsheet.Api.ServiceUnavailableException">
            <summary>
            <para>This is the exception to indicate a service unavailable error (possibly due to rate limiting) returned from the
            Smartsheet REST API.</para>
            
            <para>Basically this exception will be thrown when the Smartsheet REST API responds with "503 SERVICE UNAVAILABLE".</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.ServiceUnavailableException.#ctor(Smartsheet.Api.Models.Error)">
            <summary>
            Constructor.
            </summary>
            <param name="error"> the Error object from Smartsheet REST API </param>
        </member>
        <member name="T:Smartsheet.Api.ShareResources">
            <summary>
            <para>This interface provides methods to access Share resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.ShareResources.ListShares(System.Int64,Smartsheet.Api.Models.PaginationParameters,Smartsheet.Api.Models.ShareScope)">
            <summary>
            <para>List shares of a given object.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            GET /workspaces/{workspaceId}/shares <br />
            GET /sheets/{sheetId}/shares <br />
            GET /reports/{reportId}/shares</para>
            </summary>
            <param name="objectId"> the object Id </param>
            <param name="paging"> the pagination request </param>
            <param name="shareScope"> when specified with a value of <see cref="F:Smartsheet.Api.Models.ShareScope.Workspace"/>, the response will contain both item-level shares (scope=‘ITEM’) and workspace-level shares (scope='WORKSPACE’). </param>
            <returns> the list of Share objects (note that an empty list will be returned if there is none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.ShareResources.GetShare(System.Int64,System.String)">
            <summary>
            <para>Get a Share.</para>
            
            <para>It mirrors to the following Smartsheet REST API method:<br />
            GET /workspaces/{workspaceId}/shares/{shareId}<br />
            GET /sheets/{sheetId}/shares/{shareId}<br />
            GET /reports/{reportId}/shares/{shareId}</para>
            </summary>
            <param name="objectId"> the ID of the object to share </param>
            <param name="shareId"> the ID of the share instance </param>
            <returns> the share (note that if there is no such resource, this method will throw ResourceNotFoundException
            rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.ShareResources.ShareTo(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Share},System.Nullable{System.Boolean})">
            <summary>
            <para>Shares a Sheet with the specified Users and Groups.</para>
            
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /workspaces/{workspaceId}/shares<br />
            POST /sheets/{sheetId}/shares<br />
            POST /reports/{reportId}/shares</para>
            </summary>
            <param name="objectId"> the Id of the object, (report, sheet, or workspace) </param>
            <param name="shares"> the share objects </param>
            <param name="sendEmail">(optional): Either true or false to indicate whether or not
            to notify the user by email. Default is false.</param>
            <returns> the created share </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.ShareResources.UpdateShare(System.Int64,Smartsheet.Api.Models.Share)">
            <summary>
            <para>Updates the access level of a User or Group for the specified Object.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            PUT /workspaces/{workspaceId}/shares/{shareId}<br />
            PUT /sheets/{sheetId}/shares/{shareId}<br />
            PUT /reports/{reportId}/shares/{shareId}</para>
            </summary>
            <param name="objectId"> the ID of the object to share, (report, sheet, or workspace)  </param>
            <param name="share"> the share </param>
            <returns> the updated share (note that if there is no such resource, this method will throw
             ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.ShareResources.DeleteShare(System.Int64,System.String)">
            <summary>
            <para>Delete a share.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            DELETE /workspaces/{workspaceId}/shares/{shareId}<br />
            DELETE /sheets/{sheetId}/shares/{shareId}<br />
            DELETE /reports/{reportId}/shares/{shareId}</para>
            </summary>
            <param name="objectId"> the ID of the object to share, (report, sheet, or workspace)  </param>
            <param name="shareId"> the ID of the user to whom the object is shared </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.SheetAttachmentResources">
            <summary>
            <para>This interface provides methods to access Attachment resources that are associated to a sheet object.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SheetAttachmentResources.AttachFile(System.Int64,System.String,System.String)">
            <summary>
            <para>Attaches a file to the Sheet.</para>
            <para>This operation will always create a new attachment.
            To upload a new version of the same attachment, use the Attach New Version operation.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST /sheets/{sheetId}/attachments</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type </param>
            <returns> the newly created Attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetAttachmentResources.AttachUrl(System.Int64,Smartsheet.Api.Models.Attachment)">
            <summary>
            <para>Attaches a URL to the Sheet.</para>
            <para>It mirrors to the following Smartsheet REST API method:
            POST /sheets/{sheetId}/attachments</para>
            <remarks><para>attachmentSubType is valid only for GOOGLE_DRIVE attachments which are Google Docs.
            It can optionally be included to indicate the type of a file.
            The following attachmentSubTypes are valid for GOOGLE_DRIVE attachments "DOCUMENT", "SPREADSHEET", "PRESENTATION", "PDF", "DRAWING".</para>
            <para>When the attachment type is BOX_COM, DROPBOX, or GOOGLE_DRIVE (without an attachmentSubType specified),
            the mimeType will be derived by the file extension specified on the “name”.</para>
            </remarks>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="attachment"> the attachment object </param>
            <returns> the newly created Attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetAttachmentResources.DeleteAttachment(System.Int64,System.Int64)">
            <summary>
            <para>Deletes the Attachment.</para>
            <remarks>If the Attachment has multiple versions this deletes only
            the specific version specified by the attachmentId (each version has a different attachment ID).</remarks>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/attachments/{attachmentId}</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="attachmentId"> the attachmentId </param>
            <returns> the newly created Attachment </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetAttachmentResources.GetAttachment(System.Int64,System.Int64)">
            <summary>
            <para>Fetches the Attachment.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/attachments/{attachmentId}</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="attachmentId"> the attachmentId </param>
            <returns> the Attachment object. For File attachments, this will include a temporary URL for downloading the file.
            Currently, the temporary URL is set to expire in 120000 milliseconds, or 2 minutes.</returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetAttachmentResources.ListAttachments(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Attachments that are on the Sheet, including Sheet, Row, and Discussion level Attachments.</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="paging"> the pagination </param>
            <returns> list of Attachment objects </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.SheetAttachmentResources.VersioningResources">
            <summary>
            Return the AttachmentVersioningResources object that provides access to Versioning resources associated with Attachment resources.
            </summary>
            <returns> the attachment versioning resources </returns>
        </member>
        <member name="T:Smartsheet.Api.SheetColumnResources">
            <summary>
            <para>This interface provides methods to access column resources that are associated to a sheet object.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SheetColumnResources.ListColumns(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.ColumnInclusion},Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all Columns belonging to the Sheet specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/columns</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="include">elements to include in response</param>
            <param name="paging">the paging</param>
            <returns> the list of Columns (note that an empty list will be returned if there is none) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetColumnResources.AddColumns(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Column})">
            <summary>
            <para>Inserts one or more columns into the Sheet specified in the URL.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/Columns</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="columns"> the column object(s) </param>
            <returns> the created column </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetColumnResources.DeleteColumn(System.Int64,System.Int64)">
            <summary>
            <para>Deletes the Column specified in the URL.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/columns/{columnId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="columnId"> the column object </param>
            <returns> the created column </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetColumnResources.GetColumn(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.ColumnInclusion})">
            <summary>
            <para>Gets the Column specified in the URL.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/columns/{columnId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="columnId"> the columnId </param>
            <param name="include"> elements to include in response </param>
            <returns> the created column </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetColumnResources.UpdateColumn(System.Int64,Smartsheet.Api.Models.Column)">
            <summary>
            <para>Updates properties of the column, moves the column, and/or renames the column.</para>
            <para>You cannot change the type of a Primary column.</para>
            <para>While dependencies are enabled on a sheet, you can’t change the type of any special calendar/Gantt columns.</para>        
            <para>If the column type is changed, all cells in the column will be converted to the new column type.</para>
            <para>Type is optional when moving or renaming, but required when changing type or dropdown values.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/columns/{columnId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="column"> column object to update </param>
            <returns> the updated column </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.SheetCommentResources">
            <summary>
            <para>This interface provides methods to access Comment resources that are associated to a sheet object.</para>
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SheetCommentResources.DeleteComment(System.Int64,System.Int64)">
            <summary>
            <para>Deletes the Comment specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/comments/{commentId}</para>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="commentId">the commentId</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetCommentResources.GetComment(System.Int64,System.Int64)">
            <summary>
            <para>Gets the Comment specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/comments/{commentId}</para>
            </summary>
            <param name="sheetId">the id of the sheet</param>
            <param name="commentId">the id the of the comment</param>
            <returns> the comment object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.SheetCommentResources.AttachmentResources">
            <summary>
            Return the CommentAttachmentResources object that provides access to Attachment resources associated with Comment resources.
            </summary>
            <returns> the Attachment resources </returns>
        </member>
        <member name="T:Smartsheet.Api.SheetDiscussionResources">
            <summary>
            <para>This interface provides methods to access discussion resources that are associated to a Sheet object.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SheetDiscussionResources.CreateDiscussion(System.Int64,Smartsheet.Api.Models.Discussion)">
            <summary>
            <para>Creates a new discussion on a sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/discussions</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="discussion"> the discussion to add </param>
            <returns> the created discussion </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetDiscussionResources.CreateDiscussionWithAttachment(System.Int64,Smartsheet.Api.Models.Discussion,System.String,System.String)">
            <summary>
            <para>Creates a new discussion with an attachment on a sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/discussions</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="discussion"> the discussion to add </param>
            <param name="file"> the file path </param>
            <param name="fileType"> the file type, can be null </param>
            <returns> the created discussion </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetDiscussionResources.DeleteDiscussion(System.Int64,System.Int64)">
            <summary>
            <para>Deletes a discussion</para>
            <para>Mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/discussions/{discussionId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="discussionId"> the discussion Id</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetDiscussionResources.ListDiscussions(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.DiscussionInclusion},Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets a list of all discussions associated with the specified sheet (both sheet-level discussions and row-level discussions).</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/discussions</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="include">elements to include in the response</param>
            <param name="paging">the pagination</param>
            <returns> list of all discussions </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetDiscussionResources.GetDiscussion(System.Int64,System.Int64)">
            <summary>
            <para>Gets the discussion specified in the URL.</para>
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/discussions/{discussionId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="discussionId"> the ID of the discussion </param>
            <returns> the discussion </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.SheetDiscussionResources.AttachmentResources">
            <summary>
            <para>Return the DiscussionAttachmentResources object that provides access
            to attachment resources associated with discussion resources.</para>
            </summary>
            <returns> the DiscussionAttachmentResources object </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetDiscussionResources.CommentResources">
            <summary>
            <para>Returns the DiscussionCommentResources object that provides access
            to comment resources associated with discussion resources.</para>
            </summary>
            <returns> the DiscussionCommentResources object </returns>
        </member>
        <member name="T:Smartsheet.Api.SheetResources">
            <summary>
            <para>This interface provides methods to access sheet resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.ListSheets(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetInclusion},Smartsheet.Api.Models.PaginationParameters,System.Nullable{System.DateTime})">
            <summary>
            <para>Gets the list of all sheets that the user has access to, in alphabetical order, by name.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /Sheets</para>
            </summary>
            <param name="includes">elements to include in response</param>
            <param name="paging">the pagination</param>
            <param name="modifiedSince">only return sheets modified on or after the specified date</param>
            <returns> A list of all sheets (note that an empty list will be returned if there are none) limited to the following attributes:
            <list type="bullet">
            <item><description>id</description></item>
            <item><description>name</description></item>
            <item><description>accessLevel</description></item>
            <item><description>permalink</description></item>
            <item><description>source (included only if "source" is specified with the include parameter)</description></item>
            <item><description>owner (included only if "ownerInfo" is specified with the include parameter)</description></item>
            <item><description>ownerId (included only if "ownerInfo" is specified with the include parameter)</description></item>
            <item><description>createdAt</description></item>
            <item><description>modifiedAt</description></item>
            </list>
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.ListOrganizationSheets(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Lists all sheets in the organization.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /users/sheets</para>
            </summary>
            <param name="paging">the pagination</param>
            <returns> the list of all sheets (note that an empty list will be returned if there are none) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.GetSheet(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelExclusion},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            <para>Gets a sheet.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="includes"> used to specify the optional objects to include. </param>
            <param name="excludes"> used to specify the optional objects to include. </param>
            <param name="rowIds"> used to specify the optional objects to include. </param>
            <param name="rowNumbers"> used to specify the optional objects to include. </param>
            <param name="columnIds"> used to specify the optional objects to include. </param>
            <param name="pageSize"> used to specify the optional objects to include. </param>
            <param name="page"> used to specify the optional objects to include. </param>
            <returns> the sheet resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.GetSheet(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelExclusion},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            <para>Gets a sheet.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="includes"> used to specify the optional objects to include. </param>
            <param name="excludes"> used to specify the optional objects to include. </param>
            <param name="rowIds"> used to specify the optional objects to include. </param>
            <param name="rowNumbers"> used to specify the optional objects to include. </param>
            <param name="columnIds"> used to specify the optional objects to include. </param>
            <param name="pageSize"> used to specify the optional objects to include. </param>
            <param name="page"> used to specify the optional objects to include. </param>
            <param name="ifVersionAfter"> only fetch sheet if more recent version available </param>
            <returns> the sheet resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.GetSheet(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetLevelExclusion},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            <para>Gets a sheet.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="includes"> used to specify the optional objects to include. </param>
            <param name="excludes"> used to specify the optional objects to include. </param>
            <param name="rowIds"> used to specify the optional objects to include. </param>
            <param name="rowNumbers"> used to specify the optional objects to include. </param>
            <param name="columnIds"> used to specify the optional objects to include. </param>
            <param name="pageSize"> used to specify the optional objects to include. </param>
            <param name="page"> used to specify the optional objects to include. </param>
            <param name="ifVersionAfter"> only fetch sheet if more recent version available </param>
            <param name="level"> compatibility level </param>
            <returns> the sheet resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.GetSheetAsExcel(System.Int64,System.IO.BinaryWriter)">
            <summary>
            <para>Gets a sheet as an Excel file.</para>
            
            <para>Mirrors to the following Smartsheet REST API method:<br />
            GET /sheets/{sheetId} with "application/vnd.ms-excel" Accept HTTP header</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="outputStream"> the output stream to which the Excel file will be written. </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.GetSheetAsPDF(System.Int64,System.IO.BinaryWriter,System.Nullable{Smartsheet.Api.Models.PaperSize})">
            <summary>
            <para>Gets a sheet as a PDF file.</para>
            
            <para>Mirrors to the following Smartsheet REST API method:<br />
            GET /sheets/{sheetId} with "application/pdf" Accept HTTP header</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="outputStream"> the output stream to which the PDF file will be written. </param>
            <param name="paperSize"> the paper size </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.GetSheetAsCSV(System.Int64,System.IO.BinaryWriter)">
            <summary>
            <para>Gets a sheet as a CSV file.</para>
            
            <para>Mirrors to the following Smartsheet REST API method:<br />
            GET /sheets/{sheetId} with "text/csv" Accept HTTP header</para>
            </summary>
            <param name="sheetId"> the Id of the sheet </param>
            <param name="outputStream"> the output stream to which the CSV file will be written. </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.CreateSheet(Smartsheet.Api.Models.Sheet)">
            <summary>
            <para>Creates a sheet in default "Sheets" collection.</para>
            
            <para>Mirrors to the following Smartsheet REST API method:<br />
             POST /Sheets</para>
            </summary>
            <param name="sheet"> the sheet to create </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.CreateSheetFromTemplate(Smartsheet.Api.Models.Sheet,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.TemplateInclusion})">
            <summary>
            <para>Creates a sheet (from existing sheet or template) in default "Sheets" collection.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /Sheets</para>
            </summary>
            <param name="sheet"> the sheet to create </param>
            <param name="include"> used to specify the optional objects to include. </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.DeleteSheet(System.Int64)">
            <summary>
            <para>Deletes a sheet.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.UpdateSheet(Smartsheet.Api.Models.Sheet)">
            <summary>
            <para>Updates a sheet.</para>
            <para>To modify sheet contents, see Add Rows, Update Rows, and Update Column.</para>
            <para>This operation can be used to update an individual users sheet settings. 
            If the request body contains only the userSettings attribute, 
            this operation may be performed even if the user only has read-only access to the sheet 
            (i.e., the user has viewer permissions, or the sheet is read-only).</para>
            <para>Mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}</para>
            </summary>
            <param name="sheet"> the sheet to update </param>
            <returns> the updated sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.GetSheetVersion(System.Int64)">
            <summary>
            <para>Gets the sheet version without loading the entire sheet.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/version</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <returns> the sheet version (note that if there is no such resource, this method will throw
            ResourceNotFoundException) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.SendSheet(System.Int64,Smartsheet.Api.Models.SheetEmail)">
            <summary>
            <para>Sends a sheet as a PDF attachment via email to the designated recipients.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/emails</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="email"> the email </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.SendUpdateRequest(System.Int64,Smartsheet.Api.Models.MultiRowEmail)">
            <summary>
            <para>Creates an update request for the specified rows within the sheet. An email notification
            (containing a link to the update request) will be asynchronously sent to the specified recipients.</para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/updaterequests</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="email"> the email </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.GetPublishStatus(System.Int64)">
            <summary>
            <para>Gets the status of the publish settings of the sheet, including the URLs of any enabled publishings.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/publish</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <returns> the publish status (note that if there is no such resource, this method will throw ResourceNotFoundException rather than returning null) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.UpdatePublishStatus(System.Int64,Smartsheet.Api.Models.SheetPublish)">
            <summary>
            <para>Sets the publish status of a sheet and returns the new status, including the URLs of any enabled publishings.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/publish</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="publish"> the SheetPublish object limited. </param>
            <returns> the update SheetPublish object (note that if there is no such resource, this method will throw a 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.CopySheet(System.Int64,Smartsheet.Api.Models.ContainerDestination,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.SheetCopyInclusion})">
            <summary>
            <para>Creates a copy of the specified sheet.</para>
            <para>Mirrors to the following Smartsheet REST API method:<br />
            POST /sheets/{sheetId}/copy</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="destination"> the destination to copy to </param>
            <param name="include"> the elements to copy. Note: Cell history will not be copied, regardless of which include parameter values are specified.</param>
            <returns> the created folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.MoveSheet(System.Int64,Smartsheet.Api.Models.ContainerDestination)">
            <summary>
            <para>Moves the specified sheet to a new location.</para>
            <para>Mirrors to the following Smartsheet REST API method:<br />
            POST /sheets/{sheetId}/move</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="destination"> the destination to copy to </param>
            <returns> the moved sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.SortSheet(System.Int64,Smartsheet.Api.Models.SortSpecifier)">
            <summary>
            <para>Sorts a sheet according to the sort criteria.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/sort</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="sortSpecifier"> the sort criteria </param>
            <returns> the Sheet (note that if there is no such resource, this method will throw a ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.SortSheet(System.Int64,Smartsheet.Api.Models.SortSpecifier,System.Nullable{System.Int32})">
            <summary>
            <para>Sorts a sheet according to the sort criteria.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/sort</para>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="sortSpecifier"> the sort criteria </param>
            <param name="level"> compatibility level </param>
            <returns> the Sheet (note that if there is no such resource, this method will throw a ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.ImportCsvSheet(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet (from CSV). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/import</para>
            </summary>
            <param name="file"> path to the CSV file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetResources.ImportXlsSheet(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet (from XLSX). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /sheets/import</para>
            </summary>
            <param name="file"> path to the XLSX file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.SheetResources.ShareResources">
            <summary>
            <para>Returns the ShareResources object that provides access to share resources associated with sheet resources.</para>
            </summary>
            <returns> the ShareResources object </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetResources.RowResources">
            <summary>
            <para>Returns the SheetRowResources object that provides access to row resources associated with sheet resources.</para>
            </summary>
            <returns> the SheetRowResources object </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetResources.ColumnResources">
            <summary>
            <para>Returns the SheetColumnResources object that provides access to column resources associated with sheet resources.</para>
            </summary>
            <returns> the SheetColumnResources object </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetResources.AttachmentResources">
            <summary>
            <para>Returns the SheetAttachmentResources object that provides access to attachment resources associated with
            sheet resources.</para>
            </summary>
            <returns> the SheetAttachmentResources object </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetResources.DiscussionResources">
            <summary>
            <para>Returns the SheetDiscussionResources object that provides access to discussion resources associated with
            sheet resources.</para>
            </summary>
            <returns> the SheetDiscussionResources object </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetResources.CommentResources">
            <summary>
            <para>Returns the SheetCommentResources object that provides access to comment resources associated with
            sheet resources.</para>
            </summary>
            <returns> the SheetCommentResources object </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetResources.UpdateRequestResources">
            <summary>
            <para>Returns the SheetUpdateRequestResources object that provides access to update request resources associated with
            sheet resources.</para>
            </summary>
            <returns> the SheetUpdateRequestResources object </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetResources.FilterResources">
            <summary>
            <para>Returns the FilterResources object that provides access to filter resources associated with sheet resources.</para>
            </summary>
            <returns> the FilterResources object </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetResources.AutomationRuleResources">
            <summary>
            <para>Returns the AutomationRuleResources object that provides access to automation rules resources associated with 
            sheet resources.</para>
            </summary>
            <returns> the AutomationRuleResources object </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetResources.CrossSheetReferenceResources">
            <summary>
            Returns the CrossSheetReferenceResources object that provides access to cross-sheet reference resources associated 
            with sheet resources.
            </summary>
            <returns> the CrossSheetReferenceResources object </returns>
        </member>
        <member name="T:Smartsheet.Api.SheetRowResources">
            <summary>
            This interface provides methods to access row resources that are associated to a sheet object.
            
            Thread Safety: Implementation of this interface must be thread safe.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SheetRowResources.AddRows(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Row})">
            <summary>
            <para>Inserts one or more rows into the Sheet specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows</para>
            <remarks>If multiple rows are specified in the request, all rows must be inserted at the same location 
            (i.e. the toTop, toBottom, parentId, siblingId, and above attributes must be the same for all rows in the request).</remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rows"> one or more rows </param>
            <returns> the list of created Rows </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetRowResources.AddRowsAllowPartialSuccess(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Row})">
            <summary>
            <para>Inserts one or more rows into the Sheet specified in the URL with allowPartialSuccess.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows?allowPartialSuccess=true</para>
            <remarks>If multiple rows are specified in the request, all rows must be inserted at the same location 
            (i.e. the toTop, toBottom, parentId, siblingId, and above attributes must be the same for all rows in the request).</remarks>
            </summary>
            <param name="sheetId"> the sheet Id </param>
            <param name="rows"> one or more rows </param>
            <returns> the list of created Rows </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetRowResources.GetRow(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.RowInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.RowExclusion})">
            <summary>
            <para>Gets the Row specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /sheets/{sheetId}/rows/{rowId}</para>
            </summary>
            <param name="include"> comma-separated list of elements to include in the response. </param>
            <param name="exclude"> a comma-separated list of optional objects to exclude in the response. </param>
            <param name="sheetId"> the sheetId </param>
            <param name="rowId"> the rowId </param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetRowResources.CopyRowsToAnotherSheet(System.Int64,Smartsheet.Api.Models.CopyOrMoveRowDirective,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.CopyRowInclusion},System.Nullable{System.Boolean})">
            <summary>
            <para>Copies Row(s) from the Sheet specified in the URL to (the bottom of) another sheet.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows/copy</para>
            <remarks>Up to 5,000 row IDs can be specified in the request, 
            but if the total number of rows in the destination sheet after the copy exceeds the Smartsheet row limit, 
            an error response will be returned.</remarks>
            </summary>
            <param name="sheetId"> the sheet Id to copy from </param>
            <param name="include"> objects to include </param>
            <param name="ignoreRowsNotFound"> default is false. If set to true, specifying row Ids that do not exist within the source sheet will not cause an error response.
            If omitted or set to false, specifying row Ids that do not exist within the source sheet will cause an error response (and no rows will be copied). </param>
            <param name="directive"> directive </param>
            <returns> CopyOrMoveRowResult object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetRowResources.DeleteRows(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            <para>Deletes the Row specified in the URL.</para>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /sheets/{sheetId}/rows/{rowId}</para>
            <remarks>This operation will delete ALL child Rows of the specified Row.</remarks>
            </summary>
            <param name="sheetId"> the sheetId </param>
            <param name="ids"> the row IDs </param>
            <param name="ignoreRowsNotFound">If set to true, specifying row Ids that do not exist within the source sheet will not cause an error response.
            If omitted or set to false, specifying row Ids that do not exist within the source sheet will cause an error response (and no rows will be copied).</param>
            <returns>Row IDs corresponding to all rows that were successfully deleted (including any child rows of rows specified in the URL).</returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetRowResources.MoveRowsToAnotherSheet(System.Int64,Smartsheet.Api.Models.CopyOrMoveRowDirective,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.MoveRowInclusion},System.Nullable{System.Boolean})">
            <summary>
            <para>Moves Row(s) from the Sheet specified in the URL to (the bottom of) another sheet.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows/copy</para>
            <remarks><para>Up to 5,000 row IDs can be specified in the request, 
            but if the total number of rows in the destination sheet after the copy exceeds the Smartsheet row limit, 
            an error response will be returned.</para>
            <para>Any child rows of the rows specified in the request will also be moved. 
            Parent-child relationships amongst rows will be preserved within the destination sheet.</para></remarks>
            </summary>
            <param name="sheetId"> the sheet Id to move from </param>
            <param name="ignoreRowsNotFound"> default is false. If set to true, specifying row Ids that do not exist within the source sheet will not cause an error response.
            If omitted or set to false, specifying row Ids that do not exist within the source sheet will cause an error response (and no rows will be copied). </param>
            <param name="directive"> directive </param>
            <param name="include">the elements to include</param>
            <returns> CopyOrMoveRowResult object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetRowResources.SendRows(System.Int64,Smartsheet.Api.Models.MultiRowEmail)">
            <summary>
            <para>Sends one or more Rows via email.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/rows/emails</para>
            </summary>
            <param name="sheetId"> The sheet Id </param>
            <param name="email"> The email. The columns included for each row in the email will be populated according to the following rules:
            <list type="bullet">
            <item><description>
            If the columnIds attribute of the MultiRowEmail object is specified as an array of column IDs, those specific columns will be included.
            </description></item>
            <item><description>
            If the columnIds attribute of the MultiRowEmail object is omitted, all columns except hidden columns shall be included.
            </description></item>
            <item><description>
            If the columnIds attribute of the MultiRowEmail object is specified as empty, no columns shall be included.
            (Note: In this case, either includeAttachments:true or includeDiscussions:true must be specified.)
            </description></item>
            </list>
            </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetRowResources.UpdateRows(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Row})">
            <summary>
            <para>Updates cell values in the specified row(s), expands/collapses the specified row(s), 
            and/or modifies the position of specified rows (including indenting/outdenting).</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/rows</para>
            <remarks>If a row’s position is updated, all child rows are moved with the row.</remarks>
            </summary>
            <param name="sheetId">the sheetId</param>
            <param name="rows">the list of rows to update</param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.SheetRowResources.UpdateRowsAllowPartialSuccess(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.Row})">
            <summary>
            <para>Updates cell values in the specified row(s), expands/collapses the specified row(s), 
            and/or modifies the position of specified rows (including indenting/outdenting).</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /sheets/{sheetId}/rows?allowPartialSuccess=true</para>
            <remarks>If a row’s position is updated, all child rows are moved with the row.</remarks>
            </summary>
            <param name="sheetId">the sheetId</param>
            <param name="rows">the list of rows to update</param>
            <returns> the row object </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.SheetRowResources.AttachmentResources">
            <summary>
            Returns the RowAttachmentResources object that provides access to attachment resources associated with Row Resources.
            </summary>
            <returns> the RowAttachmentResources </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetRowResources.DiscussionResources">
            <summary>
            Returns the RowDiscussionResources object that provides access to discussion resources associated with Row Resources.
            </summary>
            <returns> the RowDiscussionResources </returns>
        </member>
        <member name="P:Smartsheet.Api.SheetRowResources.CellResources">
            <summary>
            Returns the RowColumnResources object that provides access to column resources associated with Row Resources (Cell Resources).
            </summary>
            <returns> the RowColumnResources </returns>
        </member>
        <member name="T:Smartsheet.Api.SmartsheetClient">
            <summary>
            <p>This interface is the entry point of the Smartsheet SDK, it provides convenient methods to get XXXResources instances
            for accessing different types of resources.</p>
            
            <p>Thread Safety: Implementation of this interface must be thread safe.</p>
            </summary>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.AccessToken">
            <summary>
            Set the access token to use.
            </summary>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.AssumedUser">
            <summary>
            Set the email of the user to assume
            </summary>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.ChangeAgent">
            <summary>
            Set the change agent identifier
            </summary>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.UserAgent">
            <summary>
            Set the user agent header string
            </summary>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.MaxRetryTimeout">
            <summary>
            Sets the max retyr time if the HtppClient is an instance of DefaultHttpClient
            </summary>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.HomeResources">
            <summary>
            <para>Returns the HomeResources instance that provides access to Home resources.</para>
            </summary>
            <returns> the home resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.WorkspaceResources">
            <summary>
            <para>Returns the WorkspaceResources instance that provides access to Workspace resources.</para>
            </summary>
            <returns> the workspace resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.FolderResources">
            <summary>
            <para>Returns the FolderResources instance that provides access to Folder resources.</para>
            </summary>
            <returns> the folder resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.TemplateResources">
            <summary>
            <para>Returns the TemplateResources instance that provides access to Template resources.</para>
            </summary>
            <returns> the template resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.ReportResources">
            <summary>
            <para>Returns the ReportResources instance that provides access to Report resources.</para>
            </summary>
            <returns> the report resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.SheetResources">
            <summary>
            <para>Returns the SheetResources instance that provides access to Sheet resources.</para>
            </summary>
            <returns> the sheet resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.SightResources">
            <summary>
            <para>Returns the SightResources instance that provides access to Sight resources.</para>
            </summary>
            <returns> the sight resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.UserResources">
            <summary>
            <para>Returns the UserResources instance that provides access to User resources.</para>
            </summary>
            <returns> the user resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.SearchResources">
            <summary>
            <para>Returns the SearchResources instance that provides access to searching resources.</para>
            </summary>
            <returns> the search resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.ServerInfoResources">
            <summary>
            <para>Returns the ServerInfoResources instance that provides access to server information resources.</para>
            </summary>
            <returns> the server info resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.WebhookResources">
            <summary>
            <para>Returns the WebhookResources instance that provides access to webhook resources.</para>
            </summary>
            <returns> the webhook resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.GroupResources">
            <summary>
            <para>Returns the GroupResources instance that provides access to group resources.</para>
            </summary>
            <returns> the group resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.FavoriteResources">
            <summary>
            <para>Returns the FavoriteResources instance that provides access to favorite resources.</para>
            </summary>
            <returns> the favorite resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.TokenResources">
            <summary>
            <para>Returns the TokenResources instance that provides access to token resources.</para>
            </summary>
            <returns> the token resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.ContactResources">
            <summary>
            <para>Returns the ContactResources instance that provides access to contact resources.</para>
            </summary>
            <returns> the contact resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.ImageUrlResources">
            <summary>
            <para>Returns the ImageUrlResources instance that provides access to image Url resources.</para>
            </summary>
            <returns> the image Url resources instance </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetClient.PassthroughResources">
            <summary>
            <para>Returns the PassthroughResources instance that provides access to passthrough resources.</para>
            </summary>
            <returns> the passthrough resources instance </returns>
        </member>
        <member name="T:Smartsheet.Api.SmartsheetBuilder">
            <summary>
            <para>A convenience class to help create a <seealso cref="T:Smartsheet.Api.SmartsheetClient"/> instance with the appropriate fields.</para>
            
            <para>Thread Safety: This class is not thread safe since it's mutable, one builder instance is NOT expected to be used in
            multiple threads.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetBuilder.httpClient">
            <summary>
            <para>Represents the HttpClient.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetBuilder.jsonSerializer">
            <summary>
            <para>Represents the JsonSerializer.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetBuilder.baseURI">
            <summary>
            <para>Represents the base URI.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetBuilder.accessToken">
            <summary>
            <para>Represents the access token.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetBuilder.maxRetryTimeout">
            <summary>
            <para>Represents the max retry timeout period.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetBuilder.assumedUser">
            <summary>
            <para>Represents the assumed user.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetBuilder.changeAgent">
            <summary>
            <para>Represents the Smartsheet change agent.</para>
            
            <para>It can be set using corresponding setter.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetBuilder.DEFAULT_BASE_URI">
            <summary>
            <para>Represents the default base URI of the Smartsheet REST API.</para>
            
            <para>It is a constant with Value "https://api.smartsheet.com/2.0".</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetBuilder.GOV_BASE_URI">
            <summary>
            <para>Represents the base URI of the Smartsheetgov REST API.</para>
            
            <para>It is a constant with Value "https://api.smartsheetgov.com/2.0".</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetBuilder.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetBuilder.SetHttpClient(Smartsheet.Api.Internal.Http.HttpClient)">
            <summary>
            <para>Set the HttpClient.</para>
            </summary>
            <param name="httpClient"> the http client </param>
            <returns> the SmartsheetClient builder </returns>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetBuilder.SetJsonSerializer(Smartsheet.Api.Internal.Json.JsonSerializer)">
            <summary>
            <para>Set the JsonSerializer.</para>
            </summary>
            <param name="jsonSerializer"> the JsonSerializer </param>
            <returns> the SmartsheetBuilder </returns>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetBuilder.SetBaseURI(System.String)">
            <summary>
            <para>Set the base URI.</para>
            </summary>
            <param name="baseURI"> the base uri </param>
            <returns> the SmartsheetClient builder </returns>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetBuilder.SetAccessToken(System.String)">
            <summary>
            <para>Set the access token.</para>
            </summary>
            <param name="accessToken"> the access token </param>
            <returns> the SmartsheetClient builder </returns>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetBuilder.SetAssumedUser(System.String)">
            <summary>
            <para>Set the assumed user.</para>
            </summary>
            <param name="assumedUser"> the assumed user </param>
            <returns> the SmartsheetClient builder </returns>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetBuilder.SetChangeAgent(System.String)">
            <summary>
            <para>Set the Smartsheet change agent.</para>
            </summary>
            <param name="changeAgent"> the change agent </param>
            <returns> the SmartsheetClient builder </returns>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetBuilder.SetMaxRetryTimeout(System.Int64)">
            <summary>
            Create a DefaultCalcBackoff with a max elapsed timeout specified by the user. This interface 
            is only valid when the DefaultHttpClient is used.
            </summary>
            <param name="maxRetryTimeout"></param>
            <returns></returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetBuilder.HttpClient">
            <summary>
            <para>Gets the http client.</para>
            </summary>
            <returns> the http client </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetBuilder.JsonSerializer">
            <summary>
            <para>Gets the Json serializer.</para>
            </summary>
            <returns> the Json serializer </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetBuilder.BaseURI">
            <summary>
            <para>Gets the base uri.</para>
            </summary>
            <returns> the base uri </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetBuilder.AccessToken">
            <summary>
            <para>Gets the access token.</para>
            </summary>
            <returns> the access token </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetBuilder.AssumedUser">
            <summary>
            <para>Gets the assumed user.</para>
            </summary>
            <returns> the assumed user </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetBuilder.DefaultBaseUri">
            <summary>
            <para>Gets the default base uri.</para>
            </summary>
            <returns> the default base uri </returns>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetBuilder.Build">
            <summary>
            <para>Build the SmartsheetClient instance.</para>
            </summary>
            <returns> the SmartsheetClient instance </returns>
        </member>
        <member name="T:Smartsheet.Api.SmartsheetException">
            <summary>
            <para>This is the base class for all exceptions thrown from the Smartsheet SDK.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetException.#ctor(System.String)">
            <summary>
            <para>Constructor.</para>
            </summary>
            <param name="message"> the Message </param>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Constructor.</para>
            </summary>
            <param name="message"> the Message </param>
            <param name="cause"> the cause </param>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetException.#ctor(System.Exception)">
            <summary>
            <para>Instantiates a new Smartsheet exception.</para>
            </summary>
            <param name="e"> the exception </param>
        </member>
        <member name="T:Smartsheet.Api.SmartsheetRestException">
            <summary>
            <para>This is the exception to indicate errors (Error objects of Smartsheet REST API) returned from Smartsheet REST API.</para>
            
            <para>Thread safety: Exceptions are not thread safe.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetRestException.errorCode">
            <summary>
            <para>Represents the error Code.</para>
            
            <para>It will be initialized in constructor and will not change afterwards.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetRestException.refId">
            <summary>
            <para>Represents the reference ID.</para>
            
            <para>It will be initialized in constructor and will not change afterwards.</para>
            </summary>
        </member>
        <member name="F:Smartsheet.Api.SmartsheetRestException.detail">
            <summary>
            <para>Represents any error detail provided by the API</para>
            
            <para>It will be initialized in constructor and will not change afterwards.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.SmartsheetRestException.#ctor(Smartsheet.Api.Models.Error)">
            <summary>
            <para>Constructor.</para>
            </summary>
            <param name="error"> the Error object from Smartsheet REST API </param>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetRestException.ErrorCode">
            <summary>
            <para>Returns the error Code.</para>
            </summary>
            <returns> the error Code </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetRestException.RefId">
            <summary>
            <para>Returns the refId.</para>
            </summary>
            <returns> the refId </returns>
        </member>
        <member name="P:Smartsheet.Api.SmartsheetRestException.Detail">
            <summary>
            <para>Returns the error detail</para>
            </summary>
            <returns> the error detail </returns>
        </member>
        <member name="T:Smartsheet.Api.TemplateResources">
            <summary>
            <para>This interface provides methods to access Template resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.TemplateResources.ListPublicTemplates(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets the list of public Templates to which the user has access.</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            <para>It mirrors to the following Smartsheet REST API method: GET /templates/public</para>
            </summary>
            <returns> the list of Templates (note that an empty list will be returned if there are none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.TemplateResources.ListUserCreatedTemplates(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets the list of user-created Templates to which the user has access.</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            <para>It mirrors to the following Smartsheet REST API method: GET /templates</para>
            </summary>
            <returns> the list of Templates (note that an empty list will be returned if there are none). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.UserResources">
            <summary>
            <para>This interface provides methods to access User resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.UserResources.ListUsers(System.Collections.Generic.IEnumerable{System.String},Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets the list of Users in the organization. To filter by email, use the optional email query string
            parameter to specify a list of users’ email addresses.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /Users</para>
            </summary>
            <param name="emails">list of email addresses on which to filter the results</param>
            <param name="paging"> the pagination</param>
            <returns> the list of all Users </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.AddUser(Smartsheet.Api.Models.User,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            <para>Add a user to the organization</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /Users</para>
            </summary>
            <param name="user"> the user </param>
            <param name="sendEmail"> flag indicating whether or not to send a welcome email. Defaults to false. </param>
            <param name="allowInviteAccountAdmin">if user is an admin in another organization, setting to true will invite their entire organization.</param>
            <returns> the created user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.GetCurrentUser">
            <summary>
            <para>Get the current user.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /users/me</para>
            </summary>
            <returns> the current user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.GetCurrentUser(System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.UserInclusion})">
            <summary>
            <para>Get the current user.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /users/me</para>
            </summary>
            <param name="includes">used to specify the optional objects to include.</param>
            <returns> the current user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.GetUser(System.Int64)">
            <summary>
            <para>Gets the user.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /users/{userId}</para>
            </summary>
            <param name="userId"> the user Id </param>
            <returns> the user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.UpdateUser(Smartsheet.Api.Models.User)">
            <summary>
            <para>Update a user.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /users/{userId}</para>
            </summary>
            <param name="user"> the user to update </param>
            <returns> the updated user </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.RemoveUser(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            <para>Removes a User from an organization. User is transitioned to a free collaborator with read-only access to owned sheets (unless those are optionally transferred to another user).</para>
            <remarks>This operation is only available to system administrators.</remarks>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /user{Id}</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="transferTo">(required if user owns groups): The ID of the user to transfer ownership to. 
            If the user being deleted owns groups, they will be transferred to this user. 
            If the user owns sheets, and transferSheets is true, then the deleted user’s sheets will be transferred to this user.</param>
            <param name="transferSheets">If true, and transferTo is specified, the deleted user’s sheets will be transferred. Else, sheets will not be transferred. Defaults to false.</param>
            <param name="removeFromSharing">Set to true to remove the user from sharing for all sheets/workspaces in the organization. If not specified, User will not be removed from sharing.</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.ListAlternateEmails(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>List all user alternate email(s).</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /users/{userId}/alternateemails</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="pagination"> the pagination</param>
            <returns> the list of all AlternateEmails </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.GetAlternateEmail(System.Int64,System.Int64)">
            <summary>
            <para>Get alternate email.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /users/{userId}/alternateemails/{alternateEmailId}</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="altEmailId"> the alternate email Id</param>
            <returns>
            Return the AlternateEmail (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null) 
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.AddAlternateEmail(System.Int64,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.AlternateEmail})">
            <summary>
            <para>Add alternate email(s).</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /users/{userId}/alternateemails</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="altEmails"> list of AlternateEmail(s)</param>
            <returns>
            Return the list of AlternateEmails (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null) 
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.DeleteAlternateEmail(System.Int64,System.Int64)">
            <summary>
            <para>Delete alternate email.</para>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /users/{userId}/alternateemails/{alternateEmailId}</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="altEmailId"> the alternate email Id</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.PromoteAlternateEmail(System.Int64,System.Int64)">
            <summary>
            <para>Promote an alternate email to primary.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /users/{userId}/alternateemails/{alternateEmailId}/makeprimary</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="altEmailId"> the alternate email Id</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.UserResources.AddProfileImage(System.Int64,System.String,System.String)">
            <summary>
            <para>Uploads a profile image for the specified user.</para>
            </summary>
            <param name="userId"> the Id of the user </param>
            <param name="file"> path to the image file</param>
            <param name="fileType">fileType content type of the image file</param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.UserResources.SheetResources">
            <summary>
            <para>Return the UserSheetResources object that provides access to sheets resources associated with
            User resources.</para>
            </summary>
            <returns> the associated discussion resources </returns>
        </member>
        <member name="T:Smartsheet.Api.UserSheetResources">
            <summary>
            <para>This interface provides methods to access Sheet resources of User.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.UserSheetResources.ListOrgSheets(Smartsheet.Api.Models.PaginationParameters,System.Nullable{System.DateTime})">
            <summary>
            <para>List of all Sheets owned by the members of the account (organization).</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /users/sheets</para>
            </summary>
            <param name="paging">the pagination</param>
            <param name="modifiedSince">only return sheets modified on or after the specified date</param>
            <returns> the list of all Sheets owned by the members of the account (organization). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WebhookResources.ListWebhooks(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>Gets the list of all Webhooks that the user owns (if a user generated token was used to make the request)
            or the list of all Webhooks associated with the third-party app (if a third-party app made the request). Items 
            in the response are ordered by API Client name, then Webhook name, then creation date.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /webhooks</para>
            </summary>
            <returns>IndexResult object containing an array of Webhook objects</returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WebhookResources.GetWebhook(System.Int64)">
            <summary>
            <para>Gets the Webhook specified in the URL.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /webhooks/{webhookId}</para>
            </summary>
            <param name="webhookId"> the Id of the webhook </param>
            <returns> the webhook resource (note that if there is no such resource, this method will throw 
            ResourceNotFoundException rather than returning null). </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WebhookResources.CreateWebhook(Smartsheet.Api.Models.Webhook)">
            <summary>
            <para>Creates a new Webhook.</para>
            <para>The request body is limited to name(required), callbackUrl (required), scope (required)
            scopeObjectId (required), events(required), version(required)</para>
            <para>It mirrors to the following Smartsheet REST API method:POST /webhooks</para>
            </summary>
            <param name="webhook"> the webhook to be created </param>
            <returns> the created webhook </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WebhookResources.UpdateWebhook(Smartsheet.Api.Models.Webhook)">
            <summary>
            <para>Updates the Webhook specified in the URL.</para>
            <para>The request body is limited to the name, events, callbackUrl, enabled and version attributes.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /webhooks/{webhookId}</para>
            </summary>
            <param name="webhook"> the webhook to update </param>
            <returns> the updated webhook </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WebhookResources.DeleteWebhook(System.Int64)">
            <summary>
            <para>Delete a webhook.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: DELETE /webhooks/{webhookId}</para>
            </summary>
            <param name="webhookId"> the webhook Id </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WebhookResources.ResetSharedSecret(System.Int64)">
            <summary>
            <para>Resets the shared secret for the specified Webhook. For more information about how a shared secret is used, see Authenticating Callbacks.</para>
            <para>The request body should be empty</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /webhooks/{webhookId}/resetsharedsecret</para>
            </summary>
            <param name="webhookId"> the webhook Id </param>
            <returns> the Webhook shared secret </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.WorkspaceFolderResources">
            <summary>
            <para>This interface provides methods to access Folder resources that are associated to a workspace object.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceFolderResources.ListFolders(System.Int64,Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>List Folders of a given workspace.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: GET /workspaces/{workspaceId}/Folders</para>
            </summary>
            <param name="workspaceId">the workspace Id</param>
            <param name="paging">the pagination information</param>
            <returns>the list of Folders (note that an empty list will be returned if no child folder is found), limited to the following attributes:
            <list type="bullet">
            <item><description>id</description></item>
            <item><description>name</description></item>
            <item><description>permalink</description></item>
            </list>
            </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceFolderResources.CreateFolder(System.Int64,Smartsheet.Api.Models.Folder)">
            <summary>
            <para>Create a folder in the workspace.</para>
            
            <para>It mirrors to the following Smartsheet REST API method: POST /workspaces/{workspaceId}/Folders</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="folder"> the folder to create </param>
            <returns> the created folder </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.WorkspaceResources">
            <summary>
            <para>This interface provides methods to access Workspace resources.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceResources.ListWorkspaces(Smartsheet.Api.Models.PaginationParameters)">
            <summary>
            <para>List all Workspaces.</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /Workspaces</para>
            <remarks>This operation supports pagination of results. For more information, see Paging.</remarks>
            </summary>
            <returns> the list of Workspaces (note that an empty list will be returned if there are none) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceResources.GetWorkspace(System.Int64,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.WorkspaceInclusion})">
            <summary>
            <para>Gets the specified Workspace (and lists its contents).</para>
            <para>It mirrors to the following Smartsheet REST API method: GET /workspaces/{workspaceid}</para>
            <remarks><para>By default, this operation only returns the top-level items in the Workspace. To load all of the contents, 
            including nested Folders, include the loadAll query string parameter with a value of true.</para>
            <para>If no Folders, Sheets, Reports, or Templates are present in the Workspace, the corresponding attribute 
            (e.g., "folders", "sheets") will not be present in the response object.</para></remarks>
            </summary>
            <param name="workspaceid">the workspace id</param>
            <param name="loadAll"> Defaults to false. If true, loads all of the contents, including nested Folders. </param>
            <param name="include"> When specified with a value of "source", response will include the source for any sheet that was created from another sheet or template</param>
            <returns> the workspace (note that if there is no such resource, this method will throw ResourceNotFoundException
            rather than returning null) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceResources.CreateWorkspace(Smartsheet.Api.Models.Workspace)">
            <summary>
            <para>Create a workspace.</para>
            <para>It mirrors to the following Smartsheet REST API method: POST /Workspaces</para>
            </summary>
            <param name="workspace"> the workspace to create </param>
            <returns> the created workspace </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceResources.UpdateWorkspace(Smartsheet.Api.Models.Workspace)">
            <summary>
            <para>Update a workspace.</para>
            <para>It mirrors to the following Smartsheet REST API method: PUT /workspaces/{workspaceId}</para>
            </summary>
            <param name="workspace"> the workspace to update </param>
            <returns> the updated workspace (note that if there is no such resource, this method will throw
            ResourceNotFoundException rather than returning null) </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceResources.CopyWorkspace(System.Int64,Smartsheet.Api.Models.ContainerDestination,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.WorkspaceCopyInclusion},System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.WorkspaceRemapExclusion})">
            <summary>
            <para>Creates a copy of the specified Workspace.</para>
            <para>It mirrors to the following Smartsheet REST API method:<br />
            POST /workspaces/{workspaceId}/copy</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="destination"> the destination to copy to </param>
            <param name="include"> the elements to copy. Note: Cell history will not be copied, regardless of which include parameter values are specified.</param>
            <param name="skipRemap"> the references to NOT re-map for the newly created folder
            <para>
            If "cellLinks" is specified in the skipRemap parameter value, the cell links within the newly created folder will continue to point to the original source sheets.
            If "reports" is specified in the skipRemap parameter value, the reports within the newly created folder will continue to point to the original source sheets.
            </para>
            </param>
            <returns> the created workspace </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceResources.DeleteWorkspace(System.Int64)">
            <summary>
            <para>Deletes the specified Workspace (and its contents).</para>
            <para>It mirrors to the following Smartsheet REST API method: DELETE /workspaces{workspaceId}</para>
            </summary>
            <param name="workspaceId"> the Id of the workspace </param>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with  the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="P:Smartsheet.Api.WorkspaceResources.FolderResources">
            <summary>
            <para>Return the WorkspaceFolderResources object that provides access to Folder resources associated with Workspace
            resources.</para>
            </summary>
            <returns> the workspace folder resources </returns>
        </member>
        <member name="P:Smartsheet.Api.WorkspaceResources.SheetResources">
            <summary>
            <para>Return the WorkspaceFolderResources object that provides access to Folder resources associated with Workspace
            resources.</para>
            </summary>
            <returns> the workspace folder resources </returns>
        </member>
        <member name="P:Smartsheet.Api.WorkspaceResources.ShareResources">
            <summary>
            <para>Return the ShareResources object that provides access to Share resources associated with Workspace 
            resources.</para>
            </summary>
            <returns> the share resources object </returns>
        </member>
        <member name="T:Smartsheet.Api.FolderSheetResources">
            <summary>
            <para>This interface provides methods to access sheet resources that are associated to a Folder object.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.FolderSheetResources.CreateSheet(System.Int64,Smartsheet.Api.Models.Sheet)">
            <summary>
            <para>Creates a sheet from scratch in the specified folder.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /folders/{folderId}/sheets</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="sheet"> the sheet to create </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.FolderSheetResources.CreateSheetFromTemplate(System.Int64,Smartsheet.Api.Models.Sheet,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.TemplateInclusion})">
            <summary>
            <para> Creates a sheet in the specified folder, from the specified template. </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /folders/{folderId}/sheets</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="sheet"> the sheet to create </param>
            <param name="includes"> used to specify the optional objects to include </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.FolderSheetResources.ImportCsvSheet(System.Int64,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet in the specified folder (from CSV). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /folders/{folderId}/sheets/import</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="file"> path to the CSV file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.FolderSheetResources.ImportXlsSheet(System.Int64,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet in the specified folder (from XLSX). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /folders/{folderId}/sheets/import</para>
            </summary>
            <param name="folderId"> the folder Id </param>
            <param name="file"> path to the XLSX file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="T:Smartsheet.Api.WorkspaceSheetResources">
            <summary>
            <para>This interface provides methods to access sheet resources that are associated to a Workspace object.</para>
            
            <para>Thread Safety: Implementation of this interface must be thread safe.</para>
            </summary>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceSheetResources.CreateSheet(System.Int64,Smartsheet.Api.Models.Sheet)">
            <summary>
            <para>Creates a sheet in the given workspace.</para>
            
            <para>Mirrors to the following Smartsheet REST API method: POST /workspaces/{workspaceId}/Sheets</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="sheet"> the sheet to create </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceSheetResources.CreateSheetFromTemplate(System.Int64,Smartsheet.Api.Models.Sheet,System.Collections.Generic.IEnumerable{Smartsheet.Api.Models.TemplateInclusion})">
            <summary>
            <para>Creates a sheet at the top-level of the specified workspace, from the specified template. </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /workspaces/{workspaceId}/Sheets</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="sheet"> the sheet to create </param>
            <param name="includes"> used to specify the optional objects to include </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceSheetResources.ImportCsvSheet(System.Int64,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet at the top level of the specified workspace (from CSV). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /workspaces/{workspaceId}/sheets/import</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="file"> path to the CSV file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
        <member name="M:Smartsheet.Api.WorkspaceSheetResources.ImportXlsSheet(System.Int64,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para>Imports a sheet at the top level of the specified workspace (From XLSX). </para>
            <para>Mirrors to the following Smartsheet REST API method: POST /workspaces/{workspaceId}/sheets/import</para>
            </summary>
            <param name="workspaceId"> the workspace Id </param>
            <param name="file"> path to the image file</param>
            <param name="sheetName"> destination sheet name </param>
            <param name="headerRowIndex"> index (0 based) of row to be used for column names </param>
            <param name="primaryColumnIndex"> index (0 based) of primary column </param>
            <returns> the created sheet </returns>
            <exception cref="T:System.InvalidOperationException"> if any argument is null or an empty string </exception>
            <exception cref="T:Smartsheet.Api.InvalidRequestException"> if there is any problem with the REST API request </exception>
            <exception cref="T:Smartsheet.Api.AuthorizationException"> if there is any problem with the REST API authorization (access token) </exception>
            <exception cref="T:Smartsheet.Api.ResourceNotFoundException"> if the resource cannot be found </exception>
            <exception cref="T:Smartsheet.Api.ServiceUnavailableException"> if the REST API service is not available (possibly due to rate limiting) </exception>
            <exception cref="T:Smartsheet.Api.SmartsheetException"> if there is any other error during the operation </exception>
        </member>
    </members>
</doc>
